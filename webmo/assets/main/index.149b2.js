window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  AppContextFSM: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3f93aSAvVZPYZs/95J4chbF", "AppContextFSM");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AppContextState = void 0;
    var EventMgr_1 = require("../../BaseFrame/BaseManager/EventMgr");
    var NetMgr_1 = require("../../BaseFrame/BaseManager/NetMgr");
    var TimerMgr_1 = require("../../BaseFrame/BaseManager/TimerMgr");
    var UIMgr_1 = require("../../BaseFrame/BaseManager/UIMgr");
    var AppLog_1 = require("../../BaseFrame/Log/AppLog");
    var SimpleFSMState_1 = require("../../BaseFrame/StateMachine/SimpleFSMState");
    var SimpleFSMSystem_1 = require("../../BaseFrame/StateMachine/SimpleFSMSystem");
    var EventID_1 = require("../BaseModule/EventID");
    var GameEnums_1 = require("../BaseModule/GameEnums");
    var NetSender_1 = require("../NetModule/NetSender");
    var UI_DoubleNetDialog_1 = require("../Scene/CommonDiaglog/UI_DoubleNetDialog");
    var GameConfig_1 = require("./GameConfig");
    var Global_1 = require("./Global");
    var AppContextState;
    (function(AppContextState) {
      AppContextState[AppContextState["CHECK_START_ARGUMENTS"] = 0] = "CHECK_START_ARGUMENTS";
      AppContextState[AppContextState["SET_INIT"] = 1] = "SET_INIT";
      AppContextState[AppContextState["OPEN_CONNECT"] = 2] = "OPEN_CONNECT";
      AppContextState[AppContextState["AUTH"] = 3] = "AUTH";
      AppContextState[AppContextState["GET_SERVER_TIME"] = 4] = "GET_SERVER_TIME";
      AppContextState[AppContextState["LOGIN"] = 5] = "LOGIN";
      AppContextState[AppContextState["CONNECTING"] = 6] = "CONNECTING";
      AppContextState[AppContextState["DISCONNECT"] = 7] = "DISCONNECT";
      AppContextState[AppContextState["RECONNECTING"] = 8] = "RECONNECTING";
      AppContextState[AppContextState["ERROR_WAITING"] = 9] = "ERROR_WAITING";
      AppContextState[AppContextState["END"] = 10] = "END";
    })(AppContextState = exports.AppContextState || (exports.AppContextState = {}));
    var CheckStartArgumentsState = function(_super) {
      __extends(CheckStartArgumentsState, _super);
      function CheckStartArgumentsState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      CheckStartArgumentsState.prototype.GetUniqueID = function() {
        return AppContextState.CHECK_START_ARGUMENTS;
      };
      CheckStartArgumentsState.prototype.OnBeforeEntering = function() {
        AppLog_1.default.Log("check start");
        this.ownerObj.SaveLaunchParam();
        this.nextState = AppContextState.END;
      };
      CheckStartArgumentsState.prototype.OnBeforeLeaving = function() {};
      CheckStartArgumentsState.prototype.ReasonState = function(param) {
        return this.nextState;
      };
      return CheckStartArgumentsState;
    }(SimpleFSMState_1.default);
    var SetInitState = function(_super) {
      __extends(SetInitState, _super);
      function SetInitState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      SetInitState.prototype.GetUniqueID = function() {
        return AppContextState.SET_INIT;
      };
      SetInitState.prototype.OnBeforeEntering = function() {
        this.nextState = null;
        var userId = -1;
        var enterSource = this.ownerObj.LaunchParam.enterSource;
        var enterVersion = this.ownerObj.LaunchParam.enterVersion;
      };
      SetInitState.prototype.OnBeforeLeaving = function() {};
      SetInitState.prototype.ReasonState = function(param) {
        return this.nextState;
      };
      return SetInitState;
    }(SimpleFSMState_1.default);
    var OpenConnectState = function(_super) {
      __extends(OpenConnectState, _super);
      function OpenConnectState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      OpenConnectState.prototype.GetUniqueID = function() {
        return AppContextState.OPEN_CONNECT;
      };
      OpenConnectState.prototype.OnBeforeEntering = function() {
        "number" == typeof this.ownerObj.LaunchParam.testUrlIdx && this.ownerObj.LaunchParam.testUrlIdx >= 0 && this.ownerObj.LaunchParam.testUrlIdx < 4 && (Global_1.default.Inst.login_host = this.ownerObj.LaunchParam.testUrlIdx);
        NetMgr_1.default.Inst.ConnectSocket(GameConfig_1.Getways[Global_1.default.Inst.login_host]);
        this._ownerFSM.lastDisconnectTime = new Date().getTime();
      };
      OpenConnectState.prototype.OnBeforeLeaving = function() {};
      OpenConnectState.prototype.ReasonState = function(param) {
        return null;
      };
      return OpenConnectState;
    }(SimpleFSMState_1.default);
    var AuthState = function(_super) {
      __extends(AuthState, _super);
      function AuthState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      AuthState.prototype.GetUniqueID = function() {
        return AppContextState.AUTH;
      };
      AuthState.prototype.OnBeforeEntering = function() {
        this.nextState = null;
        EventMgr_1.EventMgr.Inst.addEvent(EventID_1.LocMsg.SAUTH_RESULT.toString(), this._SauthResult, this);
        this._SendNetSauth();
      };
      AuthState.prototype.OnBeforeLeaving = function() {
        EventMgr_1.EventMgr.Inst.removeEvent(EventID_1.LocMsg.SAUTH_RESULT.toString(), this._SauthResult.bind(this), this);
      };
      AuthState.prototype.ReasonState = function(param) {
        if (TimerMgr_1.default.Inst.GetCurrentLocalTime() - this._ownerFSM.lastSendNetTime > GameConfig_1.HEART_BEAT_INTERVAL) if (this._ownerFSM.retryTime > 0) {
          AppLog_1.default.Warn("GetServerTimeState\u8fde\u63a5");
          this._ownerFSM.ShowErrorDialog();
          this.nextState = AppContextState.ERROR_WAITING;
        } else {
          ++this._ownerFSM.retryTime;
          this._SendNetSauth();
        }
        return this.nextState;
      };
      AuthState.prototype._SendNetSauth = function() {
        NetSender_1.default.SendSauth();
        this._ownerFSM.lastSendNetTime = TimerMgr_1.default.Inst.GetCurrentLocalTime();
      };
      AuthState.prototype._SauthResult = function(msgData) {
        if (msgData.status && 0 != msgData.status) {
          this._ownerFSM.ShowErrorDialog();
          this.nextState = AppContextState.ERROR_WAITING;
        } else {
          this.nextState = AppContextState.GET_SERVER_TIME;
          this._ownerFSM.retryTime = 0;
        }
      };
      return AuthState;
    }(SimpleFSMState_1.default);
    var GetServerTimeState = function(_super) {
      __extends(GetServerTimeState, _super);
      function GetServerTimeState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      GetServerTimeState.prototype.GetUniqueID = function() {
        return AppContextState.GET_SERVER_TIME;
      };
      GetServerTimeState.prototype.OnBeforeEntering = function() {
        this.nextState = null;
        this._ownerFSM.SendHeartBeat();
      };
      GetServerTimeState.prototype.OnBeforeLeaving = function() {};
      GetServerTimeState.prototype.ReasonState = function(param) {
        if (TimerMgr_1.default.Inst.GetCurrentLocalTime() - this._ownerFSM.lastSendNetTime > GameConfig_1.HEART_BEAT_INTERVAL) if (this._ownerFSM.retryTime > 0) {
          AppLog_1.default.Warn("GetServerTimeState\u8fde\u63a5");
          this._ownerFSM.ShowErrorDialog();
          this.nextState = AppContextState.ERROR_WAITING;
        } else {
          ++this._ownerFSM.retryTime;
          this._ownerFSM.SendHeartBeat();
        }
        return this.nextState;
      };
      return GetServerTimeState;
    }(SimpleFSMState_1.default);
    var LoginState = function(_super) {
      __extends(LoginState, _super);
      function LoginState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      LoginState.prototype.GetUniqueID = function() {
        return AppContextState.LOGIN;
      };
      LoginState.prototype.OnBeforeEntering = function() {
        this.nextState = null;
        EventMgr_1.EventMgr.Inst.removeEvent(EventID_1.LocMsg.GAME_LOGIN.toString(), this._LoginResult.bind(this), this);
        EventMgr_1.EventMgr.Inst.addEvent(EventID_1.LocMsg.GAME_LOGIN.toString(), this._LoginResult.bind(this), this);
        this._SendLogin();
      };
      LoginState.prototype.OnBeforeLeaving = function() {
        EventMgr_1.EventMgr.Inst.removeEvent(EventID_1.LocMsg.GAME_LOGIN.toString(), this._LoginResult.bind(this), this);
      };
      LoginState.prototype.ReasonState = function(param) {
        if (TimerMgr_1.default.Inst.GetCurrentLocalTime() - this._ownerFSM.lastSendNetTime > GameConfig_1.HEART_BEAT_INTERVAL) if (this._ownerFSM.retryTime > 0) {
          this._ownerFSM.ShowErrorDialog();
          this.nextState = AppContextState.ERROR_WAITING;
        } else {
          ++this._ownerFSM.retryTime;
          this._SendLogin();
        }
        return this.nextState;
      };
      LoginState.prototype._SendLogin = function() {
        this._ownerFSM.lastSendNetTime = TimerMgr_1.default.Inst.GetCurrentLocalTime();
      };
      LoginState.prototype._LoginResult = function(recData) {
        if (recData.code == GameEnums_1.ServerEC.SUCCESS) {
          this.nextState = AppContextState.CONNECTING;
          this._ownerFSM.retryTime = 0;
          return;
        }
        this._ownerFSM.ShowErrorDialog();
        this.nextState = AppContextState.ERROR_WAITING;
      };
      return LoginState;
    }(SimpleFSMState_1.default);
    var ConnectingState = function(_super) {
      __extends(ConnectingState, _super);
      function ConnectingState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ConnectingState.prototype.GetUniqueID = function() {
        return AppContextState.CONNECTING;
      };
      ConnectingState.prototype.OnBeforeEntering = function() {
        this._ownerFSM.SendHeartBeat();
        EventMgr_1.EventMgr.Inst.emitEvent("ON_GAME_CONNECTING");
        this._ownerFSM.CloseErrorDialog();
      };
      ConnectingState.prototype.OnBeforeLeaving = function() {};
      ConnectingState.prototype.ReasonState = function(param) {
        this._ownerFSM.UpdateHeartBeat(param);
        return null;
      };
      return ConnectingState;
    }(SimpleFSMState_1.default);
    var DisconnectState = function(_super) {
      __extends(DisconnectState, _super);
      function DisconnectState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DisconnectState.prototype.GetUniqueID = function() {
        return AppContextState.DISCONNECT;
      };
      DisconnectState.prototype.OnBeforeEntering = function(param) {
        NetMgr_1.default.Inst.CloseSocket("AppContextFSM - DisconnectState");
        if (this._ownerFSM.retryTime > 1) {
          Global_1.default.Inst.LoadingCover(false);
          this._AskingReconnect();
          this.nextState = null;
        } else this.nextState = AppContextState.RECONNECTING;
      };
      DisconnectState.prototype.OnBeforeLeaving = function() {};
      DisconnectState.prototype.ReasonState = function(param) {
        return this.nextState;
      };
      DisconnectState.prototype._AskingReconnect = function() {
        this._ownerFSM.ShowErrorDialog();
        this.nextState = AppContextState.ERROR_WAITING;
      };
      return DisconnectState;
    }(SimpleFSMState_1.default);
    var ReConnectingState = function(_super) {
      __extends(ReConnectingState, _super);
      function ReConnectingState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ReConnectingState.prototype.GetUniqueID = function() {
        return AppContextState.RECONNECTING;
      };
      ReConnectingState.prototype.OnBeforeEntering = function() {
        ++this._ownerFSM.retryTime;
        AppLog_1.default.Warn("\u91cd\u8fde\u6b21\u6570\uff1a" + this._ownerFSM.retryTime);
        NetMgr_1.default.Inst.ConnectSocket(GameConfig_1.Getways[Global_1.default.Inst.login_host]);
        this._ownerFSM.lastDisconnectTime = new Date().getTime();
      };
      ReConnectingState.prototype.OnBeforeLeaving = function() {};
      ReConnectingState.prototype.ReasonState = function(param) {
        return null;
      };
      return ReConnectingState;
    }(SimpleFSMState_1.default);
    var ErrorWaitingState = function(_super) {
      __extends(ErrorWaitingState, _super);
      function ErrorWaitingState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ErrorWaitingState.prototype.GetUniqueID = function() {
        return AppContextState.ERROR_WAITING;
      };
      ErrorWaitingState.prototype.OnBeforeEntering = function() {};
      ErrorWaitingState.prototype.OnBeforeLeaving = function() {};
      ErrorWaitingState.prototype.ReasonState = function(param) {
        return null;
      };
      return ErrorWaitingState;
    }(SimpleFSMState_1.default);
    var EndState = function(_super) {
      __extends(EndState, _super);
      function EndState() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._delayTime = 0;
        return _this;
      }
      EndState.prototype.GetUniqueID = function() {
        return AppContextState.END;
      };
      EndState.prototype.OnBeforeEntering = function() {
        this._ownerFSM.ShowErrorDialog(true);
      };
      EndState.prototype.OnBeforeLeaving = function() {
        AppLog_1.default.Log("AppContextFSM EndState");
      };
      EndState.prototype.ReasonState = function(param) {
        return null;
      };
      return EndState;
    }(SimpleFSMState_1.default);
    var AppContextFSM = function(_super) {
      __extends(AppContextFSM, _super);
      function AppContextFSM() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lastDisconnectTime = 0;
        _this.retryTime = 0;
        _this._timeHeartBeat = 0;
        _this.lastSendNetTime = 0;
        return _this;
      }
      AppContextFSM.prototype._DebugLogForFSM = function(currUID, nextUID) {
        AppLog_1.default.Log("AppContextFSM \u7531 " + AppContextState[currUID] + " \u8f6c " + AppContextState[nextUID]);
      };
      AppContextFSM.prototype.OnStartUpFSM = function() {
        EventMgr_1.EventMgr.Inst.addEvent(EventID_1.LocMsg.REC_HEART_BEAT.toString(), this._recHeartBeat.bind(this), this);
        EventMgr_1.EventMgr.Inst.addEvent("WS_OPEN", this._OnWSOpen, this);
        EventMgr_1.EventMgr.Inst.addEvent("WS_CLOSE", this._OnWSClose, this);
        EventMgr_1.EventMgr.Inst.addEvent("WS_ERROR", this._OnWSError, this);
        this.TransitionTo(AppContextState.CHECK_START_ARGUMENTS);
      };
      AppContextFSM.prototype._OnInitAllStates = function() {
        this._AddState(new CheckStartArgumentsState());
        this._AddState(new SetInitState());
        this._AddState(new OpenConnectState());
        this._AddState(new AuthState());
        this._AddState(new GetServerTimeState());
        this._AddState(new LoginState());
        this._AddState(new ConnectingState());
        this._AddState(new DisconnectState());
        this._AddState(new ReConnectingState());
        this._AddState(new ErrorWaitingState());
        this._AddState(new EndState());
      };
      AppContextFSM.prototype._OnWSOpen = function(event) {
        this.TransitionTo(AppContextState.AUTH);
      };
      AppContextFSM.prototype._OnWSClose = function(event) {
        AppLog_1.default.Warn("\u8fde\u63a5_OnWSClose");
        AppLog_1.default.Error("_OnWSClose", event, AppContextState[this.currStateUID]);
        this.currStateUID == AppContextState.AUTH || this.currStateUID == AppContextState.GET_SERVER_TIME || this.currStateUID == AppContextState.DISCONNECT || this.currStateUID == AppContextState.ERROR_WAITING ? AppLog_1.default.Warn("\u8fde\u63a5_OnWSClose do nothing") : this.TransitionTo(AppContextState.DISCONNECT);
      };
      AppContextFSM.prototype._OnWSError = function(event) {
        AppLog_1.default.Error("_OnWSError", event);
        this.currStateUID == AppContextState.AUTH || this.currStateUID == AppContextState.GET_SERVER_TIME || this.currStateUID == AppContextState.DISCONNECT || this.currStateUID == AppContextState.ERROR_WAITING ? AppLog_1.default.Warn("do nothing") : this.TransitionTo(AppContextState.DISCONNECT);
      };
      AppContextFSM.prototype.ShowErrorDialog = function(close) {
        var _a;
        void 0 === close && (close = false);
        var mapMsg = (_a = {}, _a[AppContextState.AUTH] = {
          title: "\u54ce\u5440\uff0c\u4e0e\u5ba0\u7269\u661f\u7403\u7684\u8fde\u63a5\u4e2d\u65ad\u4e86",
          context: "\u548cSoul\u661f\u7403\u5931\u8054\u4e2d\n\u5feb\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684\u7f51\u7edc\u5427"
        }, _a[AppContextState.SET_INIT] = {
          title: "\u54ce\u5440\uff0c\u4e0e\u5ba0\u7269\u661f\u7403\u7684\u8fde\u63a5\u4e2d\u65ad\u4e86",
          context: "\u7f51\u7edc\u4e0d\u4f73\n\u5feb\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684\u7f51\u7edc\u5427"
        }, _a[AppContextState.GET_SERVER_TIME] = {
          title: "\u54ce\u5440\uff0c\u4e0e\u5ba0\u7269\u661f\u7403\u7684\u8fde\u63a5\u4e2d\u65ad\u4e86",
          context: "\u83b7\u53d6\u6570\u636e\u5931\u8d25\n\u5feb\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684\u7f51\u7edc\u5427"
        }, _a[AppContextState.LOGIN] = {
          title: "\u54ce\u5440\uff0c\u4e0e\u5ba0\u7269\u661f\u7403\u7684\u8fde\u63a5\u4e2d\u65ad\u4e86",
          context: "\u767b\u5f55\u6e38\u620f\u5931\u8d25\n\u5feb\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684\u7f51\u7edc\u5427"
        }, _a[AppContextState.DISCONNECT] = {
          title: "\u54ce\u5440\uff0c\u4e0e\u5ba0\u7269\u661f\u7403\u7684\u8fde\u63a5\u4e2d\u65ad\u4e86",
          context: "\u7f51\u7edc\u65ad\u5f00\n\u5feb\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684\u7f51\u7edc\u5427"
        }, _a[AppContextState.END] = {
          title: "\u54ce\u5440\uff0c\u4e0e\u5ba0\u7269\u661f\u7403\u7684\u8fde\u63a5\u4e2d\u65ad\u4e86",
          context: "\u542f\u52a8\u6e38\u620f\u5931\u8d25\n\u5feb\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684\u7f51\u7edc\u5427"
        }, _a);
        var self = this;
        var pData = {
          strTiltle: mapMsg[self._currStateUID].title,
          strContent: mapMsg[self._currStateUID].context,
          isBtnConfirmLeft: true,
          isBtnRightCloseShow: true,
          confirmText: "\u91cd\u65b0\u8fde\u63a5",
          confirmSprIdx: 0,
          confirmCallBack: null,
          cancelText: "\u7a0d\u540e\u518d\u6765",
          cancelSprIdx: 1,
          cancelCallBack: null,
          popData: null
        };
        pData.confirmCallBack = function() {
          self.retryTime = 0;
          var next = self._currStateUID;
          self._currStateUID != AppContextState.DISCONNECT && self._currStateUID != AppContextState.GET_SERVER_TIME && self._currStateUID != AppContextState.ERROR_WAITING || (next = AppContextState.RECONNECTING);
          self.TransitionTo(next);
        };
        pData.cancelCallBack = function() {
          AppLog_1.default.Log("cancelCallBack");
        };
        if (UIMgr_1.default.Inst.GetDisplayingUI("UI_DoubleNetDialog") || UIMgr_1.default.Inst.IsLoadingUI("UI_DoubleNetDialog")) return;
        UIMgr_1.default.Inst.AsyncCreatePupopByPath(UI_DoubleNetDialog_1.default.refPath, UI_DoubleNetDialog_1.default.refKey).then(function(dialog) {
          dialog.node.parent = cc.Canvas.instance.node;
          dialog.SetDialog(pData);
          dialog.Popup();
        });
      };
      AppContextFSM.prototype._recHeartBeat = function(recData, sn, ping) {
        void 0 === ping && (ping = 0);
      };
      AppContextFSM.prototype.SendHeartBeat = function() {
        var sendData = {};
        NetSender_1.default.SetNetData(EventID_1.NetSendMsgEnum.HeartBeat, sendData);
        this.lastSendNetTime = TimerMgr_1.default.Inst.GetCurrentLocalTime();
      };
      AppContextFSM.prototype.UpdateHeartBeat = function(dt) {
        if (this._timeHeartBeat < GameConfig_1.HEART_BEAT_INTERVAL) this._timeHeartBeat += dt; else {
          var sendData = {};
          NetSender_1.default.SetNetData(EventID_1.NetSendMsgEnum.HeartBeat, sendData);
          this._timeHeartBeat = 0;
        }
      };
      AppContextFSM.prototype.CloseErrorDialog = function() {
        (UIMgr_1.default.Inst.GetDisplayingUI("UI_DoubleNetDialog") || UIMgr_1.default.Inst.IsLoadingUI("UI_DoubleNetDialog")) && UIMgr_1.default.Inst.GetDisplayingUI("UI_DoubleNetDialog").ClosePopup();
      };
      return AppContextFSM;
    }(SimpleFSMSystem_1.default);
    exports.default = AppContextFSM;
    cc._RF.pop();
  }, {
    "../../BaseFrame/BaseManager/EventMgr": "EventMgr",
    "../../BaseFrame/BaseManager/NetMgr": "NetMgr",
    "../../BaseFrame/BaseManager/TimerMgr": "TimerMgr",
    "../../BaseFrame/BaseManager/UIMgr": "UIMgr",
    "../../BaseFrame/Log/AppLog": "AppLog",
    "../../BaseFrame/StateMachine/SimpleFSMState": "SimpleFSMState",
    "../../BaseFrame/StateMachine/SimpleFSMSystem": "SimpleFSMSystem",
    "../BaseModule/EventID": "EventID",
    "../BaseModule/GameEnums": "GameEnums",
    "../NetModule/NetSender": "NetSender",
    "../Scene/CommonDiaglog/UI_DoubleNetDialog": "UI_DoubleNetDialog",
    "./GameConfig": "GameConfig",
    "./Global": "Global"
  } ],
  AppContext: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f20b96w9tBbIFHeUi8cE51", "AppContext");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NetMgr_1 = require("../../BaseFrame/BaseManager/NetMgr");
    var AppLog_1 = require("../../BaseFrame/Log/AppLog");
    var AppContextFSM_1 = require("./AppContextFSM");
    var HEART_BEAT_INTERVAL = 15;
    var AppContext = function() {
      function AppContext() {
        this.isFromGameVisitor = false;
        this._appContextFSM = null;
        this._lp = null;
        this._appContextFSM = new AppContextFSM_1.default(this);
        this._lp = {
          webMode: "SOCKET"
        };
        this._appContextFSM.OnStartUpFSM();
      }
      Object.defineProperty(AppContext.prototype, "LaunchParam", {
        get: function() {
          return this._lp;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AppContext.prototype, "HeartBeatInterval", {
        get: function() {
          return HEART_BEAT_INTERVAL;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AppContext, "Inst", {
        get: function() {
          null == AppContext._inst && (AppContext._inst = new AppContext());
          return this._inst;
        },
        enumerable: false,
        configurable: true
      });
      AppContext.prototype.Destroy = function() {
        AppContext._inst = null;
      };
      AppContext.prototype.ReLogin = function() {};
      AppContext.prototype.InitContextFSM = function() {};
      AppContext.prototype.IsConnectingState = function() {
        if ("HTTP" == this.LaunchParam.webMode || "LOCAL" == this.LaunchParam.webMode) return true;
        return this._appContextFSM.currStateUID == AppContextFSM_1.AppContextState.CONNECTING;
      };
      AppContext.prototype.IsDisconnectingState = function() {
        return this._appContextFSM.currStateUID == AppContextFSM_1.AppContextState.DISCONNECT;
      };
      AppContext.prototype.ForceDisconnect = function() {
        if (this._appContextFSM && this.IsConnectingState()) {
          this._appContextFSM.TransitionTo(AppContextFSM_1.AppContextState.DISCONNECT, new Date().getTime());
          NetMgr_1.default.Inst.CloseSocket();
          AppLog_1.default.CLog([ "\u7acb\u5373\u65ad\u7ebf" ], "red");
        }
        if (this.IsConnectingState()) {
          this._appContextFSM.TransitionTo(AppContextFSM_1.AppContextState.DISCONNECT, new Date().getTime());
          NetMgr_1.default.Inst.CloseSocket();
          AppLog_1.default.CLog([ "\u7acb\u5373\u65ad\u7ebf" ], "red");
        } else if (this.IsDisconnectingState()) {
          this._appContextFSM.TransitionTo(AppContextFSM_1.AppContextState.RECONNECTING);
          AppLog_1.default.CLog([ "\u91cd\u65b0\u8fde\u7ebf" ], "blue");
        }
      };
      AppContext.prototype.ForceRecconnect = function(delayConnectTime) {
        void 0 === delayConnectTime && (delayConnectTime = 2);
      };
      AppContext.prototype.OnUpdateTick = function(dt) {
        this._appContextFSM && this._appContextFSM.OnUpdateTickFSM(dt);
      };
      AppContext.prototype.GetLaunchParam = function() {
        var search = window.location.search;
        var link = search.substring(search.lastIndexOf("?") + 1);
        var param = link.split("&");
        var tmp = {};
        for (var i = 0; i < param.length; ++i) {
          var kv = param[i].split("=");
          tmp[kv[0].toLowerCase()] = kv[1];
        }
        return tmp;
      };
      AppContext.prototype.SaveLaunchParam = function() {
        var lp = this.GetLaunchParam();
        lp["http"] ? this._lp.webMode = "HTTP" : lp["local"] && (this._lp.webMode = "LOCAL");
        lp["userid"] && (this._lp.userId = parseInt(lp["userid"]));
      };
      AppContext._inst = null;
      return AppContext;
    }();
    exports.default = AppContext;
    cc._RF.pop();
  }, {
    "../../BaseFrame/BaseManager/NetMgr": "NetMgr",
    "../../BaseFrame/Log/AppLog": "AppLog",
    "./AppContextFSM": "AppContextFSM"
  } ],
  AppLog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "590f4ewDvdBnJVnustvStaK", "AppLog");
    "use strict";
    var __spreadArrays = this && this.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, 
      k++) r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppLog = function() {
      function AppLog() {}
      AppLog.getDateString = function() {
        var date = new Date();
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hour = date.getHours();
        var min = date.getMinutes();
        var sec = date.getSeconds();
        var msec = date.getMilliseconds();
        var strMon = month.toString().padStart(2, "0");
        var strDay = day.toString().padStart(2, "0");
        var strHour = hour.toString().padStart(2, "0");
        var strMin = min.toString().padStart(2, "0");
        var strSec = sec.toString().padStart(2, "0");
        var strMsec = msec.toString().padStart(2, "0");
        return year + "/" + strMon + "/" + strDay + " " + strHour + ":" + strMin + ":" + strSec + ":" + strMsec;
      };
      AppLog.Info = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (!AppLog.OpenFLAG) return;
        var backLog = console.info;
        var color = "color:#00CD00;";
        if (AppLog.NormalStyle) backLog.apply(void 0, __spreadArrays([ AppLog.getDateString() ], args)); else {
          var res = AppLog._ArgsFormat(args, color);
          backLog.apply(void 0, __spreadArrays([ "%c%s: " + res[0], color, AppLog.getDateString() ], res[1]));
        }
      };
      AppLog.Log = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (!AppLog.OpenFLAG) return;
        var backLog = console.log;
        var color = "color:#00ADFF;";
        if (AppLog.NormalStyle) backLog.apply(void 0, __spreadArrays([ AppLog.getDateString() ], args)); else {
          var res = AppLog._ArgsFormat(args, color);
          backLog.apply(void 0, __spreadArrays([ "%c%s: " + res[0], color, AppLog.getDateString() ], res[1]));
        }
      };
      AppLog.Log2 = function(a, b, c, d) {
        if (!AppLog.OpenFLAG) return;
        var backLog = console.log;
        var color = "color:#00ADFF;";
        var as = a || "";
        var bs = a || "";
        var cs = a || "";
        var ds = a || "";
        backLog(as + "+" + bs + "+" + cs + "+" + ds);
      };
      AppLog.Warn = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (!AppLog.OpenFLAG) return;
        var backLog = console.warn;
        var color = "color:yellow;";
        if (AppLog.NormalStyle) backLog.apply(void 0, __spreadArrays([ AppLog.getDateString() ], args)); else {
          var res = AppLog._ArgsFormat(args, color);
          backLog.apply(void 0, __spreadArrays([ "%c%s: " + res[0], color, AppLog.getDateString() ], res[1]));
        }
      };
      AppLog.Error = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        var backLog = console.error;
        var color = "color:red";
        if (AppLog.NormalStyle) backLog.apply(void 0, __spreadArrays([ AppLog.getDateString() ], args)); else {
          var res = AppLog._ArgsFormat(args, color);
          backLog.apply(void 0, __spreadArrays([ "%c%s: " + res[0], color, AppLog.getDateString() ], res[1]));
        }
      };
      AppLog.CLog = function(msg, color, fontSize, background) {
        void 0 === color && (color = "#CA20FF");
        void 0 === fontSize && (fontSize = 11);
        void 0 === background && (background = "rgba(0,0,0,0)");
        if (!AppLog.OpenFLAG) return;
        var backLog = console.warn;
        var cColor = "color: " + color + "; background: " + background + "; font-size: " + fontSize;
        if (AppLog.NormalStyle) backLog.apply(void 0, __spreadArrays([ AppLog.getDateString() ], msg)); else {
          var res = AppLog._ArgsFormat(msg, cColor);
          backLog.apply(void 0, __spreadArrays([ "%c%s: " + res[0], cColor, AppLog.getDateString() ], res[1]));
        }
      };
      AppLog._ArgsFormat = function(args, color) {
        var format = [];
        var output = [];
        for (var i = 0; i < args.length; ++i) {
          switch (typeof args[i]) {
           case "object":
            if (cc.sys.isNative) {
              format.push("%c%s");
              args[i] = JSON.stringify(args[i]);
            } else format.push("%c%o");
            break;

           case "number":
            format.push("%c%f");
            break;

           default:
            format.push("%c%s");
          }
          output.push(color);
          output.push(args[i]);
        }
        return [ format.join(" "), output ];
      };
      AppLog.OpenFLAG = true;
      AppLog.NormalStyle = false;
      return AppLog;
    }();
    exports.default = AppLog;
    cc._RF.pop();
  }, {} ],
  AudioMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "adbaa0E0jtDCa8aN8ouy6bJ", "AudioMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AudioType = void 0;
    var SceneMgr_1 = require("./SceneMgr");
    var AudioType;
    (function(AudioType) {
      AudioType[AudioType["NONE"] = 0] = "NONE";
      AudioType[AudioType["MUSIC"] = 1] = "MUSIC";
      AudioType[AudioType["EFFECT"] = 2] = "EFFECT";
    })(AudioType = exports.AudioType || (exports.AudioType = {}));
    var AudioManager = function() {
      function AudioManager() {
        this._mapAudioRes = null;
        this._mapAudioVolumn = null;
        this._mapAudioId = null;
        this._mapUrlEffect = null;
        AudioManager._inst = this;
        this._mapAudioRes = {};
        this._mapAudioVolumn = {};
        this._mapAudioVolumn[AudioType.MUSIC] = {
          volumn: .5,
          state: true
        };
        this._mapAudioVolumn[AudioType.EFFECT] = {
          volumn: .5,
          state: true
        };
        this._mapAudioId = {};
        this._mapAudioId[AudioType.MUSIC] = {};
        this._mapAudioId[AudioType.EFFECT] = {};
        this._mapUrlEffect = {};
        this.SwitchVolume(AudioType.MUSIC, true);
        this.SwitchVolume(AudioType.EFFECT, true);
        this.ChangeVolume(AudioType.MUSIC, this._mapAudioVolumn[AudioType.MUSIC].volumn);
        this.ChangeVolume(AudioType.EFFECT, this._mapAudioVolumn[AudioType.EFFECT].volumn);
      }
      Object.defineProperty(AudioManager, "Inst", {
        get: function() {
          null == AudioManager._inst && (AudioManager._inst = new AudioManager());
          return AudioManager._inst;
        },
        enumerable: false,
        configurable: true
      });
      AudioManager.prototype.LoadAudioClip = function(path, clipName) {
        var self = this;
        var currScene = SceneMgr_1.default.Inst.GetCurrentSceneName();
        return new Promise(function(resolve, reject) {
          cc.loader.loadRes(path, cc.AudioClip, function(err, clip) {
            if (currScene != SceneMgr_1.default.Inst.GetCurrentSceneName()) return;
            if (err) return reject(err);
            self._mapAudioRes[clipName] = path;
            return resolve(clip);
          });
        });
      };
      AudioManager.prototype.LoadMutliAudioClip = function(paths, progressCallback) {
        var self = this;
        var currScene = SceneMgr_1.default.Inst.GetCurrentSceneName();
        var arrUrls = [];
        var mapUrlName = {};
        for (var i = 0; i < paths.length; ++i) {
          arrUrls.push(paths[i].url);
          var sp = paths[i].url.split("/");
          mapUrlName[sp[sp.length - 1]] = paths[i];
        }
        return new Promise(function(resolve, reject) {
          cc.loader.loadResArray(arrUrls, cc.AudioClip, function(completedCount, totalCount, item) {
            progressCallback && progressCallback(completedCount, totalCount, item);
          }, function(err, clips) {
            if (currScene != SceneMgr_1.default.Inst.GetCurrentSceneName()) return;
            if (err) return reject(err);
            for (var i = 0; i < clips.length; ++i) self._mapAudioRes[mapUrlName[clips[i].name].key] = mapUrlName[clips[i].name].url;
            return resolve(clips);
          });
        });
      };
      AudioManager.prototype.GetAudioClip = function(clipName) {
        return cc.loader.getRes(this._mapAudioRes[clipName], cc.AudioClip);
      };
      AudioManager.prototype.SwitchVolume = function(type, state) {
        switch (type) {
         case AudioType.MUSIC:
          cc.audioEngine.setMusicVolume(state ? this._mapAudioVolumn[type].volumn : 0);
          break;

         case AudioType.EFFECT:
          cc.audioEngine.setEffectsVolume(state ? this._mapAudioVolumn[type].volumn : 0);
        }
        this._mapAudioVolumn[type].state = state;
      };
      AudioManager.prototype.ChangeVolume = function(type, value) {
        value > 1 ? value = 1 : value < 0 && (value = 0);
        this._mapAudioVolumn[type].volumn = value;
      };
      AudioManager.prototype.PlayMusic = function(clipName, isLoop, loadIfNotExist) {
        if (!this._mapAudioVolumn[AudioType.MUSIC].state) return;
        var self = this;
        var clip = this.GetAudioClip(clipName);
        !clip && loadIfNotExist ? AudioManager.Inst.LoadAudioClip(this._mapAudioRes[clipName], clipName).then(function(clipAsset) {
          self._mapAudioId[AudioType.MUSIC][clipName] = cc.audioEngine.playMusic(clipAsset, isLoop);
        }) : self._mapAudioId[AudioType.MUSIC][clipName] = cc.audioEngine.playMusic(clip, isLoop);
      };
      AudioManager.prototype.PlayEffect = function(clipName, isLoop, loadIfNotExist) {
        var _this = this;
        if (!this._mapAudioVolumn[AudioType.EFFECT].state) return;
        var clip = this.GetAudioClip(clipName);
        !clip && loadIfNotExist ? AudioManager.Inst.LoadAudioClip(this._mapAudioRes[clipName], clipName).then(function(clipAsset) {
          _this._mapAudioId[AudioType.EFFECT][clipName] = cc.audioEngine.playEffect(clipAsset, isLoop);
        }) : this._mapAudioId[AudioType.EFFECT][clipName] = cc.audioEngine.playEffect(clip, isLoop);
      };
      AudioManager.prototype.StopMusic = function() {
        cc.audioEngine.stopMusic();
      };
      AudioManager.prototype.StopEffect = function(clipName) {
        cc.audioEngine.stopEffect(this._mapAudioId[AudioType.EFFECT][clipName]);
        delete this._mapAudioId[AudioType.EFFECT][clipName];
      };
      AudioManager.prototype.PauseMusic = function() {
        cc.audioEngine.pauseMusic();
      };
      AudioManager.prototype.PauseEffect = function(clipName) {
        if (!this._mapAudioId[AudioType.EFFECT][clipName]) return;
        cc.audioEngine.pauseEffect(this._mapAudioId[AudioType.EFFECT][clipName]);
      };
      AudioManager.prototype.ResumeMusic = function() {
        cc.audioEngine.resumeMusic();
      };
      AudioManager.prototype.ResumeEffect = function(clipName) {
        if (!this._mapAudioId[AudioType.EFFECT][clipName]) return;
        cc.audioEngine.resumeEffect(this._mapAudioId[AudioType.EFFECT][clipName]);
      };
      AudioManager.prototype.PlayUrlEffect = function(link) {
        var self = this;
        if (!this._mapUrlEffect[link]) {
          var audio = document.createElement("audio");
          audio.src = link;
          this._mapUrlEffect[link] = audio;
        }
        this._mapUrlEffect[link].onerror = function() {
          delete self._mapUrlEffect[link];
        };
        this._mapUrlEffect[link].play();
      };
      AudioManager.prototype.RemoveUrlEffect = function(link) {
        if (!this._mapUrlEffect[link]) return;
        this._mapUrlEffect[link].remove();
        delete this._mapUrlEffect[link];
      };
      AudioManager.prototype.ClearAllUrlEffect = function() {
        for (var key in this._mapUrlEffect) this._mapUrlEffect[key].remove();
        this._mapUrlEffect = {};
      };
      AudioManager._inst = null;
      return AudioManager;
    }();
    exports.default = AudioManager;
    cc._RF.pop();
  }, {
    "./SceneMgr": "SceneMgr"
  } ],
  BehaviorTreeNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7df73ylmmNMJof46C/v55xY", "BehaviorTreeNode");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BTNodeAction = exports.BTNodeCondition = exports.BTNodeParallel = exports.BTNodeDecorator = exports.BTNodeRandom = exports.BTNodeSequence = exports.BTNodeSelector = exports.BehaviorTreeNode = exports.ExecuteResult = exports.BTNodeType = void 0;
    var Utils_1 = require("../Utils/Utils");
    var BTNodeType;
    (function(BTNodeType) {
      BTNodeType[BTNodeType["NONE"] = 0] = "NONE";
      BTNodeType[BTNodeType["SELECTOR"] = 1] = "SELECTOR";
      BTNodeType[BTNodeType["SEQUENCE"] = 2] = "SEQUENCE";
      BTNodeType[BTNodeType["DECORATOR"] = 3] = "DECORATOR";
      BTNodeType[BTNodeType["RANDOM"] = 4] = "RANDOM";
      BTNodeType[BTNodeType["PARALLEL"] = 5] = "PARALLEL";
      BTNodeType[BTNodeType["CONDITION"] = 6] = "CONDITION";
      BTNodeType[BTNodeType["ACTION"] = 7] = "ACTION";
    })(BTNodeType = exports.BTNodeType || (exports.BTNodeType = {}));
    var ExecuteResult;
    (function(ExecuteResult) {
      ExecuteResult[ExecuteResult["NONE"] = -1] = "NONE";
      ExecuteResult[ExecuteResult["FAIL"] = 0] = "FAIL";
      ExecuteResult[ExecuteResult["SUCCESS"] = 1] = "SUCCESS";
      ExecuteResult[ExecuteResult["RUNNING"] = 2] = "RUNNING";
    })(ExecuteResult = exports.ExecuteResult || (exports.ExecuteResult = {}));
    var BehaviorTreeNode = function() {
      function BehaviorTreeNode(nodeType) {
        this._nodeId = 0;
        this._level = 0;
        this._nodeIndex = 0;
        this._nodeType = BTNodeType.NONE;
        this._executeResult = ExecuteResult.NONE;
        this._owner = null;
        this._parent = null;
        this._level = 0;
        this._nodeType = nodeType, this._parent = null;
        this._owner = null;
      }
      Object.defineProperty(BehaviorTreeNode.prototype, "nodeIndex", {
        get: function() {
          return this._nodeIndex;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BehaviorTreeNode.prototype, "ownerSys", {
        get: function() {
          return this._owner;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BehaviorTreeNode.prototype, "ownerObj", {
        get: function() {
          return this._owner.ownerObj;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BehaviorTreeNode.prototype, "nodeId", {
        get: function() {
          return this._nodeId;
        },
        enumerable: false,
        configurable: true
      });
      BehaviorTreeNode.prototype.SetIndex = function(idx) {
        this._nodeIndex = idx;
      };
      BehaviorTreeNode.prototype.SetParent = function(parent) {
        this._parent = parent;
      };
      BehaviorTreeNode.prototype.SetLevel = function(level) {
        this._level = level;
      };
      BehaviorTreeNode.prototype.DebugLog = function() {
        console.log("Current node:{ id: " + this._nodeId + " , level: " + this._level + ", index: " + this._nodeIndex);
      };
      return BehaviorTreeNode;
    }();
    exports.BehaviorTreeNode = BehaviorTreeNode;
    var BTNodeComposite = function(_super) {
      __extends(BTNodeComposite, _super);
      function BTNodeComposite(nodeType) {
        var _this = _super.call(this, nodeType) || this;
        _this._arrTreeNode = null;
        _this._lastRunningNode = null;
        _this._arrTreeNode = [];
        _this._lastRunningNode = null;
        return _this;
      }
      BTNodeComposite.prototype.AddNode = function(node) {
        var idx = this._arrTreeNode.length;
        node.SetIndex(idx);
        node.SetParent(this);
        node.SetLevel(this._level + 1);
        this._arrTreeNode.push(node);
      };
      return BTNodeComposite;
    }(BehaviorTreeNode);
    var BehaviorTreeLeaf = function(_super) {
      __extends(BehaviorTreeLeaf, _super);
      function BehaviorTreeLeaf(nodeType) {
        return _super.call(this, nodeType) || this;
      }
      return BehaviorTreeLeaf;
    }(BehaviorTreeNode);
    var BTNodeSelector = function(_super) {
      __extends(BTNodeSelector, _super);
      function BTNodeSelector(owner) {
        var _this = _super.call(this, BTNodeType.SELECTOR) || this;
        _this._owner = owner;
        _this._nodeId = _this._owner.GenNodeId();
        return _this;
      }
      BTNodeSelector.prototype.Execute = function(dt) {
        var index = 0;
        null != this._lastRunningNode && (index = this._lastRunningNode.nodeIndex);
        this._lastRunningNode = null;
        var execResult = ExecuteResult.FAIL;
        for (var i = index; i < this._arrTreeNode.length; ++i) {
          var node = this._arrTreeNode[i];
          execResult = node.Execute(dt);
          if (execResult == ExecuteResult.FAIL) continue;
          if (execResult == ExecuteResult.SUCCESS) break;
          if (execResult == ExecuteResult.RUNNING) {
            this._lastRunningNode = node;
            break;
          }
        }
        return execResult;
      };
      return BTNodeSelector;
    }(BTNodeComposite);
    exports.BTNodeSelector = BTNodeSelector;
    var BTNodeSequence = function(_super) {
      __extends(BTNodeSequence, _super);
      function BTNodeSequence(owner) {
        var _this = _super.call(this, BTNodeType.SEQUENCE) || this;
        _this._owner = owner;
        _this._nodeId = _this._owner.GenNodeId();
        return _this;
      }
      BTNodeSequence.prototype.Execute = function(dt) {
        var index = 0;
        null != this._lastRunningNode && (index = this._lastRunningNode.nodeIndex);
        this._lastRunningNode = null;
        var execResult = ExecuteResult.FAIL;
        for (var i = index; i < this._arrTreeNode.length; ++i) {
          var node = this._arrTreeNode[i];
          execResult = node.Execute(dt);
          if (execResult == ExecuteResult.FAIL) break;
          if (execResult == ExecuteResult.SUCCESS) continue;
          if (execResult == ExecuteResult.RUNNING) {
            this._lastRunningNode = node;
            break;
          }
        }
        return execResult;
      };
      return BTNodeSequence;
    }(BTNodeComposite);
    exports.BTNodeSequence = BTNodeSequence;
    var BTNodeRandom = function(_super) {
      __extends(BTNodeRandom, _super);
      function BTNodeRandom(owner) {
        var _this = _super.call(this, BTNodeType.RANDOM) || this;
        _this._owner = owner;
        _this._nodeId = _this._owner.GenNodeId();
        return _this;
      }
      BTNodeRandom.prototype.Execute = function(dt) {
        var index = -1;
        null != this._lastRunningNode && (index = this._lastRunningNode.nodeIndex);
        this._lastRunningNode = null;
        var arrRandom = [];
        for (var i = 0; i < this._arrTreeNode.length; ++i) {
          if (this._arrTreeNode[i].nodeIndex == index) continue;
          arrRandom.push(this._arrTreeNode[i].nodeIndex);
        }
        Utils_1.default.RandomArraySort(arrRandom);
        var execResult = ExecuteResult.FAIL;
        while (arrRandom.length > 0) {
          index < 0 && (index = arrRandom.pop());
          var node = this._arrTreeNode[index];
          index = -1;
          execResult = node.Execute(dt);
          if (execResult == ExecuteResult.FAIL) continue;
          if (execResult == ExecuteResult.SUCCESS) break;
          if (execResult == ExecuteResult.RUNNING) {
            this._lastRunningNode = node;
            break;
          }
        }
        return execResult;
      };
      return BTNodeRandom;
    }(BTNodeComposite);
    exports.BTNodeRandom = BTNodeRandom;
    var BTNodeDecorator = function(_super) {
      __extends(BTNodeDecorator, _super);
      function BTNodeDecorator(owner) {
        var _this = _super.call(this, BTNodeType.DECORATOR) || this;
        _this._untilExecResult = ExecuteResult.FAIL;
        _this._owner = owner;
        _this._nodeId = _this._owner.GenNodeId();
        return _this;
      }
      BTNodeDecorator.prototype.Execute = function(dt) {
        var node = this._arrTreeNode[0];
        var execResult = node.Execute(dt);
        if (execResult != this._untilExecResult) return ExecuteResult.RUNNING;
        return execResult;
      };
      BTNodeDecorator.prototype.SetUntilExecuteResul = function(targetResult) {
        this._untilExecResult = targetResult;
      };
      return BTNodeDecorator;
    }(BTNodeComposite);
    exports.BTNodeDecorator = BTNodeDecorator;
    var BTNodeParallel = function(_super) {
      __extends(BTNodeParallel, _super);
      function BTNodeParallel(owner) {
        var _this = _super.call(this, BTNodeType.PARALLEL) || this;
        _this._owner = owner;
        _this._nodeId = _this._owner.GenNodeId();
        return _this;
      }
      BTNodeParallel.prototype.Execute = function(dt) {
        var execResult = ExecuteResult.FAIL;
        var successCount = 0;
        for (var i = 0; i < this._arrTreeNode.length; ++i) {
          var node = this._arrTreeNode[i];
          execResult = node.Execute(dt);
          if (execResult == ExecuteResult.FAIL) break;
          if (execResult == ExecuteResult.SUCCESS) {
            ++successCount;
            continue;
          }
          if (execResult == ExecuteResult.RUNNING) continue;
        }
        execResult != ExecuteResult.FAIL && (execResult = successCount >= this._arrTreeNode.length ? ExecuteResult.SUCCESS : ExecuteResult.RUNNING);
        return execResult;
      };
      return BTNodeParallel;
    }(BTNodeComposite);
    exports.BTNodeParallel = BTNodeParallel;
    var BTNodeCondition = function(_super) {
      __extends(BTNodeCondition, _super);
      function BTNodeCondition(owner) {
        var _this = _super.call(this, BTNodeType.CONDITION) || this;
        _this._owner = owner;
        _this._nodeId = _this._owner.GenNodeId();
        return _this;
      }
      return BTNodeCondition;
    }(BehaviorTreeLeaf);
    exports.BTNodeCondition = BTNodeCondition;
    var BTNodeAction = function(_super) {
      __extends(BTNodeAction, _super);
      function BTNodeAction(owner) {
        var _this = _super.call(this, BTNodeType.ACTION) || this;
        _this._owner = owner;
        _this._nodeId = _this._owner.GenNodeId();
        return _this;
      }
      return BTNodeAction;
    }(BehaviorTreeLeaf);
    exports.BTNodeAction = BTNodeAction;
    cc._RF.pop();
  }, {
    "../Utils/Utils": "Utils"
  } ],
  BehaviorTreeSystem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5cbc0GksJFG0JvcyUbHX+OM", "BehaviorTreeSystem");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BehaviorTreeState = void 0;
    var BehaviorTreeState;
    (function(BehaviorTreeState) {
      BehaviorTreeState[BehaviorTreeState["NONE"] = 0] = "NONE";
      BehaviorTreeState[BehaviorTreeState["RUNNING"] = 1] = "RUNNING";
    })(BehaviorTreeState = exports.BehaviorTreeState || (exports.BehaviorTreeState = {}));
    var BehaviorTreeSystem = function() {
      function BehaviorTreeSystem(owner) {
        this._ownerObj = null;
        this._btState = BehaviorTreeState.NONE;
        this._root = null;
        this._nodeId = 0;
        this._ownerObj = owner;
        this._nodeId = 0;
        this._OnInitTree();
      }
      BehaviorTreeSystem.prototype.GenNodeId = function() {
        return ++this._nodeId;
      };
      Object.defineProperty(BehaviorTreeSystem.prototype, "ownerObj", {
        get: function() {
          return this._ownerObj;
        },
        enumerable: false,
        configurable: true
      });
      BehaviorTreeSystem.prototype.OnStartUpSystem = function() {
        this._btState = BehaviorTreeState.RUNNING;
      };
      BehaviorTreeSystem.prototype.PauseSystem = function() {
        this._btState = BehaviorTreeState.NONE;
      };
      BehaviorTreeSystem.prototype.OnUpdateSystem = function(dt) {
        if (!this._root || this._btState == BehaviorTreeState.NONE) return;
        this._root.Execute(dt);
      };
      return BehaviorTreeSystem;
    }();
    exports.default = BehaviorTreeSystem;
    cc._RF.pop();
  }, {} ],
  BgAdapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "144f30WUBpAVKXSG+oEclHi", "BgAdapter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BgAdapter = function(_super) {
      __extends(BgAdapter, _super);
      function BgAdapter() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      BgAdapter.prototype.onLoad = function() {
        var srcScaleForShowAll = Math.min(cc.view.getCanvasSize().width / this.node.width, cc.view.getCanvasSize().height / this.node.height);
        var realWidth = this.node.width * srcScaleForShowAll;
        var realHeight = this.node.height * srcScaleForShowAll;
        this.node.scale = Math.max(cc.view.getCanvasSize().width / realWidth, cc.view.getCanvasSize().height / realHeight);
      };
      BgAdapter = __decorate([ ccclass ], BgAdapter);
      return BgAdapter;
    }(cc.Component);
    exports.default = BgAdapter;
    cc._RF.pop();
  }, {} ],
  ButtonEx: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ad4cOKgcNPvpCjyBBJJrq1", "ButtonEx");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TriggerWay = exports.Button_Ex = void 0;
    exports.Button_Ex = "buttonEx";
    var TriggerWay;
    (function(TriggerWay) {
      TriggerWay[TriggerWay["Immediately"] = 1] = "Immediately";
      TriggerWay[TriggerWay["AfterLoosing"] = 2] = "AfterLoosing";
    })(TriggerWay = exports.TriggerWay || (exports.TriggerWay = {}));
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ButtonEx = function(_super) {
      __extends(ButtonEx, _super);
      function ButtonEx() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.trggerTime = 2;
        _this.trggerWay = TriggerWay.Immediately;
        _this.longPressEvents = [];
        _this.hasAccomplished = false;
        return _this;
      }
      ButtonEx.prototype.onEnable = function() {
        this.registerNodeEvent();
      };
      ButtonEx.prototype.onDisable = function() {
        this.unregisterNodeEvent();
      };
      ButtonEx.prototype.registerNodeEvent = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
      };
      ButtonEx.prototype.unregisterNodeEvent = function() {
        this.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
      };
      ButtonEx.prototype.onTouchStart = function() {
        this.hasAccomplished = false;
        this.scheduleOnce(this.onPressAccomplished.bind(this), this.trggerTime);
      };
      ButtonEx.prototype.onTouchEnd = function() {
        if (this.hasAccomplished) {
          this.hasAccomplished = false;
          this.trigger();
        }
        this.unscheduleAllCallbacks();
      };
      ButtonEx.prototype.onTouchCancel = function() {
        if (this.hasAccomplished) {
          this.hasAccomplished = false;
          this.trigger();
        }
        this.unscheduleAllCallbacks();
      };
      ButtonEx.prototype.onPressAccomplished = function() {
        this.trggerWay === TriggerWay.Immediately ? this.trigger() : this.trggerWay === TriggerWay.AfterLoosing && (this.hasAccomplished = true);
      };
      ButtonEx.prototype.trigger = function() {
        cc.Component.EventHandler.emitEvents(this.longPressEvents, this);
        this.node.emit(exports.Button_Ex, this);
      };
      __decorate([ property({
        tooltip: false
      }) ], ButtonEx.prototype, "trggerTime", void 0);
      __decorate([ property({
        type: cc.Enum(TriggerWay),
        tooltip: false
      }) ], ButtonEx.prototype, "trggerWay", void 0);
      __decorate([ property({
        type: cc.Component.EventHandler,
        tooltip: false
      }) ], ButtonEx.prototype, "longPressEvents", void 0);
      ButtonEx = __decorate([ ccclass ], ButtonEx);
      return ButtonEx;
    }(cc.Component);
    exports.default = ButtonEx;
    cc._RF.pop();
  }, {} ],
  1: [ function(require, module, exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len = b64.length;
      if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
      var validLen = b64.indexOf("=");
      -1 === validLen && (validLen = len);
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [ validLen, placeHoldersLen ];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;
      for (i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      if (2 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = 255 & tmp;
      }
      if (1 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[63 & num];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (255 & uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      if (1 === extraBytes) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
      } else if (2 === extraBytes) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
      }
      return parts.join("");
    }
  }, {} ],
  2: [ function(require, module, exports) {
    (function(global) {
      "use strict";
      var base64 = require("base64-js");
      var ieee754 = require("ieee754");
      var isArray = require("isarray");
      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      Buffer.TYPED_ARRAY_SUPPORT = void 0 !== global.TYPED_ARRAY_SUPPORT ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
      exports.kMaxLength = kMaxLength();
      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function() {
              return 42;
            }
          };
          return 42 === arr.foo() && "function" === typeof arr.subarray && 0 === arr.subarray(1, 1).byteLength;
        } catch (e) {
          return false;
        }
      }
      function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }
      function createBuffer(that, length) {
        if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = new Uint8Array(length);
          that.__proto__ = Buffer.prototype;
        } else {
          null === that && (that = new Buffer(length));
          that.length = length;
        }
        return that;
      }
      function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
        if ("number" === typeof arg) {
          if ("string" === typeof encodingOrOffset) throw new Error("If encoding is specified then the first argument must be a string");
          return allocUnsafe(this, arg);
        }
        return from(this, arg, encodingOrOffset, length);
      }
      Buffer.poolSize = 8192;
      Buffer._augment = function(arr) {
        arr.__proto__ = Buffer.prototype;
        return arr;
      };
      function from(that, value, encodingOrOffset, length) {
        if ("number" === typeof value) throw new TypeError('"value" argument must not be a number');
        if ("undefined" !== typeof ArrayBuffer && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
        if ("string" === typeof value) return fromString(that, value, encodingOrOffset);
        return fromObject(that, value);
      }
      Buffer.from = function(value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;
        "undefined" !== typeof Symbol && Symbol.species && Buffer[Symbol.species] === Buffer && Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true
        });
      }
      function assertSize(size) {
        if ("number" !== typeof size) throw new TypeError('"size" argument must be a number');
        if (size < 0) throw new RangeError('"size" argument must not be negative');
      }
      function alloc(that, size, fill, encoding) {
        assertSize(size);
        if (size <= 0) return createBuffer(that, size);
        if (void 0 !== fill) return "string" === typeof encoding ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
        return createBuffer(that, size);
      }
      Buffer.alloc = function(size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };
      function allocUnsafe(that, size) {
        assertSize(size);
        that = createBuffer(that, size < 0 ? 0 : 0 | checked(size));
        if (!Buffer.TYPED_ARRAY_SUPPORT) for (var i = 0; i < size; ++i) that[i] = 0;
        return that;
      }
      Buffer.allocUnsafe = function(size) {
        return allocUnsafe(null, size);
      };
      Buffer.allocUnsafeSlow = function(size) {
        return allocUnsafe(null, size);
      };
      function fromString(that, string, encoding) {
        "string" === typeof encoding && "" !== encoding || (encoding = "utf8");
        if (!Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
        var length = 0 | byteLength(string, encoding);
        that = createBuffer(that, length);
        var actual = that.write(string, encoding);
        actual !== length && (that = that.slice(0, actual));
        return that;
      }
      function fromArrayLike(that, array) {
        var length = array.length < 0 ? 0 : 0 | checked(array.length);
        that = createBuffer(that, length);
        for (var i = 0; i < length; i += 1) that[i] = 255 & array[i];
        return that;
      }
      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength;
        if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
        if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
        array = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = array;
          that.__proto__ = Buffer.prototype;
        } else that = fromArrayLike(that, array);
        return that;
      }
      function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = 0 | checked(obj.length);
          that = createBuffer(that, len);
          if (0 === that.length) return that;
          obj.copy(that, 0, 0, len);
          return that;
        }
        if (obj) {
          if ("undefined" !== typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if ("number" !== typeof obj.length || isnan(obj.length)) return createBuffer(that, 0);
            return fromArrayLike(that, obj);
          }
          if ("Buffer" === obj.type && isArray(obj.data)) return fromArrayLike(that, obj.data);
        }
        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
      }
      function checked(length) {
        if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
        return 0 | length;
      }
      function SlowBuffer(length) {
        +length != length && (length = 0);
        return Buffer.alloc(+length);
      }
      Buffer.isBuffer = function isBuffer(b) {
        return !!(null != b && b._isBuffer);
      };
      Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
         case "hex":
         case "utf8":
         case "utf-8":
         case "ascii":
         case "latin1":
         case "binary":
         case "base64":
         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return true;

         default:
          return false;
        }
      };
      Buffer.concat = function concat(list, length) {
        if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === list.length) return Buffer.alloc(0);
        var i;
        if (void 0 === length) {
          length = 0;
          for (i = 0; i < list.length; ++i) length += list[i].length;
        }
        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) return string.length;
        if ("undefined" !== typeof ArrayBuffer && "function" === typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
        "string" !== typeof string && (string = "" + string);
        var len = string.length;
        if (0 === len) return 0;
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "ascii":
         case "latin1":
         case "binary":
          return len;

         case "utf8":
         case "utf-8":
         case void 0:
          return utf8ToBytes(string).length;

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return 2 * len;

         case "hex":
          return len >>> 1;

         case "base64":
          return base64ToBytes(string).length;

         default:
          if (loweredCase) return utf8ToBytes(string).length;
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        var loweredCase = false;
        (void 0 === start || start < 0) && (start = 0);
        if (start > this.length) return "";
        (void 0 === end || end > this.length) && (end = this.length);
        if (end <= 0) return "";
        end >>>= 0;
        start >>>= 0;
        if (end <= start) return "";
        encoding || (encoding = "utf8");
        while (true) switch (encoding) {
         case "hex":
          return hexSlice(this, start, end);

         case "utf8":
         case "utf-8":
          return utf8Slice(this, start, end);

         case "ascii":
          return asciiSlice(this, start, end);

         case "latin1":
         case "binary":
          return latin1Slice(this, start, end);

         case "base64":
          return base64Slice(this, start, end);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return utf16leSlice(this, start, end);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.prototype._isBuffer = true;
      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (var i = 0; i < len; i += 2) swap(this, i, i + 1);
        return this;
      };
      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer.prototype.toString = function toString() {
        var length = 0 | this.length;
        if (0 === length) return "";
        if (0 === arguments.length) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return 0 === Buffer.compare(this, b);
      };
      Buffer.prototype.inspect = function inspect() {
        var str = "";
        var max = exports.INSPECT_MAX_BYTES;
        if (this.length > 0) {
          str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
          this.length > max && (str += " ... ");
        }
        return "<Buffer " + str + ">";
      };
      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) throw new TypeError("Argument must be a Buffer");
        void 0 === start && (start = 0);
        void 0 === end && (end = target ? target.length : 0);
        void 0 === thisStart && (thisStart = 0);
        void 0 === thisEnd && (thisEnd = this.length);
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
        if (thisStart >= thisEnd && start >= end) return 0;
        if (thisStart >= thisEnd) return -1;
        if (start >= end) return 1;
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (0 === buffer.length) return -1;
        if ("string" === typeof byteOffset) {
          encoding = byteOffset;
          byteOffset = 0;
        } else byteOffset > 2147483647 ? byteOffset = 2147483647 : byteOffset < -2147483648 && (byteOffset = -2147483648);
        byteOffset = +byteOffset;
        isNaN(byteOffset) && (byteOffset = dir ? 0 : buffer.length - 1);
        byteOffset < 0 && (byteOffset = buffer.length + byteOffset);
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (!dir) return -1;
          byteOffset = 0;
        }
        "string" === typeof val && (val = Buffer.from(val, encoding));
        if (Buffer.isBuffer(val)) {
          if (0 === val.length) return -1;
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        }
        if ("number" === typeof val) {
          val &= 255;
          if (Buffer.TYPED_ARRAY_SUPPORT && "function" === typeof Uint8Array.prototype.indexOf) return dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (void 0 !== encoding) {
          encoding = String(encoding).toLowerCase();
          if ("ucs2" === encoding || "ucs-2" === encoding || "utf16le" === encoding || "utf-16le" === encoding) {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i) {
          return 1 === indexSize ? buf[i] : buf.readUInt16BE(i * indexSize);
        }
        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
            -1 === foundIndex && (foundIndex = i);
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            -1 !== foundIndex && (i -= i - foundIndex);
            foundIndex = -1;
          }
        } else {
          byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength);
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return -1 !== this.indexOf(val, byteOffset, encoding);
      };
      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (length) {
          length = Number(length);
          length > remaining && (length = remaining);
        } else length = remaining;
        var strLen = string.length;
        if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
        length > strLen / 2 && (length = strLen / 2);
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(2 * i, 2), 16);
          if (isNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer.prototype.write = function write(string, offset, length, encoding) {
        if (void 0 === offset) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (void 0 === length && "string" === typeof offset) {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else {
          if (!isFinite(offset)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          offset |= 0;
          if (isFinite(length)) {
            length |= 0;
            void 0 === encoding && (encoding = "utf8");
          } else {
            encoding = length;
            length = void 0;
          }
        }
        var remaining = this.length - offset;
        (void 0 === length || length > remaining) && (length = remaining);
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        encoding || (encoding = "utf8");
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "hex":
          return hexWrite(this, string, offset, length);

         case "utf8":
         case "utf-8":
          return utf8Write(this, string, offset, length);

         case "ascii":
          return asciiWrite(this, string, offset, length);

         case "latin1":
         case "binary":
          return latin1Write(this, string, offset, length);

         case "base64":
          return base64Write(this, string, offset, length);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return ucs2Write(this, string, offset, length);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      };
      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        return 0 === start && end === buf.length ? base64.fromByteArray(buf) : base64.fromByteArray(buf.slice(start, end));
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
             case 1:
              firstByte < 128 && (codePoint = firstByte);
              break;

             case 2:
              secondByte = buf[i + 1];
              if (128 === (192 & secondByte)) {
                tempCodePoint = (31 & firstByte) << 6 | 63 & secondByte;
                tempCodePoint > 127 && (codePoint = tempCodePoint);
              }
              break;

             case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte)) {
                tempCodePoint = (15 & firstByte) << 12 | (63 & secondByte) << 6 | 63 & thirdByte;
                tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343) && (codePoint = tempCodePoint);
              }
              break;

             case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte) && 128 === (192 & fourthByte)) {
                tempCodePoint = (15 & firstByte) << 18 | (63 & secondByte) << 12 | (63 & thirdByte) << 6 | 63 & fourthByte;
                tempCodePoint > 65535 && tempCodePoint < 1114112 && (codePoint = tempCodePoint);
              }
            }
          }
          if (null === codePoint) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | 1023 & codePoint;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
        var res = "";
        var i = 0;
        while (i < len) res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        return res;
      }
      function asciiSlice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(127 & buf[i]);
        return ret;
      }
      function latin1Slice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(buf[i]);
        return ret;
      }
      function hexSlice(buf, start, end) {
        var len = buf.length;
        (!start || start < 0) && (start = 0);
        (!end || end < 0 || end > len) && (end = len);
        var out = "";
        for (var i = start; i < end; ++i) out += toHex(buf[i]);
        return out;
      }
      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = "";
        for (var i = 0; i < bytes.length; i += 2) res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
        return res;
      }
      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = void 0 === end ? len : ~~end;
        if (start < 0) {
          start += len;
          start < 0 && (start = 0);
        } else start > len && (start = len);
        if (end < 0) {
          end += len;
          end < 0 && (end = 0);
        } else end > len && (end = len);
        end < start && (end = start);
        var newBuf;
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer(sliceLen, void 0);
          for (var i = 0; i < sliceLen; ++i) newBuf[i] = this[i + start];
        }
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
        if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        return val;
      };
      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset + --byteLength];
        var mul = 1;
        while (byteLength > 0 && (mul *= 256)) val += this[offset + --byteLength] * mul;
        return val;
      };
      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 16777216 * this[offset + 3];
      };
      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return 16777216 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) val += this[offset + --i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        if (!(128 & this[offset])) return this[offset];
        return -1 * (255 - this[offset] + 1);
      };
      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
      }
      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 255, 0);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        this[offset] = 255 & value;
        return offset + 1;
      };
      function objectWriteUInt16(buf, value, offset, littleEndian) {
        value < 0 && (value = 65535 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> 8 * (littleEndian ? i : 1 - i);
      }
      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      function objectWriteUInt32(buf, value, offset, littleEndian) {
        value < 0 && (value = 4294967295 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) buf[offset + i] = value >>> 8 * (littleEndian ? i : 3 - i) & 255;
      }
      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = 255 & value;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i - 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i + 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 127, -128);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        value < 0 && (value = 255 + value + 1);
        this[offset] = 255 & value;
        return offset + 1;
      };
      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        value < 0 && (value = 4294967295 + value + 1);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
        if (offset < 0) throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        start || (start = 0);
        end || 0 === end || (end = this.length);
        targetStart >= target.length && (targetStart = target.length);
        targetStart || (targetStart = 0);
        end > 0 && end < start && (end = start);
        if (end === start) return 0;
        if (0 === target.length || 0 === this.length) return 0;
        if (targetStart < 0) throw new RangeError("targetStart out of bounds");
        if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        end > this.length && (end = this.length);
        target.length - targetStart < end - start && (end = target.length - targetStart + start);
        var len = end - start;
        var i;
        if (this === target && start < targetStart && targetStart < end) for (i = len - 1; i >= 0; --i) target[i + targetStart] = this[i + start]; else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) for (i = 0; i < len; ++i) target[i + targetStart] = this[i + start]; else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
        return len;
      };
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        if ("string" === typeof val) {
          if ("string" === typeof start) {
            encoding = start;
            start = 0;
            end = this.length;
          } else if ("string" === typeof end) {
            encoding = end;
            end = this.length;
          }
          if (1 === val.length) {
            var code = val.charCodeAt(0);
            code < 256 && (val = code);
          }
          if (void 0 !== encoding && "string" !== typeof encoding) throw new TypeError("encoding must be a string");
          if ("string" === typeof encoding && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        } else "number" === typeof val && (val &= 255);
        if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
        if (end <= start) return this;
        start >>>= 0;
        end = void 0 === end ? this.length : end >>> 0;
        val || (val = 0);
        var i;
        if ("number" === typeof val) for (i = start; i < end; ++i) this[i] = val; else {
          var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) this[i + start] = bytes[i % len];
        }
        return this;
      };
      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = stringtrim(str).replace(INVALID_BASE64_RE, "");
        if (str.length < 2) return "";
        while (str.length % 4 !== 0) str += "=";
        return str;
      }
      function stringtrim(str) {
        if (str.trim) return str.trim();
        return str.replace(/^\s+|\s+$/g, "");
      }
      function toHex(n) {
        if (n < 16) return "0" + n.toString(16);
        return n.toString(16);
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              if (i + 1 === length) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              (units -= 3) > -1 && bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = 65536 + (leadSurrogate - 55296 << 10 | codePoint - 56320);
          } else leadSurrogate && (units -= 3) > -1 && bytes.push(239, 191, 189);
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, 63 & codePoint | 128);
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          } else {
            if (!(codePoint < 1114112)) throw new Error("Invalid code point");
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) byteArray.push(255 & str.charCodeAt(i));
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isnan(val) {
        return val !== val;
      }
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "base64-js": 1,
    ieee754: 4,
    isarray: 3
  } ],
  3: [ function(require, module, exports) {
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return "[object Array]" == toString.call(arr);
    };
  }, {} ],
  4: [ function(require, module, exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (;nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8) ;
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (;nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8) ;
      if (0 === e) e = 1 - eBias; else {
        if (e === eMax) return m ? NaN : Infinity * (s ? -1 : 1);
        m += Math.pow(2, mLen);
        e -= eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = 23 === mLen ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || Infinity === value) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        value += e + eBias >= 1 ? rt / c : rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e += eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (;mLen >= 8; buffer[offset + i] = 255 & m, i += d, m /= 256, mLen -= 8) ;
      e = e << mLen | m;
      eLen += mLen;
      for (;eLen > 0; buffer[offset + i] = 255 & e, i += d, e /= 256, eLen -= 8) ;
      buffer[offset + i - d] |= 128 * s;
    };
  }, {} ],
  ContentAdapter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "747c9X0OoFLOqCVq4mAcwK6", "ContentAdapter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ContentAdapter = function(_super) {
      __extends(ContentAdapter, _super);
      function ContentAdapter() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ContentAdapter.prototype.onLoad = function() {
        var ws = cc.view.getCanvasSize().width / this.node.width;
        var hs = cc.view.getCanvasSize().height / this.node.height;
        var minScale = Math.min(ws, hs);
        var realWidth = this.node.width * minScale;
        var realHeight = this.node.height * minScale;
        this.node.width = this.node.width * (cc.view.getCanvasSize().width / realWidth);
        this.node.height = this.node.height * (cc.view.getCanvasSize().height / realHeight);
        this._updateAllChildNodeWidget(this.node);
      };
      ContentAdapter.prototype._updateAllChildNodeWidget = function(parentNode) {
        var _this = this;
        if (null == parentNode) return;
        var widget = parentNode.getComponent(cc.Widget);
        null != widget && widget.updateAlignment();
        if (0 == parentNode.childrenCount) return;
        parentNode.children.forEach(function(childNode) {
          _this._updateAllChildNodeWidget(childNode);
        });
      };
      ContentAdapter = __decorate([ ccclass ], ContentAdapter);
      return ContentAdapter;
    }(cc.Component);
    exports.default = ContentAdapter;
    cc._RF.pop();
  }, {} ],
  DataHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "66fe5csOOBNp75fVXYpzc1u", "DataHelper");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DataHelper = function(_super) {
      __extends(DataHelper, _super);
      function DataHelper() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      DataHelper.prototype.start = function() {};
      DataHelper = __decorate([ ccclass ], DataHelper);
      return DataHelper;
    }(cc.Component);
    exports.default = DataHelper;
    cc._RF.pop();
  }, {} ],
  DataMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "441e6WdjStGjoO6vDl3NHNY", "DataMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataMgr = function() {
      function DataMgr() {
        this._mapData = new Map();
      }
      Object.defineProperty(DataMgr, "Inst", {
        get: function() {
          null == DataMgr._inst && (DataMgr._inst = new DataMgr());
          return DataMgr._inst;
        },
        enumerable: false,
        configurable: true
      });
      DataMgr.prototype.SetData = function(key, data) {
        this._mapData.set(key, data);
        return data;
      };
      DataMgr.prototype.GetData = function(key) {
        var data = null;
        key && this._mapData.has(key) && (data = this._mapData.get(key));
        return data;
      };
      DataMgr.prototype.ClearDataByType = function(key) {
        if (key && this._mapData.has(key)) {
          var data = this._mapData.get(key);
          data && data.ClearModuleData();
          this._mapData.delete(key);
        }
      };
      DataMgr.prototype.ClearData = function() {
        this._mapData.clear();
        this._mapData = null;
      };
      DataMgr._inst = null;
      return DataMgr;
    }();
    exports.default = DataMgr;
    cc._RF.pop();
  }, {} ],
  EventID: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f180pG5oZACr/271HVbq11", "EventID");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NetSendMsgEnum = exports.UIMsg = exports.NetMsg = exports.LocMsg = void 0;
    var LocMsg;
    (function(LocMsg) {
      LocMsg[LocMsg["SAUTH_RESULT"] = 10001] = "SAUTH_RESULT";
      LocMsg[LocMsg["GAME_LOGIN"] = 10002] = "GAME_LOGIN";
      LocMsg[LocMsg["GET_GAME_LOGIN"] = 10003] = "GET_GAME_LOGIN";
      LocMsg[LocMsg["GET_GAME_DATA"] = 10004] = "GET_GAME_DATA";
      LocMsg[LocMsg["INIT_PROP_DATA"] = 10005] = "INIT_PROP_DATA";
      LocMsg[LocMsg["REC_CREAT_PET"] = 10006] = "REC_CREAT_PET";
      LocMsg[LocMsg["CHANGE_SENCE_TO_LOAD_VISITOR"] = 10007] = "CHANGE_SENCE_TO_LOAD_VISITOR";
      LocMsg[LocMsg["REC_FEED_PET"] = 10008] = "REC_FEED_PET";
      LocMsg[LocMsg["SEND_FEED_PET"] = 10009] = "SEND_FEED_PET";
      LocMsg[LocMsg["REC_UPDATE_PROP"] = 10010] = "REC_UPDATE_PROP";
      LocMsg[LocMsg["UPDATE_PET_CUT_DOWN_TIME"] = 10011] = "UPDATE_PET_CUT_DOWN_TIME";
      LocMsg[LocMsg["UPDATE_FRUIT_TREE_TIME"] = 10012] = "UPDATE_FRUIT_TREE_TIME";
      LocMsg[LocMsg["REC_COLLECT_FRUIT"] = 10013] = "REC_COLLECT_FRUIT";
      LocMsg[LocMsg["ADD_PET_BUBBLE"] = 10014] = "ADD_PET_BUBBLE";
      LocMsg[LocMsg["INIT_SHOP_DATA"] = 10015] = "INIT_SHOP_DATA";
      LocMsg[LocMsg["OPEN_PROP_FOOD_PAGE"] = 10016] = "OPEN_PROP_FOOD_PAGE";
      LocMsg[LocMsg["OPEN_PROP_DRESS_PAGE"] = 10017] = "OPEN_PROP_DRESS_PAGE";
      LocMsg[LocMsg["PET_TO_LEAVE"] = 10018] = "PET_TO_LEAVE";
      LocMsg[LocMsg["DELETE_VISIT_PET"] = 10019] = "DELETE_VISIT_PET";
      LocMsg[LocMsg["ACTION_PAGE_SHOW"] = 10020] = "ACTION_PAGE_SHOW";
      LocMsg[LocMsg["ACTION_PAGE_HIDE"] = 10021] = "ACTION_PAGE_HIDE";
      LocMsg[LocMsg["FLY_COIN"] = 10022] = "FLY_COIN";
      LocMsg[LocMsg["REC_UPDATE_DRESS_UP"] = 10023] = "REC_UPDATE_DRESS_UP";
      LocMsg[LocMsg["REC_UPDATA_DYNAMIC_DATA"] = 10024] = "REC_UPDATA_DYNAMIC_DATA";
      LocMsg[LocMsg["REC_UPDATA_CAROUSELINFO_DATA"] = 10025] = "REC_UPDATA_CAROUSELINFO_DATA";
      LocMsg[LocMsg["EPET_FIRST_LOGIN"] = 10026] = "EPET_FIRST_LOGIN";
      LocMsg[LocMsg["RES_UPDATE_SOUL_COIN"] = 10027] = "RES_UPDATE_SOUL_COIN";
      LocMsg[LocMsg["RES_SHOP_MALL_PURCHASE"] = 10028] = "RES_SHOP_MALL_PURCHASE";
      LocMsg[LocMsg["REC_FINGER_HEART"] = 10029] = "REC_FINGER_HEART";
      LocMsg[LocMsg["REC_HEART_BEAT"] = 10030] = "REC_HEART_BEAT";
      LocMsg[LocMsg["CLOSE_FRUIT_SHOW"] = 10031] = "CLOSE_FRUIT_SHOW";
      LocMsg[LocMsg["RES_LEVELUP"] = 10032] = "RES_LEVELUP";
      LocMsg[LocMsg["RES_SKILLMODIFY"] = 10033] = "RES_SKILLMODIFY";
      LocMsg[LocMsg["REGET_GAME_DATA"] = 10034] = "REGET_GAME_DATA";
      LocMsg[LocMsg["RES_BIZREDPOINT"] = 10035] = "RES_BIZREDPOINT";
      LocMsg[LocMsg["RES_BIZREDPOINTMODIFY"] = 10036] = "RES_BIZREDPOINTMODIFY";
      LocMsg[LocMsg["RES_ADD_PET_BUBBLE"] = 10037] = "RES_ADD_PET_BUBBLE";
      LocMsg[LocMsg["RES_DELETE_PET_BUBBLE"] = 10038] = "RES_DELETE_PET_BUBBLE";
      LocMsg[LocMsg["FEED_PET"] = 10039] = "FEED_PET";
      LocMsg[LocMsg["REC_PRICK_BUBBLE"] = 10040] = "REC_PRICK_BUBBLE";
      LocMsg[LocMsg["REC_UPDATE_BUBBLE"] = 10041] = "REC_UPDATE_BUBBLE";
      LocMsg[LocMsg["SEND_PRICK_BUBBLE"] = 10042] = "SEND_PRICK_BUBBLE";
      LocMsg[LocMsg["REC_Rename"] = 10043] = "REC_Rename";
      LocMsg[LocMsg["PLANET_DRESS_OBJECT"] = 10044] = "PLANET_DRESS_OBJECT";
      LocMsg[LocMsg["UNINSTALL_PLANET_DRESS"] = 10045] = "UNINSTALL_PLANET_DRESS";
      LocMsg[LocMsg["RES_FURNITUREREPLACE"] = 10046] = "RES_FURNITUREREPLACE";
      LocMsg[LocMsg["REFRESH_FRUITTREE"] = 10047] = "REFRESH_FRUITTREE";
      LocMsg[LocMsg["SEND_CREAT_PET"] = 10048] = "SEND_CREAT_PET";
      LocMsg[LocMsg["DELETE_BUBBLE_BY_TIMEOUT"] = 10049] = "DELETE_BUBBLE_BY_TIMEOUT";
      LocMsg[LocMsg["RES_UPDATE_FRIEND_DATA"] = 10050] = "RES_UPDATE_FRIEND_DATA";
      LocMsg[LocMsg["SEND_REQ_FRIEND_DATA"] = 10051] = "SEND_REQ_FRIEND_DATA";
      LocMsg[LocMsg["RES_REMOVE_BIZ_REDPOINT"] = 10052] = "RES_REMOVE_BIZ_REDPOINT";
      LocMsg[LocMsg["SEND_REQ_BIZREDPOINT"] = 10053] = "SEND_REQ_BIZREDPOINT";
      LocMsg[LocMsg["SEND_REMOVE_BIZREDPOINT"] = 10054] = "SEND_REMOVE_BIZREDPOINT";
      LocMsg[LocMsg["SEND_REQ_DYNAMIC_DATA"] = 10055] = "SEND_REQ_DYNAMIC_DATA";
      LocMsg[LocMsg["SEND_REQ_FINGER_HEART"] = 10056] = "SEND_REQ_FINGER_HEART";
      LocMsg[LocMsg["RESP_GETFRUITTREE"] = 10057] = "RESP_GETFRUITTREE";
      LocMsg[LocMsg["PUSH_STEALFRUIT"] = 10058] = "PUSH_STEALFRUIT";
      LocMsg[LocMsg["UPDATE_STEAL_TIME"] = 10059] = "UPDATE_STEAL_TIME";
      LocMsg[LocMsg["SEND_REQ_DIRT"] = 10060] = "SEND_REQ_DIRT";
      LocMsg[LocMsg["RESP_SENDDIRT"] = 10061] = "RESP_SENDDIRT";
      LocMsg[LocMsg["PICK_FRUIT_FINISH"] = 10062] = "PICK_FRUIT_FINISH";
      LocMsg[LocMsg["SEND_REQ_PET_NEAR_DATA"] = 10063] = "SEND_REQ_PET_NEAR_DATA";
      LocMsg[LocMsg["REC_UPDATA_PET_NEAR_DATA"] = 10064] = "REC_UPDATA_PET_NEAR_DATA";
      LocMsg[LocMsg["SEND_REQ_SHOP_DATA"] = 10065] = "SEND_REQ_SHOP_DATA";
      LocMsg[LocMsg["SYNC_GUIDE_INFO"] = 10066] = "SYNC_GUIDE_INFO";
      LocMsg[LocMsg["UPDATE_GUIDE_VIEW"] = 10067] = "UPDATE_GUIDE_VIEW";
      LocMsg[LocMsg["REC_UPDATA_GUIDANCE"] = 10068] = "REC_UPDATA_GUIDANCE";
    })(LocMsg = exports.LocMsg || (exports.LocMsg = {}));
    var NetMsg;
    (function(NetMsg) {
      NetMsg[NetMsg["HeartBeat"] = 20001] = "HeartBeat";
      NetMsg[NetMsg["Login"] = 20002] = "Login";
      NetMsg[NetMsg["GameData"] = 20003] = "GameData";
      NetMsg[NetMsg["CreatePet"] = 20004] = "CreatePet";
      NetMsg[NetMsg["Feed"] = 20005] = "Feed";
      NetMsg[NetMsg["UpdateProp"] = 20006] = "UpdateProp";
      NetMsg[NetMsg["PickFruit"] = 20007] = "PickFruit";
      NetMsg[NetMsg["CollectStarCoin"] = 20008] = "CollectStarCoin";
      NetMsg[NetMsg["GetCommodityInfos"] = 20009] = "GetCommodityInfos";
      NetMsg[NetMsg["ShoppingMallPurchase"] = 20010] = "ShoppingMallPurchase";
      NetMsg[NetMsg["PetGoBackNotify"] = 20011] = "PetGoBackNotify";
      NetMsg[NetMsg["GetUserRemainSoulCoin"] = 20012] = "GetUserRemainSoulCoin";
      NetMsg[NetMsg["DressUp"] = 20013] = "DressUp";
      NetMsg[NetMsg["DressModify"] = 20014] = "DressModify";
      NetMsg[NetMsg["UserDynamicInfo"] = 20015] = "UserDynamicInfo";
      NetMsg[NetMsg["UserCarouselInfo"] = 20016] = "UserCarouselInfo";
      NetMsg[NetMsg["EpetFirstLoginReply"] = 20017] = "EpetFirstLoginReply";
      NetMsg[NetMsg["FingerHeart"] = 20018] = "FingerHeart";
      NetMsg[NetMsg["LevelUp"] = 20019] = "LevelUp";
      NetMsg[NetMsg["SkillModify"] = 20020] = "SkillModify";
      NetMsg[NetMsg["BizRedPoint"] = 20021] = "BizRedPoint";
      NetMsg[NetMsg["BizRedPointModify"] = 20022] = "BizRedPointModify";
      NetMsg[NetMsg["PrickBubble"] = 20023] = "PrickBubble";
      NetMsg[NetMsg["UpdateBubble"] = 20024] = "UpdateBubble";
      NetMsg[NetMsg["Rename"] = 20025] = "Rename";
      NetMsg[NetMsg["FurnitureReplace"] = 20026] = "FurnitureReplace";
      NetMsg[NetMsg["FriendShortcutInfo"] = 20027] = "FriendShortcutInfo";
      NetMsg[NetMsg["RemoveBizRedPoint"] = 20028] = "RemoveBizRedPoint";
      NetMsg[NetMsg["GetFruitTree"] = 20029] = "GetFruitTree";
      NetMsg[NetMsg["StealFruit"] = 20030] = "StealFruit";
      NetMsg[NetMsg["SendDirt"] = 20031] = "SendDirt";
      NetMsg[NetMsg["NearPetInfo"] = 20032] = "NearPetInfo";
      NetMsg[NetMsg["UpdateGuidance"] = 20033] = "UpdateGuidance";
    })(NetMsg = exports.NetMsg || (exports.NetMsg = {}));
    var UIMsg;
    (function(UIMsg) {
      UIMsg[UIMsg["OPEN_SELECT_CONFIRM_DIALOG"] = 30001] = "OPEN_SELECT_CONFIRM_DIALOG";
      UIMsg[UIMsg["OPEN_PET_NAME_DIALOG"] = 30002] = "OPEN_PET_NAME_DIALOG";
      UIMsg[UIMsg["OPEN_PROP_DIALOG"] = 30003] = "OPEN_PROP_DIALOG";
      UIMsg[UIMsg["CLOSE_PROP_DIALOG"] = 30004] = "CLOSE_PROP_DIALOG";
      UIMsg[UIMsg["UPDATE_PROP_FOOD_PAGE"] = 30005] = "UPDATE_PROP_FOOD_PAGE";
      UIMsg[UIMsg["UPDATE_PROP_DRESS_PAGE"] = 30006] = "UPDATE_PROP_DRESS_PAGE";
      UIMsg[UIMsg["UPDATE_PROP_PLANT_DRESS_PAGE"] = 30007] = "UPDATE_PROP_PLANT_DRESS_PAGE";
      UIMsg[UIMsg["UPDATE_EXP"] = 30008] = "UPDATE_EXP";
      UIMsg[UIMsg["UPDATE_STAR_COIN"] = 30009] = "UPDATE_STAR_COIN";
      UIMsg[UIMsg["INIT_PETS_OBJECT"] = 30010] = "INIT_PETS_OBJECT";
      UIMsg[UIMsg["SELECT_PET_ID"] = 30011] = "SELECT_PET_ID";
      UIMsg[UIMsg["FLY_FRUIT"] = 30012] = "FLY_FRUIT";
      UIMsg[UIMsg["REC_FEED_PET"] = 30013] = "REC_FEED_PET";
      UIMsg[UIMsg["UPDATE_SHOP_PET"] = 30014] = "UPDATE_SHOP_PET";
      UIMsg[UIMsg["UPDATE_SHOP_PLANET"] = 30015] = "UPDATE_SHOP_PLANET";
      UIMsg[UIMsg["OPEN_SHOP_DIALOG"] = 30016] = "OPEN_SHOP_DIALOG";
      UIMsg[UIMsg["OPEN_SHOP_DOUBLE_POP_DIALOG"] = 30017] = "OPEN_SHOP_DOUBLE_POP_DIALOG";
      UIMsg[UIMsg["SET_PET_VISITOR_STATUS"] = 30018] = "SET_PET_VISITOR_STATUS";
      UIMsg[UIMsg["FLY_COIN"] = 30019] = "FLY_COIN";
      UIMsg[UIMsg["UPDATE_SOUL_COIN"] = 30020] = "UPDATE_SOUL_COIN";
      UIMsg[UIMsg["UPDATE_DRESS_UP"] = 30021] = "UPDATE_DRESS_UP";
      UIMsg[UIMsg["UPDATE_PLANT_DRESS_UP"] = 30022] = "UPDATE_PLANT_DRESS_UP";
      UIMsg[UIMsg["OPEN_DYNAMIC_DIALOG"] = 30023] = "OPEN_DYNAMIC_DIALOG";
      UIMsg[UIMsg["UPDATA_DYNAMIC_DATA"] = 30024] = "UPDATA_DYNAMIC_DATA";
      UIMsg[UIMsg["UPDATA_CAROUSELINFO_DATA"] = 30025] = "UPDATA_CAROUSELINFO_DATA";
      UIMsg[UIMsg["OPEN_PET_INFORMATION"] = 30026] = "OPEN_PET_INFORMATION";
      UIMsg[UIMsg["OPEN_MORE_HELP"] = 30027] = "OPEN_MORE_HELP";
      UIMsg[UIMsg["MAINPET_LEVELUP"] = 30028] = "MAINPET_LEVELUP";
      UIMsg[UIMsg["REFRESH_PET_SPINE"] = 30029] = "REFRESH_PET_SPINE";
      UIMsg[UIMsg["REFRESH_SKILL"] = 30030] = "REFRESH_SKILL";
      UIMsg[UIMsg["FRESH_PETS_OBJECT"] = 30031] = "FRESH_PETS_OBJECT";
      UIMsg[UIMsg["DELETE_PETS_OBJECT"] = 30032] = "DELETE_PETS_OBJECT";
      UIMsg[UIMsg["REC_PRICK_BUBBLE"] = 30033] = "REC_PRICK_BUBBLE";
      UIMsg[UIMsg["UPDATE_PET_NAME"] = 30034] = "UPDATE_PET_NAME";
      UIMsg[UIMsg["INIT_PLANET_DRESS"] = 30035] = "INIT_PLANET_DRESS";
      UIMsg[UIMsg["INIT_PETS_OBJECT_INPLANETSCENE"] = 30036] = "INIT_PETS_OBJECT_INPLANETSCENE";
      UIMsg[UIMsg["FRESH_PETS_OBJECT_INPLANETSCENE"] = 30037] = "FRESH_PETS_OBJECT_INPLANETSCENE";
      UIMsg[UIMsg["INIT_FRUIT"] = 30038] = "INIT_FRUIT";
      UIMsg[UIMsg["FRESH_FRUIT"] = 30039] = "FRESH_FRUIT";
      UIMsg[UIMsg["DELETE_FRUIT"] = 30040] = "DELETE_FRUIT";
      UIMsg[UIMsg["FLY_FRUIT_INPLANETDRESS"] = 30041] = "FLY_FRUIT_INPLANETDRESS";
      UIMsg[UIMsg["OPEN_PLANETDRESS_EDIT"] = 30042] = "OPEN_PLANETDRESS_EDIT";
      UIMsg[UIMsg["CLOSE_PLANETDRESS_EDIT"] = 30043] = "CLOSE_PLANETDRESS_EDIT";
      UIMsg[UIMsg["PUT_DRAG_PLANETDRESS"] = 30044] = "PUT_DRAG_PLANETDRESS";
      UIMsg[UIMsg["CANCEL_PUT"] = 30045] = "CANCEL_PUT";
      UIMsg[UIMsg["REFRESH_PLANET_DRESS"] = 30046] = "REFRESH_PLANET_DRESS";
      UIMsg[UIMsg["INIT_PLANETDRESS_BTNINFO"] = 30047] = "INIT_PLANETDRESS_BTNINFO";
      UIMsg[UIMsg["DELETE_BUBBLE_BY_TIMEOUT"] = 30048] = "DELETE_BUBBLE_BY_TIMEOUT";
      UIMsg[UIMsg["OPEN_FEED_AWARD"] = 30049] = "OPEN_FEED_AWARD";
      UIMsg[UIMsg["OPEN_GAME_FRIEND_VIEW"] = 30050] = "OPEN_GAME_FRIEND_VIEW";
      UIMsg[UIMsg["SWITCH_FLOAT_FRIEND_TYPE"] = 30051] = "SWITCH_FLOAT_FRIEND_TYPE";
      UIMsg[UIMsg["UPDATA_SINGLE_DYNAMIC_DATA"] = 30052] = "UPDATA_SINGLE_DYNAMIC_DATA";
      UIMsg[UIMsg["UPDATE_PET_NEAR_DATA"] = 30053] = "UPDATE_PET_NEAR_DATA";
      UIMsg[UIMsg["OPEN_POP_ACTIVITY_VIEW"] = 30054] = "OPEN_POP_ACTIVITY_VIEW";
      UIMsg[UIMsg["PLAY_SHAKE_ANIMATION"] = 30055] = "PLAY_SHAKE_ANIMATION";
      UIMsg[UIMsg["FRESH_PETOBJECT_TOP_DOWNFEED_SHOW"] = 30056] = "FRESH_PETOBJECT_TOP_DOWNFEED_SHOW";
      UIMsg[UIMsg["START_GUIDE"] = 30057] = "START_GUIDE";
      UIMsg[UIMsg["TRIGGER_POP_GUIDE"] = 30058] = "TRIGGER_POP_GUIDE";
      UIMsg[UIMsg["LOAD_POP_UI_START"] = 30059] = "LOAD_POP_UI_START";
      UIMsg[UIMsg["LOAD_POP_UI_OVER"] = 30060] = "LOAD_POP_UI_OVER";
      UIMsg[UIMsg["CLOSE_POP_UI"] = 30061] = "CLOSE_POP_UI";
    })(UIMsg = exports.UIMsg || (exports.UIMsg = {}));
    var NetSendMsgEnum;
    (function(NetSendMsgEnum) {
      NetSendMsgEnum["HeartBeat"] = "HeartBeat";
      NetSendMsgEnum["Login"] = "Login";
      NetSendMsgEnum["GameData"] = "GameData";
      NetSendMsgEnum["CreatePet"] = "CreatePet";
      NetSendMsgEnum["PickFruit"] = "PickFruit";
      NetSendMsgEnum["Feed"] = "Feed";
      NetSendMsgEnum["CollectStarCoin"] = "CollectStarCoin";
      NetSendMsgEnum["EpetFirstLoginReply"] = "EpetFirstLoginReply";
      NetSendMsgEnum["GetCommodityInfos"] = "GetCommodityInfos";
      NetSendMsgEnum["ShoppingMallPurchase"] = "ShoppingMallPurchase";
      NetSendMsgEnum["GetUserRemainSoulCoin"] = "GetUserRemainSoulCoin";
      NetSendMsgEnum["DressUp"] = "DressUp";
      NetSendMsgEnum["UserDynamicInfo"] = "UserDynamicInfo";
      NetSendMsgEnum["UserCarouselInfo"] = "UserCarouselInfo";
      NetSendMsgEnum["FingerHeart"] = "FingerHeart";
      NetSendMsgEnum["BizRedPoint"] = "BizRedPoint";
      NetSendMsgEnum["PrickBubble"] = "PrickBubble";
      NetSendMsgEnum["Rename"] = "Rename";
      NetSendMsgEnum["FurnitureReplace"] = "FurnitureReplace";
      NetSendMsgEnum["FriendShortcutInfo"] = "FriendShortcutInfo";
      NetSendMsgEnum["RemoveBizRedPoint"] = "RemoveBizRedPoint";
      NetSendMsgEnum["GetFruitTree"] = "GetFruitTree";
      NetSendMsgEnum["SendDirt"] = "SendDirt";
      NetSendMsgEnum["NearPetInfo"] = "NearPetInfo";
      NetSendMsgEnum["UpdateGuidance"] = "UpdateGuidance";
    })(NetSendMsgEnum = exports.NetSendMsgEnum || (exports.NetSendMsgEnum = {}));
    cc._RF.pop();
  }, {} ],
  EventMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a24ddOfFKdFzIIVdh8s8wwn", "EventMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventMgr = void 0;
    var EventMgr = function() {
      function EventMgr() {
        this._eventListeners = {};
      }
      Object.defineProperty(EventMgr, "Inst", {
        get: function() {
          null == EventMgr._inst && (EventMgr._inst = new EventMgr());
          return EventMgr._inst;
        },
        enumerable: false,
        configurable: true
      });
      EventMgr.Destroy = function() {
        this._inst && (this._inst = null);
      };
      EventMgr.prototype.getEventListenersIndex = function(eventName, callBack, target) {
        var index = -1;
        for (var i = 0; i < this._eventListeners[eventName].length; i++) {
          var iterator = this._eventListeners[eventName][i];
          if (iterator.target == target) {
            index = i;
            break;
          }
        }
        return index;
      };
      EventMgr.prototype.addEvent = function(eventName, callBack, target) {
        if (!eventName) {
          cc.warn("eventName is empty" + eventName);
          return;
        }
        if (null == callBack) {
          cc.log("addEvent callBack is nil");
          return false;
        }
        var callTarget = {
          callBack: callBack,
          target: target
        };
        if (null == this._eventListeners[eventName]) this._eventListeners[eventName] = [ callTarget ]; else {
          var index = this.getEventListenersIndex(eventName, callBack, target);
          -1 == index && this._eventListeners[eventName].push(callTarget);
        }
        return true;
      };
      EventMgr.prototype.removeEvent = function(eventName, callBack, target) {
        if (!eventName) return;
        if (null != this._eventListeners[eventName]) {
          var index = this.getEventListenersIndex(eventName, callBack, target);
          -1 != index && this._eventListeners[eventName].splice(index, 1);
          0 == this._eventListeners[eventName].length && delete this._eventListeners[eventName];
        }
      };
      EventMgr.prototype.emitEvent = function(eventName, eventData1, eventData2, eventData3, eventData4) {
        eventName && (eventName = eventName.toString());
        if (null != this._eventListeners[eventName]) {
          var callbackList = [];
          for (var _i = 0, _a = this._eventListeners[eventName]; _i < _a.length; _i++) {
            var iterator = _a[_i];
            callbackList.push({
              callBack: iterator.callBack,
              target: iterator.target
            });
          }
          for (var _b = 0, callbackList_1 = callbackList; _b < callbackList_1.length; _b++) {
            var iterator = callbackList_1[_b];
            iterator.callBack.call(iterator.target, eventData1, eventData2, eventData3, eventData4);
          }
        }
      };
      EventMgr._inst = null;
      return EventMgr;
    }();
    exports.EventMgr = EventMgr;
    cc._RF.pop();
  }, {} ],
  GameConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "618afPYe4lCoLvbfKpTy1o4", "GameConfig");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CLOSE_CREATE_PET_INPUT_NAME = exports.Move_Check_Time = exports.HEART_BEAT_INTERVAL = exports.SleepEndTime = exports.SleepBeginTime = exports.shareUrl = exports.httpWays = exports.Getways = exports.ServerList = exports.GameConfig = exports.APP_VERSION = exports.DEBUG_MODE = void 0;
    exports.DEBUG_MODE = true;
    exports.APP_VERSION = "2.0.1";
    exports.GameConfig = {
      NET_HTTP_URL: "https://www.xxxx.xyz",
      MAP_WIDTH: 748,
      MAX_HP_COUNT: 3
    };
    var ServerList;
    (function(ServerList) {
      ServerList[ServerList["\u6b63\u5f0f\u670d"] = 0] = "\u6b63\u5f0f\u670d";
      ServerList[ServerList["\u7070\u5ea6\u670d"] = 1] = "\u7070\u5ea6\u670d";
      ServerList[ServerList["\u6d4b\u8bd5\u670d"] = 2] = "\u6d4b\u8bd5\u670d";
      ServerList[ServerList["DEV\u73af\u5883"] = 3] = "DEV\u73af\u5883";
    })(ServerList = exports.ServerList || (exports.ServerList = {}));
    exports.Getways = [ "wss://link-connector.soulapp.cn:443", "wss://pre-link-connector.soulapp.cn:443", "ws://10.30.12.234:8000", "ws://10.30.37.80:8000" ];
    exports.httpWays = [ "link-connector.soulapp.cn:443", "pre-link-connector.soulapp.cn:443" ];
    exports.shareUrl = [ "https://pet.soulapp.cn", "http://spy.soulapp-inc.cn:3009" ];
    exports.SleepBeginTime = 0;
    exports.SleepEndTime = 8;
    exports.HEART_BEAT_INTERVAL = 5;
    exports.Move_Check_Time = 3;
    exports.CLOSE_CREATE_PET_INPUT_NAME = false;
    cc._RF.pop();
  }, {} ],
  GameEnums: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58020j8vPVDVaYikj0YuVgI", "GameEnums");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MainviewZindexEnum = exports.CoinsTypeEnum = exports.BtnPropsTypeEnum = exports.PropsTypeEnum = exports.DataType = exports.AssetGroup = exports.ServerEC = exports.SortingLayer = exports.ServerRespEvent = exports.LanguageShow = void 0;
    var LanguageShow;
    (function(LanguageShow) {
      LanguageShow["ZH"] = "zh";
      LanguageShow["EN"] = "en";
    })(LanguageShow = exports.LanguageShow || (exports.LanguageShow = {}));
    var ServerRespEvent;
    (function(ServerRespEvent) {
      ServerRespEvent[ServerRespEvent["REQ_EVENT"] = 0] = "REQ_EVENT";
      ServerRespEvent[ServerRespEvent["PUSH_EVENT"] = 1] = "PUSH_EVENT";
    })(ServerRespEvent = exports.ServerRespEvent || (exports.ServerRespEvent = {}));
    var SortingLayer;
    (function(SortingLayer) {
      SortingLayer[SortingLayer["BACKGROUND"] = -1e3] = "BACKGROUND";
      SortingLayer[SortingLayer["NORMAL_UI"] = 2e3] = "NORMAL_UI";
      SortingLayer[SortingLayer["COVER_UI"] = 1e4] = "COVER_UI";
      SortingLayer[SortingLayer["GUIDE_UI"] = 15e3] = "GUIDE_UI";
      SortingLayer[SortingLayer["SYSTEM_ALERT"] = 2e4] = "SYSTEM_ALERT";
    })(SortingLayer = exports.SortingLayer || (exports.SortingLayer = {}));
    var ServerEC;
    (function(ServerEC) {
      ServerEC[ServerEC["TIME_OUT"] = 1e3] = "TIME_OUT";
      ServerEC[ServerEC["SUCCESS"] = 1001] = "SUCCESS";
    })(ServerEC = exports.ServerEC || (exports.ServerEC = {}));
    var AssetGroup;
    (function(AssetGroup) {
      AssetGroup[AssetGroup["OTHER"] = 0] = "OTHER";
    })(AssetGroup = exports.AssetGroup || (exports.AssetGroup = {}));
    var DataType;
    (function(DataType) {
      DataType[DataType["PERSONAL_DATA"] = 1] = "PERSONAL_DATA";
      DataType[DataType["PLAYER_DATA"] = 2] = "PLAYER_DATA";
    })(DataType = exports.DataType || (exports.DataType = {}));
    var PropsTypeEnum;
    (function(PropsTypeEnum) {
      PropsTypeEnum[PropsTypeEnum["NONE"] = -1] = "NONE";
      PropsTypeEnum[PropsTypeEnum["FOOD"] = 10001] = "FOOD";
      PropsTypeEnum[PropsTypeEnum["COIN"] = 10002] = "COIN";
    })(PropsTypeEnum = exports.PropsTypeEnum || (exports.PropsTypeEnum = {}));
    var BtnPropsTypeEnum;
    (function(BtnPropsTypeEnum) {
      BtnPropsTypeEnum[BtnPropsTypeEnum["FOOD"] = 0] = "FOOD";
      BtnPropsTypeEnum[BtnPropsTypeEnum["PET_DRESS"] = 1] = "PET_DRESS";
    })(BtnPropsTypeEnum = exports.BtnPropsTypeEnum || (exports.BtnPropsTypeEnum = {}));
    var CoinsTypeEnum;
    (function(CoinsTypeEnum) {
      CoinsTypeEnum[CoinsTypeEnum["SOULCOIN"] = 0] = "SOULCOIN";
      CoinsTypeEnum[CoinsTypeEnum["COIN"] = 1] = "COIN";
    })(CoinsTypeEnum = exports.CoinsTypeEnum || (exports.CoinsTypeEnum = {}));
    var MainviewZindexEnum;
    (function(MainviewZindexEnum) {
      MainviewZindexEnum[MainviewZindexEnum["VISIT_PET"] = 30] = "VISIT_PET";
      MainviewZindexEnum[MainviewZindexEnum["FRUIT_TREE"] = 40] = "FRUIT_TREE";
      MainviewZindexEnum[MainviewZindexEnum["VIEW_PET"] = 45] = "VIEW_PET";
      MainviewZindexEnum[MainviewZindexEnum["MOVE_DYNAMIC"] = 50] = "MOVE_DYNAMIC";
      MainviewZindexEnum[MainviewZindexEnum["FRIEND_FLOAT"] = 60] = "FRIEND_FLOAT";
      MainviewZindexEnum[MainviewZindexEnum["PROP_BAG"] = 99] = "PROP_BAG";
      MainviewZindexEnum[MainviewZindexEnum["LEVEL_UP"] = 100] = "LEVEL_UP";
    })(MainviewZindexEnum = exports.MainviewZindexEnum || (exports.MainviewZindexEnum = {}));
    cc._RF.pop();
  }, {} ],
  GameInterfaces: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "399c1Yn7iNL7bgY2UWK+W+0", "GameInterfaces");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  GameMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c00f1rKnQpFkZHHTKJREiqw", "GameMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LoadCtrl_1 = require("../../Game/Scene/LoadScene/LoadCtrl");
    var AppLog_1 = require("../Log/AppLog");
    var SceneMgr_1 = require("./SceneMgr");
    var GameMgr = function() {
      function GameMgr() {
        this._currSceneCtrl = null;
        this._currSceneCtrl = new LoadCtrl_1.default();
        this._AssignScrpitToScene();
      }
      Object.defineProperty(GameMgr, "Inst", {
        get: function() {
          null == GameMgr._inst && (GameMgr._inst = new GameMgr());
          return GameMgr._inst;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GameMgr.prototype, "currSceneCtrl", {
        get: function() {
          return this._currSceneCtrl;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(GameMgr.prototype, "curSceneName", {
        get: function() {
          return this._currSceneCtrl ? this._currSceneCtrl.SceneName : "";
        },
        enumerable: false,
        configurable: true
      });
      GameMgr.prototype.ChangeScene = function(sceneCtrl, beforeChangeSceneCb) {
        var _this = this;
        void 0 === beforeChangeSceneCb && (beforeChangeSceneCb = null);
        if (this._currSceneCtrl) {
          this._currSceneCtrl.OnSceneEnd();
          this._currSceneCtrl = null;
        }
        this._currSceneCtrl = sceneCtrl;
        SceneMgr_1.default.Inst.LoadScene(sceneCtrl.SceneName).then(function() {
          beforeChangeSceneCb && beforeChangeSceneCb();
          _this._AssignScrpitToScene();
        }).catch(function(err) {
          AppLog_1.default.Error(err);
        });
      };
      GameMgr.prototype.OnUpdateTick = function(dt) {
        this._currSceneCtrl && this._currSceneCtrl.OnTick(dt);
      };
      GameMgr.prototype._AssignScrpitToScene = function() {
        var node = cc.find("Canvas");
        var script = node.getComponent(this._currSceneCtrl.SceneScript);
        this._currSceneCtrl.ownerView = script;
        this._currSceneCtrl.OnSceneBinded();
      };
      GameMgr._inst = null;
      return GameMgr;
    }();
    exports.default = GameMgr;
    cc._RF.pop();
  }, {
    "../../Game/Scene/LoadScene/LoadCtrl": "LoadCtrl",
    "../Log/AppLog": "AppLog",
    "./SceneMgr": "SceneMgr"
  } ],
  Global: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "828105pvhNIjpvDm6zPX5aZ", "Global");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioMgr_1 = require("../../BaseFrame/BaseManager/AudioMgr");
    var DataMgr_1 = require("../../BaseFrame/BaseManager/DataMgr");
    var EventMgr_1 = require("../../BaseFrame/BaseManager/EventMgr");
    var GameMgr_1 = require("../../BaseFrame/BaseManager/GameMgr");
    var NetMgr_1 = require("../../BaseFrame/BaseManager/NetMgr");
    var SceneMgr_1 = require("../../BaseFrame/BaseManager/SceneMgr");
    var TimerMgr_1 = require("../../BaseFrame/BaseManager/TimerMgr");
    var MyPolyfill_1 = require("../../BaseFrame/Libs/MyPolyfill");
    var AppLog_1 = require("../../BaseFrame/Log/AppLog");
    var GameEnums_1 = require("../BaseModule/GameEnums");
    var LanguageData_1 = require("../i18nModule/i18nBase/LanguageData");
    var NetSender_1 = require("../NetModule/NetSender");
    var AppContext_1 = require("./AppContext");
    var GameConfig_1 = require("./GameConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Global = function(_super) {
      __extends(Global, _super);
      function Global() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.login_host = 0;
        _this.defaultHeartBeat = 1;
        _this.isDebugMode = false;
        _this.loadingCoverNode = null;
        _this.loadingAnim = null;
        _this.loadingText = null;
        _this.lblDebugMode = null;
        _this.btnVConsole = null;
        _this._pressDebugCount = 0;
        _this._debugPressTime = 0;
        _this._loadingTime = 0;
        return _this;
      }
      Global_1 = Global;
      Object.defineProperty(Global, "Inst", {
        get: function() {
          return this._inst;
        },
        enumerable: false,
        configurable: true
      });
      Global.prototype.onLoad = function() {
        new MyPolyfill_1.default();
        Global_1._inst = this;
        void 0 != window._GLOBAL_HOST && (this.login_host = window._GLOBAL_HOST);
        void 0 != window._GLOBAL_DEBUG_MODE && (this.isDebugMode = window._GLOBAL_DEBUG_MODE);
        AppLog_1.default.OpenFLAG = this.isDebugMode;
        cc.game.addPersistRootNode(this.node);
        cc.game.addPersistRootNode(this.loadingCoverNode);
        this._InitSystemObject();
        this._InitListener();
        this._pressDebugCount = 0;
        this.node.zIndex = cc.macro.MAX_ZINDEX;
        this.loadingCoverNode.zIndex = cc.macro.MAX_ZINDEX;
        this.SetDebugModel();
      };
      Global.prototype.OnClickVconsole = function() {
        if (void 0 !== window.vConsole) {
          if (this._pressDebugCount > 0 && this._pressDebugCount % 10 == 0 || this.isDebugMode) {
            this._pressDebugCount = 0;
            this._debugPressTime = 0;
            window.vConsole.show();
          }
          var curr = new Date().getTime();
          0 == this._pressDebugCount && (this._debugPressTime = curr);
          if (curr - this._debugPressTime <= 800) {
            this._debugPressTime = curr;
            ++this._pressDebugCount;
          } else {
            this._pressDebugCount = 0;
            this._debugPressTime = 0;
          }
        }
      };
      Global.prototype.onDestroy = function() {
        Global_1._inst = null;
      };
      Global.prototype.update = function(dt) {
        AppContext_1.default.Inst.OnUpdateTick(dt);
        GameMgr_1.default.Inst.OnUpdateTick(dt);
        this.loadingCoverNode.active && TimerMgr_1.default.Inst.GetCurrentLocalTime() > this._loadingTime && this.LoadingCover(false);
      };
      Global.prototype._InitSystemObject = function() {
        LanguageData_1.i18n.init(GameEnums_1.LanguageShow.EN);
        TimerMgr_1.default.Inst;
        EventMgr_1.EventMgr.Inst;
        NetMgr_1.default.Inst;
        AudioMgr_1.default.Inst;
        SceneMgr_1.default.Inst;
        GameMgr_1.default.Inst;
        DataMgr_1.default.Inst;
        AppContext_1.default.Inst;
        NetSender_1.default.SetEventBind();
        this.lblDebugMode.string = "Debug\u6a21\u5f0f-" + GameConfig_1.ServerList[this.login_host];
      };
      Global.prototype._InitListener = function() {
        this.isDebugMode && cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, function(event) {
          event.keyCode == cc.macro.KEY.n && AppContext_1.default.Inst.ForceDisconnect();
        }, this);
      };
      Global.prototype.LoadingCover = function(isDisplay, text, waitingSecond) {
        void 0 === isDisplay && (isDisplay = true);
        void 0 === text && (text = "\u52a0\u8f7d\u4e2d...");
        void 0 === waitingSecond && (waitingSecond = 5);
        if (null == this.loadingCoverNode) return;
        this.loadingCoverNode.active = isDisplay;
        if (isDisplay) {
          this._loadingTime = TimerMgr_1.default.Inst.GetCurrentLocalTime() + waitingSecond;
          this.loadingAnim.play();
        } else this.loadingAnim.stop();
        this.loadingText.string = text;
      };
      Global.prototype.CommonBtnSound = function(event, customEventData) {};
      Global.prototype.SetDebugModel = function() {
        console.log("this.login_host=", this.login_host, this.isDebugMode);
        this.lblDebugMode.node.active = this.isDebugMode;
        this.btnVConsole.node.active = this.isDebugMode;
        this.lblDebugMode.node.active && void 0 != AppContext_1.default.Inst.LaunchParam.testUrlIdx && null != AppContext_1.default.Inst.LaunchParam.testUrlIdx && AppContext_1.default.Inst.LaunchParam.testUrlIdx >= 0 && AppContext_1.default.Inst.LaunchParam.testUrlIdx < 4 && (this.lblDebugMode.string = "Debug\u6a21\u5f0f-" + GameConfig_1.ServerList[AppContext_1.default.Inst.LaunchParam.testUrlIdx]);
      };
      Global.prototype.WidgetForIphonX = function(targetWidget, topOrBottom) {
        void 0 === topOrBottom && (topOrBottom = "top");
        cc.winSize.height > cc.view.getDesignResolutionSize().height + 100 ? targetWidget[topOrBottom] = (targetWidget[topOrBottom] ? targetWidget[topOrBottom] : 0) + 44 : targetWidget[topOrBottom] = (targetWidget[topOrBottom] ? targetWidget[topOrBottom] : 0) + 0;
        targetWidget.updateAlignment();
      };
      var Global_1;
      Global._inst = null;
      __decorate([ property({
        type: cc.Enum(GameConfig_1.ServerList)
      }) ], Global.prototype, "login_host", void 0);
      __decorate([ property() ], Global.prototype, "defaultHeartBeat", void 0);
      __decorate([ property() ], Global.prototype, "isDebugMode", void 0);
      __decorate([ property({
        type: cc.Node
      }) ], Global.prototype, "loadingCoverNode", void 0);
      __decorate([ property({
        type: cc.Animation,
        displayName: "\u901a\u7528Loading\u52d5\u756b"
      }) ], Global.prototype, "loadingAnim", void 0);
      __decorate([ property({
        type: cc.Label,
        displayName: "\u901a\u7528Loading\u52d5\u756b"
      }) ], Global.prototype, "loadingText", void 0);
      __decorate([ property({
        type: cc.Label
      }) ], Global.prototype, "lblDebugMode", void 0);
      __decorate([ property({
        type: cc.Button
      }) ], Global.prototype, "btnVConsole", void 0);
      Global = Global_1 = __decorate([ ccclass ], Global);
      return Global;
    }(cc.Component);
    exports.default = Global;
    cc._RF.pop();
  }, {
    "../../BaseFrame/BaseManager/AudioMgr": "AudioMgr",
    "../../BaseFrame/BaseManager/DataMgr": "DataMgr",
    "../../BaseFrame/BaseManager/EventMgr": "EventMgr",
    "../../BaseFrame/BaseManager/GameMgr": "GameMgr",
    "../../BaseFrame/BaseManager/NetMgr": "NetMgr",
    "../../BaseFrame/BaseManager/SceneMgr": "SceneMgr",
    "../../BaseFrame/BaseManager/TimerMgr": "TimerMgr",
    "../../BaseFrame/Libs/MyPolyfill": "MyPolyfill",
    "../../BaseFrame/Log/AppLog": "AppLog",
    "../BaseModule/GameEnums": "GameEnums",
    "../NetModule/NetSender": "NetSender",
    "../i18nModule/i18nBase/LanguageData": "LanguageData",
    "./AppContext": "AppContext",
    "./GameConfig": "GameConfig"
  } ],
  HeartBeatHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5e9e15VhZPbKHP3imgCliU", "HeartBeatHelper");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Queue_1 = require("../../BaseFrame/Libs/Queue");
    var HeartBeatHelper = function() {
      function HeartBeatHelper() {
        this._lastPingTime = 0;
        this._sendQueue = null;
        this._sendQueue = new Queue_1.default();
      }
      Object.defineProperty(HeartBeatHelper, "Inst", {
        get: function() {
          null == HeartBeatHelper._inst && (HeartBeatHelper._inst = new HeartBeatHelper());
          return HeartBeatHelper._inst;
        },
        enumerable: false,
        configurable: true
      });
      HeartBeatHelper.prototype.SetLastPingTime = function(ping) {
        return this._lastPingTime = ping;
      };
      HeartBeatHelper.prototype.GetLastPingTime = function() {
        return this._lastPingTime;
      };
      HeartBeatHelper.prototype.OnHeartBeatRecv = function() {
        if (this._sendQueue.Count <= 0) return;
        var lastTime = this._sendQueue.Dequeue();
        var lastPingTime = new Date().getTime() - lastTime;
        lastPingTime > 0 && lastPingTime < Number.MAX_SAFE_INTEGER && (this._lastPingTime = lastPingTime);
      };
      HeartBeatHelper.prototype.OnHeartBeatSend = function() {
        this._sendQueue.Enqueue(new Date().getTime());
      };
      HeartBeatHelper.prototype.ResetState = function() {
        this._lastPingTime = 0;
        this._sendQueue = new Queue_1.default();
      };
      HeartBeatHelper._inst = null;
      return HeartBeatHelper;
    }();
    exports.default = HeartBeatHelper;
    cc._RF.pop();
  }, {
    "../../BaseFrame/Libs/Queue": "Queue"
  } ],
  ItemBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e00149t55dLtJnzBMb6nXRy", "ItemBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ItemBase = function(_super) {
      __extends(ItemBase, _super);
      function ItemBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.idx = 0;
        _this._ownerCtrl = null;
        return _this;
      }
      ItemBase.prototype.FreashData = function(idx, _ownerCtrl, data) {
        this._ownerCtrl = _ownerCtrl;
        this.idx = idx;
        this.node.active = !!data;
        this._freashUI(data);
      };
      ItemBase = __decorate([ ccclass ], ItemBase);
      return ItemBase;
    }(cc.Component);
    exports.default = ItemBase;
    cc._RF.pop();
  }, {} ],
  LanguageData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2fd0pogJhEfJWsmzyyHNHo", "LanguageData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.i18n = void 0;
    var polyglot_min_1 = require("./polyglot.min");
    var polyInst;
    window.i18nConfig || (window.i18nConfig = {
      languages: {},
      curLang: ""
    });
    function loadLanguageData(language) {
      return window.i18nConfig.languages[language];
    }
    function initPolyglot(data) {
      data && (polyInst ? polyInst.replace(data) : polyInst = new polyglot_min_1.Polyglot({
        phrases: data,
        allowMissing: true
      }));
    }
    var i18n = function() {
      function i18n() {}
      i18n.init = function(language) {
        if (!language || language === window.i18nConfig.curLang) return;
        var data = loadLanguageData(language) || {};
        window.i18nConfig.curLang = language;
        initPolyglot(data);
        this.inst = polyInst;
      };
      i18n.t = function(key, opt) {
        if (0 === Object.keys(polyInst.phrases).length) {
          var data = loadLanguageData(window.i18nConfig.curLang) || {};
          initPolyglot(data);
          console.warn("###\u9632\u6b62\u51fa\u73b0parses\u6570\u636e\u4e22\u5931\uff0c\u91cd\u65b0\u66ff\u6362\u6570\u636e");
        }
        if (polyInst) return polyInst.t(key, opt);
      };
      i18n.prototype.updateSceneRenderers = function() {
        var rootNodes = cc.director.getScene().children;
        var allLocalizedLabels = [];
        for (var i = 0; i < rootNodes.length; ++i) {
          var labels = rootNodes[i].getComponentsInChildren("LocalizedLabel");
          Array.prototype.push.apply(allLocalizedLabels, labels);
        }
        for (var i = 0; i < allLocalizedLabels.length; ++i) {
          var label = allLocalizedLabels[i];
          if (!label.node.active) continue;
          label.updateLabel();
        }
        var allLocalizedSprites = [];
        for (var i = 0; i < rootNodes.length; ++i) {
          var sprites = rootNodes[i].getComponentsInChildren("LocalizedSprite");
          Array.prototype.push.apply(allLocalizedSprites, sprites);
        }
        for (var i = 0; i < allLocalizedSprites.length; ++i) {
          var sprite = allLocalizedSprites[i];
          if (!sprite.node.active) continue;
          sprite.updateSprite(window.i18nConfig.curLang);
        }
      };
      i18n.inst = null;
      return i18n;
    }();
    exports.i18n = i18n;
    cc._RF.pop();
  }, {
    "./polyglot.min": "polyglot.min"
  } ],
  ListItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3fa68k2jBhFa6LHEXBru5bn", "ListItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, disallowMultiple = _a.disallowMultiple, menu = _a.menu, executionOrder = _a.executionOrder;
    var SelectedType;
    (function(SelectedType) {
      SelectedType[SelectedType["NONE"] = 0] = "NONE";
      SelectedType[SelectedType["TOGGLE"] = 1] = "TOGGLE";
      SelectedType[SelectedType["SWITCH"] = 2] = "SWITCH";
    })(SelectedType || (SelectedType = {}));
    var ListItem = function(_super) {
      __extends(ListItem, _super);
      function ListItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.icon = null;
        _this.title = null;
        _this.selectedMode = SelectedType.NONE;
        _this.selectedFlag = null;
        _this.selectedSpriteFrame = null;
        _this._unselectedSpriteFrame = null;
        _this.btnItem = null;
        _this.adaptiveSize = false;
        _this._selected = false;
        _this._eventReg = false;
        return _this;
      }
      Object.defineProperty(ListItem.prototype, "selected", {
        get: function() {
          return this._selected;
        },
        set: function(val) {
          this._selected = val;
          if (!this.selectedFlag) return;
          switch (this.selectedMode) {
           case SelectedType.TOGGLE:
            this.selectedFlag.active = val;
            break;

           case SelectedType.SWITCH:
            var sp = this.selectedFlag.getComponent(cc.Sprite);
            sp && (sp.spriteFrame = val ? this.selectedSpriteFrame : this._unselectedSpriteFrame);
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ListItem.prototype, "btnCom", {
        get: function() {
          this._btnCom || (this._btnCom = this.node.getComponent(cc.Button));
          return this._btnCom;
        },
        enumerable: false,
        configurable: true
      });
      ListItem.prototype.onLoad = function() {
        if (this.selectedMode == SelectedType.SWITCH) {
          var com = this.selectedFlag.getComponent(cc.Sprite);
          this._unselectedSpriteFrame = com.spriteFrame;
        }
      };
      ListItem.prototype.onDestroy = function() {
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._onSizeChange, this);
      };
      ListItem.prototype._registerEvent = function() {
        if (!this._eventReg) {
          this.list.selectedMode > 0 && (this.btnItem ? this.btnItem.clickEvents.unshift(this.createEvt(this, "onClickThis")) : this.btnCom.clickEvents.unshift(this.createEvt(this, "onClickThis")));
          this.adaptiveSize && this.node.on(cc.Node.EventType.SIZE_CHANGED, this._onSizeChange, this);
          this._eventReg = true;
        }
      };
      ListItem.prototype._onSizeChange = function() {
        this.list._onItemAdaptive(this.node);
      };
      ListItem.prototype.createEvt = function(component, handlerName, node) {
        void 0 === node && (node = null);
        if (!component.isValid) return;
        component["comName"] = component["comName"] || component.name.match(/\<(.*?)\>/g).pop().replace(/\<|>/g, "");
        var evt = new cc.Component.EventHandler();
        evt.target = node || component.node;
        evt.component = component["comName"];
        evt.handler = handlerName;
        return evt;
      };
      ListItem.prototype.showAni = function(aniType, callFunc, del) {
        var _this = this;
        var acts;
        switch (aniType) {
         case 0:
          acts = [ cc.scaleTo(.2, .7), cc.moveBy(.3, 0, 2 * this.node.height) ];
          break;

         case 1:
          acts = [ cc.scaleTo(.2, .7), cc.moveBy(.3, 2 * this.node.width, 0) ];
          break;

         case 2:
          acts = [ cc.scaleTo(.2, .7), cc.moveBy(.3, 0, -2 * this.node.height) ];
          break;

         case 3:
          acts = [ cc.scaleTo(.2, .7), cc.moveBy(.3, -2 * this.node.width, 0) ];
          break;

         default:
          acts = [ cc.scaleTo(.3, .1) ];
        }
        (callFunc || del) && acts.push(cc.callFunc(function() {
          if (del) {
            _this.list._delSingleItem(_this.node);
            for (var n = _this.list.displayData.length - 1; n >= 0; n--) if (_this.list.displayData[n].id == _this.listId) {
              _this.list.displayData.splice(n, 1);
              break;
            }
          }
          callFunc();
        }));
        this.node.runAction(cc.sequence(acts));
      };
      ListItem.prototype.onClickThis = function() {
        this.list.selectedId = this.listId;
      };
      __decorate([ property({
        type: cc.Sprite,
        tooltip: false
      }) ], ListItem.prototype, "icon", void 0);
      __decorate([ property({
        type: cc.Node,
        tooltip: false
      }) ], ListItem.prototype, "title", void 0);
      __decorate([ property({
        type: cc.Enum(SelectedType),
        tooltip: false
      }) ], ListItem.prototype, "selectedMode", void 0);
      __decorate([ property({
        type: cc.Node,
        tooltip: false,
        visible: function() {
          return this.selectedMode > SelectedType.NONE;
        }
      }) ], ListItem.prototype, "selectedFlag", void 0);
      __decorate([ property({
        type: cc.SpriteFrame,
        tooltip: false,
        visible: function() {
          return this.selectedMode == SelectedType.SWITCH;
        }
      }) ], ListItem.prototype, "selectedSpriteFrame", void 0);
      __decorate([ property({
        type: cc.Button,
        tooltip: false,
        visible: function() {
          return this.selectedMode > SelectedType.NONE;
        }
      }) ], ListItem.prototype, "btnItem", void 0);
      __decorate([ property({
        tooltip: false
      }) ], ListItem.prototype, "adaptiveSize", void 0);
      ListItem = __decorate([ ccclass, disallowMultiple(), menu("\u81ea\u5b9a\u4e49\u7ec4\u4ef6/List Item"), executionOrder(-5001) ], ListItem);
      return ListItem;
    }(cc.Component);
    exports.default = ListItem;
    cc._RF.pop();
  }, {} ],
  List: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "56bcbhlPXdCYbvJJ2tVEbFk", "List");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, disallowMultiple = _a.disallowMultiple, menu = _a.menu, executionOrder = _a.executionOrder, requireComponent = _a.requireComponent;
    var ListItem_1 = require("./ListItem");
    var TemplateType;
    (function(TemplateType) {
      TemplateType[TemplateType["NODE"] = 1] = "NODE";
      TemplateType[TemplateType["PREFAB"] = 2] = "PREFAB";
    })(TemplateType || (TemplateType = {}));
    var SlideType;
    (function(SlideType) {
      SlideType[SlideType["NORMAL"] = 1] = "NORMAL";
      SlideType[SlideType["ADHERING"] = 2] = "ADHERING";
      SlideType[SlideType["PAGE"] = 3] = "PAGE";
    })(SlideType || (SlideType = {}));
    var SelectedType;
    (function(SelectedType) {
      SelectedType[SelectedType["NONE"] = 0] = "NONE";
      SelectedType[SelectedType["SINGLE"] = 1] = "SINGLE";
      SelectedType[SelectedType["MULT"] = 2] = "MULT";
    })(SelectedType || (SelectedType = {}));
    var List = function(_super) {
      __extends(List, _super);
      function List() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.templateType = TemplateType.NODE;
        _this.tmpNode = null;
        _this.tmpPrefab = null;
        _this._slideMode = SlideType.NORMAL;
        _this.pageDistance = .3;
        _this.pageChangeEvent = new cc.Component.EventHandler();
        _this._virtual = true;
        _this.cyclic = false;
        _this.lackCenter = false;
        _this.lackSlide = false;
        _this._updateRate = 0;
        _this.frameByFrameRenderNum = 0;
        _this.renderEvent = new cc.Component.EventHandler();
        _this.renderCallback = null;
        _this.resetCallback = null;
        _this.selectCallback = null;
        _this.selectedMode = SelectedType.NONE;
        _this.repeatEventSingle = false;
        _this.selectedEvent = null;
        _this._selectedId = -1;
        _this._forceUpdate = false;
        _this._updateDone = true;
        _this._numItems = 0;
        _this._inited = false;
        _this._needUpdateWidget = false;
        _this._aniDelRuning = false;
        _this._doneAfterUpdate = false;
        _this.adhering = false;
        _this._adheringBarrier = false;
        _this.curPageNum = 0;
        return _this;
      }
      Object.defineProperty(List.prototype, "slideMode", {
        get: function() {
          return this._slideMode;
        },
        set: function(val) {
          this._slideMode = val;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(List.prototype, "virtual", {
        get: function() {
          return this._virtual;
        },
        set: function(val) {
          null != val && (this._virtual = val);
          (true, 0 != this._numItems) && this._onScrolling();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(List.prototype, "updateRate", {
        get: function() {
          return this._updateRate;
        },
        set: function(val) {
          val >= 0 && val <= 6 && (this._updateRate = val);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(List.prototype, "selectedId", {
        get: function() {
          return this._selectedId;
        },
        set: function(val) {
          var t = this;
          var item;
          switch (t.selectedMode) {
           case SelectedType.SINGLE:
            if (!t.repeatEventSingle && val == t._selectedId) return;
            item = t.getItemByListId(val);
            var listItem = void 0;
            t._selectedId >= 0 ? t._lastSelectedId = t._selectedId : t._lastSelectedId = null;
            t._selectedId = val;
            if (item) {
              listItem = item.getComponent(ListItem_1.default);
              listItem.selected = true;
            }
            if (t._lastSelectedId >= 0 && t._lastSelectedId != t._selectedId) {
              var lastItem = t.getItemByListId(t._lastSelectedId);
              lastItem && (lastItem.getComponent(ListItem_1.default).selected = false);
            }
            t.selectedEvent && cc.Component.EventHandler.emitEvents([ t.selectedEvent ], item, val % this._actualNumItems, null == t._lastSelectedId ? null : t._lastSelectedId % this._actualNumItems);
            t.selectCallback && t.selectCallback(item, val % this._actualNumItems, null == t._lastSelectedId ? null : t._lastSelectedId % this._actualNumItems);
            break;

           case SelectedType.MULT:
            item = t.getItemByListId(val);
            if (!item) return;
            var listItem = item.getComponent(ListItem_1.default);
            t._selectedId >= 0 && (t._lastSelectedId = t._selectedId);
            t._selectedId = val;
            var bool = !listItem.selected;
            listItem.selected = bool;
            var sub = t.multSelected.indexOf(val);
            bool && sub < 0 ? t.multSelected.push(val) : !bool && sub >= 0 && t.multSelected.splice(sub, 1);
            t.selectedEvent && cc.Component.EventHandler.emitEvents([ t.selectedEvent ], item, val % this._actualNumItems, null == t._lastSelectedId ? null : t._lastSelectedId % this._actualNumItems, bool);
            t.selectCallback && t.selectCallback(item, val % this._actualNumItems, null == t._lastSelectedId ? null : t._lastSelectedId % this._actualNumItems);
          }
        },
        enumerable: false,
        configurable: true
      });
      List.prototype.initData = function(val, forceUpdate) {
        void 0 === forceUpdate && (forceUpdate = true);
        var t = this;
        if (!t.checkInited(false)) return;
        if (null == val || val < 0) {
          cc.error("numItems set the wrong::", val);
          return;
        }
        t._actualNumItems = t._numItems = val;
        t._forceUpdate = forceUpdate;
        if (t._virtual) {
          t._resizeContent();
          t.cyclic && (t._numItems = t._cyclicNum * t._numItems);
          t._onScrolling();
          t.frameByFrameRenderNum || t.slideMode != SlideType.PAGE || (t.curPageNum = t.nearestListId);
        } else {
          var layout = t.content.getComponent(cc.Layout);
          layout && (layout.enabled = true);
          t._delRedundantItem();
          t.firstListId = 0;
          if (t.frameByFrameRenderNum > 0) {
            var len = t.frameByFrameRenderNum > t._numItems ? t._numItems : t.frameByFrameRenderNum;
            for (var n = 0; n < len; n++) t._createOrUpdateItem2(n);
            if (t.frameByFrameRenderNum < t._numItems) {
              t._updateCounter = t.frameByFrameRenderNum;
              t._updateDone = false;
            }
          } else {
            for (var n = 0; n < val; n++) t._createOrUpdateItem2(n);
            t.displayItemNum = val;
          }
        }
      };
      Object.defineProperty(List.prototype, "numItems", {
        get: function() {
          return this._actualNumItems;
        },
        set: function(val) {
          this.initData(val, true);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(List.prototype, "scrollView", {
        get: function() {
          return this._scrollView;
        },
        enumerable: false,
        configurable: true
      });
      List.prototype.setRenderCallback = function(callback) {
        this.renderCallback = callback;
      };
      List.prototype.setResetCallback = function(callback) {
        this.resetCallback = callback;
      };
      List.prototype.setSelectCallback = function(callback) {
        this.selectCallback = callback;
      };
      List.prototype.onLoad = function() {
        this._init();
      };
      List.prototype.onDestroy = function() {
        var t = this;
        t._itemTmp && t._itemTmp.isValid && t._itemTmp.destroy();
        t.tmpNode && t.tmpNode.isValid && t.tmpNode.destroy();
        while (t._pool.size()) {
          var node = t._pool.get();
          node.destroy();
        }
      };
      List.prototype.onEnable = function() {
        this._registerEvent();
        this._init();
      };
      List.prototype.onDisable = function() {
        this._unregisterEvent();
      };
      List.prototype._registerEvent = function() {
        var t = this;
        t.node.on(cc.Node.EventType.TOUCH_START, t._onTouchStart, t, true);
        t.node.on("touch-up", t._onTouchUp, t);
        t.node.on(cc.Node.EventType.TOUCH_CANCEL, t._onTouchCancelled, t, true);
        t.node.on("scroll-began", t._onScrollBegan, t, true);
        t.node.on("scroll-ended", t._onScrollEnded, t, true);
        t.node.on("scrolling", t._onScrolling, t, true);
        t.node.on(cc.Node.EventType.SIZE_CHANGED, t._onSizeChanged, t);
      };
      List.prototype._unregisterEvent = function() {
        var t = this;
        t.node.off(cc.Node.EventType.TOUCH_START, t._onTouchStart, t, true);
        t.node.off("touch-up", t._onTouchUp, t);
        t.node.off(cc.Node.EventType.TOUCH_CANCEL, t._onTouchCancelled, t, true);
        t.node.off("scroll-began", t._onScrollBegan, t, true);
        t.node.off("scroll-ended", t._onScrollEnded, t, true);
        t.node.off("scrolling", t._onScrolling, t, true);
        t.node.off(cc.Node.EventType.SIZE_CHANGED, t._onSizeChanged, t);
      };
      List.prototype._init = function() {
        var t = this;
        if (t._inited) return;
        t._scrollView = t.node.getComponent(cc.ScrollView);
        t.content = t._scrollView.content;
        if (!t.content) {
          cc.error(t.node.name + "'s cc.ScrollView unset content!");
          return;
        }
        t._layout = t.content.getComponent(cc.Layout);
        t._align = t._layout.type;
        t._resizeMode = t._layout.resizeMode;
        t._startAxis = t._layout.startAxis;
        t._topGap = t._layout.paddingTop;
        t._rightGap = t._layout.paddingRight;
        t._bottomGap = t._layout.paddingBottom;
        t._leftGap = t._layout.paddingLeft;
        t._columnGap = t._layout.spacingX;
        t._lineGap = t._layout.spacingY;
        t._colLineNum;
        t._verticalDir = t._layout.verticalDirection;
        t._horizontalDir = t._layout.horizontalDirection;
        t.setTemplateItem(cc.instantiate(t.templateType == TemplateType.PREFAB ? t.tmpPrefab : t.tmpNode));
        if (t._slideMode == SlideType.ADHERING || t._slideMode == SlideType.PAGE) {
          t._scrollView.inertia = false;
          t._scrollView._onMouseWheel = function() {
            return;
          };
        }
        t.virtual || (t.lackCenter = false);
        t._lastDisplayData = [];
        t.displayData = [];
        t._pool = new cc.NodePool();
        t._forceUpdate = false;
        t._updateCounter = 0;
        t._updateDone = true;
        t.curPageNum = 0;
        if (t.cyclic || 0) {
          t._scrollView._processAutoScrolling = this._processAutoScrolling.bind(t);
          t._scrollView._startBounceBackIfNeeded = function() {
            return false;
          };
        }
        switch (t._align) {
         case cc.Layout.Type.HORIZONTAL:
          switch (t._horizontalDir) {
           case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT:
            t._alignCalcType = 1;
            break;

           case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT:
            t._alignCalcType = 2;
          }
          break;

         case cc.Layout.Type.VERTICAL:
          switch (t._verticalDir) {
           case cc.Layout.VerticalDirection.TOP_TO_BOTTOM:
            t._alignCalcType = 3;
            break;

           case cc.Layout.VerticalDirection.BOTTOM_TO_TOP:
            t._alignCalcType = 4;
          }
          break;

         case cc.Layout.Type.GRID:
          switch (t._startAxis) {
           case cc.Layout.AxisDirection.HORIZONTAL:
            switch (t._verticalDir) {
             case cc.Layout.VerticalDirection.TOP_TO_BOTTOM:
              t._alignCalcType = 3;
              break;

             case cc.Layout.VerticalDirection.BOTTOM_TO_TOP:
              t._alignCalcType = 4;
            }
            break;

           case cc.Layout.AxisDirection.VERTICAL:
            switch (t._horizontalDir) {
             case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT:
              t._alignCalcType = 1;
              break;

             case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT:
              t._alignCalcType = 2;
            }
          }
        }
        t.content.removeAllChildren();
        t._inited = true;
      };
      List.prototype._processAutoScrolling = function(dt) {
        var brakingFactor = 1;
        this._scrollView["_autoScrollAccumulatedTime"] += dt * (1 / brakingFactor);
        var percentage = Math.min(1, this._scrollView["_autoScrollAccumulatedTime"] / this._scrollView["_autoScrollTotalTime"]);
        if (this._scrollView["_autoScrollAttenuate"]) {
          var time = percentage - 1;
          percentage = time * time * time * time * time + 1;
        }
        var newPosition = this._scrollView["_autoScrollStartPosition"].add(this._scrollView["_autoScrollTargetDelta"].mul(percentage));
        var EPSILON = this._scrollView["getScrollEndedEventTiming"]();
        var reachedEnd = Math.abs(percentage - 1) <= EPSILON;
        var fireEvent = Math.abs(percentage - 1) <= this._scrollView["getScrollEndedEventTiming"]();
        if (fireEvent && !this._scrollView["_isScrollEndedWithThresholdEventFired"]) {
          this._scrollView["_dispatchEvent"]("scroll-ended-with-threshold");
          this._scrollView["_isScrollEndedWithThresholdEventFired"] = true;
        }
        reachedEnd && (this._scrollView["_autoScrolling"] = false);
        var deltaMove = newPosition.sub(this._scrollView.getContentPosition());
        this._scrollView["_moveContent"](this._scrollView["_clampDelta"](deltaMove), reachedEnd);
        this._scrollView["_dispatchEvent"]("scrolling");
        if (!this._scrollView["_autoScrolling"]) {
          this._scrollView["_isBouncing"] = false;
          this._scrollView["_scrolling"] = false;
          this._scrollView["_dispatchEvent"]("scroll-ended");
        }
      };
      List.prototype.setTemplateItem = function(item) {
        if (!item) return;
        var t = this;
        t._itemTmp = item;
        t._resizeMode == cc.Layout.ResizeMode.CHILDREN ? t._itemSize = t._layout.cellSize : t._itemSize = cc.size(item.width, item.height);
        var com = item.getComponent(ListItem_1.default);
        var remove = false;
        com || (remove = true);
        remove && (t.selectedMode = SelectedType.NONE);
        com = item.getComponent(cc.Widget);
        com && com.enabled && (t._needUpdateWidget = true);
        t.selectedMode == SelectedType.MULT && (t.multSelected = []);
        switch (t._align) {
         case cc.Layout.Type.HORIZONTAL:
          t._colLineNum = 1;
          t._sizeType = false;
          break;

         case cc.Layout.Type.VERTICAL:
          t._colLineNum = 1;
          t._sizeType = true;
          break;

         case cc.Layout.Type.GRID:
          switch (t._startAxis) {
           case cc.Layout.AxisDirection.HORIZONTAL:
            var trimW = t.content.width - t._leftGap - t._rightGap;
            t._colLineNum = Math.floor((trimW + t._columnGap) / (t._itemSize.width + t._columnGap));
            t._sizeType = true;
            break;

           case cc.Layout.AxisDirection.VERTICAL:
            var trimH = t.content.height - t._topGap - t._bottomGap;
            t._colLineNum = Math.floor((trimH + t._lineGap) / (t._itemSize.height + t._lineGap));
            t._sizeType = false;
          }
        }
      };
      List.prototype.checkInited = function(printLog) {
        void 0 === printLog && (printLog = true);
        if (!this._inited) {
          printLog && cc.error("List initialization not completed!");
          return false;
        }
        return true;
      };
      List.prototype._resizeContent = function() {
        var t = this;
        var result;
        switch (t._align) {
         case cc.Layout.Type.HORIZONTAL:
          if (t._customSize) {
            var fixed = t._getFixedSize(null);
            result = t._leftGap + fixed.val + t._itemSize.width * (t._numItems - fixed.count) + t._columnGap * (t._numItems - 1) + t._rightGap;
          } else result = t._leftGap + t._itemSize.width * t._numItems + t._columnGap * (t._numItems - 1) + t._rightGap;
          break;

         case cc.Layout.Type.VERTICAL:
          if (t._customSize) {
            var fixed = t._getFixedSize(null);
            result = t._topGap + fixed.val + t._itemSize.height * (t._numItems - fixed.count) + t._lineGap * (t._numItems - 1) + t._bottomGap;
          } else result = t._topGap + t._itemSize.height * t._numItems + t._lineGap * (t._numItems - 1) + t._bottomGap;
          break;

         case cc.Layout.Type.GRID:
          t.lackCenter && (t.lackCenter = false);
          switch (t._startAxis) {
           case cc.Layout.AxisDirection.HORIZONTAL:
            var lineNum = Math.ceil(t._numItems / t._colLineNum);
            result = t._topGap + t._itemSize.height * lineNum + t._lineGap * (lineNum - 1) + t._bottomGap;
            break;

           case cc.Layout.AxisDirection.VERTICAL:
            var colNum = Math.ceil(t._numItems / t._colLineNum);
            result = t._leftGap + t._itemSize.width * colNum + t._columnGap * (colNum - 1) + t._rightGap;
          }
        }
        var layout = t.content.getComponent(cc.Layout);
        layout && (layout.enabled = false);
        t._allItemSize = result;
        t._allItemSizeNoEdge = t._allItemSize - (t._sizeType ? t._topGap + t._bottomGap : t._leftGap + t._rightGap);
        if (t.cyclic) {
          var totalSize = t._sizeType ? t.node.height : t.node.width;
          t._cyclicPos1 = 0;
          totalSize -= t._cyclicPos1;
          t._cyclicNum = Math.ceil(totalSize / t._allItemSizeNoEdge) + 1;
          var spacing = t._sizeType ? t._lineGap : t._columnGap;
          t._cyclicPos2 = t._cyclicPos1 + t._allItemSizeNoEdge + spacing;
          t._cyclicAllItemSize = t._allItemSize + t._allItemSizeNoEdge * (t._cyclicNum - 1) + spacing * (t._cyclicNum - 1);
          t._cycilcAllItemSizeNoEdge = t._allItemSizeNoEdge * t._cyclicNum;
          t._cycilcAllItemSizeNoEdge += spacing * (t._cyclicNum - 1);
        }
        t._lack = !t.cyclic && t._allItemSize < (t._sizeType ? t.node.height : t.node.width);
        var slideOffset = t._lack && t.lackCenter || !t.lackSlide ? .1 : 0;
        var targetWH = t._lack ? (t._sizeType ? t.node.height : t.node.width) - slideOffset : t.cyclic ? t._cyclicAllItemSize : t._allItemSize;
        targetWH < 0 && (targetWH = 0);
        t._sizeType ? t.content.height = targetWH : t.content.width = targetWH;
      };
      List.prototype._onScrolling = function(ev) {
        void 0 === ev && (ev = null);
        null == this.frameCount && (this.frameCount = this._updateRate);
        if (!this._forceUpdate && ev && "scroll-ended" != ev.type && this.frameCount > 0) {
          this.frameCount--;
          return;
        }
        this.frameCount = this._updateRate;
        if (this._aniDelRuning) return;
        if (this.cyclic) {
          var scrollPos = this.content.getPosition();
          scrollPos = this._sizeType ? scrollPos.y : scrollPos.x;
          var addVal = this._allItemSizeNoEdge + (this._sizeType ? this._lineGap : this._columnGap);
          var add = this._sizeType ? cc.v2(0, addVal) : cc.v2(addVal, 0);
          switch (this._alignCalcType) {
           case 1:
            if (scrollPos > -this._cyclicPos1) {
              this.content.x = -this._cyclicPos2;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].sub(add));
            } else if (scrollPos < -this._cyclicPos2) {
              this.content.x = -this._cyclicPos1;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].add(add));
            }
            break;

           case 2:
            if (scrollPos < this._cyclicPos1) {
              this.content.x = this._cyclicPos2;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].add(add));
            } else if (scrollPos > this._cyclicPos2) {
              this.content.x = this._cyclicPos1;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].sub(add));
            }
            break;

           case 3:
            if (scrollPos < this._cyclicPos1) {
              this.content.y = this._cyclicPos2;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].add(add));
            } else if (scrollPos > this._cyclicPos2) {
              this.content.y = this._cyclicPos1;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].sub(add));
            }
            break;

           case 4:
            if (scrollPos > -this._cyclicPos1) {
              this.content.y = -this._cyclicPos2;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].sub(add));
            } else if (scrollPos < -this._cyclicPos2) {
              this.content.y = -this._cyclicPos1;
              this._scrollView.isAutoScrolling() && (this._scrollView["_autoScrollStartPosition"] = this._scrollView["_autoScrollStartPosition"].add(add));
            }
          }
        }
        this._calcViewPos();
        var vTop, vRight, vBottom, vLeft;
        if (this._sizeType) {
          vTop = this.viewTop;
          vBottom = this.viewBottom;
        } else {
          vRight = this.viewRight;
          vLeft = this.viewLeft;
        }
        if (this._virtual) {
          this.displayData = [];
          var itemPos = void 0;
          var curId = 0;
          var endId = this._numItems - 1;
          if (this._customSize) {
            var breakFor = false;
            for (;curId <= endId && !breakFor; curId++) {
              itemPos = this._calcItemPos(curId);
              switch (this._align) {
               case cc.Layout.Type.HORIZONTAL:
                itemPos.right >= vLeft && itemPos.left <= vRight ? this.displayData.push(itemPos) : 0 != curId && this.displayData.length > 0 && (breakFor = true);
                break;

               case cc.Layout.Type.VERTICAL:
                itemPos.bottom <= vTop && itemPos.top >= vBottom ? this.displayData.push(itemPos) : 0 != curId && this.displayData.length > 0 && (breakFor = true);
                break;

               case cc.Layout.Type.GRID:
                switch (this._startAxis) {
                 case cc.Layout.AxisDirection.HORIZONTAL:
                  itemPos.bottom <= vTop && itemPos.top >= vBottom ? this.displayData.push(itemPos) : 0 != curId && this.displayData.length > 0 && (breakFor = true);
                  break;

                 case cc.Layout.AxisDirection.VERTICAL:
                  itemPos.right >= vLeft && itemPos.left <= vRight ? this.displayData.push(itemPos) : 0 != curId && this.displayData.length > 0 && (breakFor = true);
                }
              }
            }
          } else {
            var ww = this._itemSize.width + this._columnGap;
            var hh = this._itemSize.height + this._lineGap;
            switch (this._alignCalcType) {
             case 1:
              curId = (vLeft + this._leftGap) / ww;
              endId = (vRight + this._rightGap) / ww;
              break;

             case 2:
              curId = (-vRight - this._rightGap) / ww;
              endId = (-vLeft - this._leftGap) / ww;
              break;

             case 3:
              curId = (-vTop - this._topGap) / hh;
              endId = (-vBottom - this._bottomGap) / hh;
              break;

             case 4:
              curId = (vBottom + this._bottomGap) / hh;
              endId = (vTop + this._topGap) / hh;
            }
            curId = Math.floor(curId) * this._colLineNum;
            endId = Math.ceil(endId) * this._colLineNum;
            endId--;
            curId < 0 && (curId = 0);
            endId >= this._numItems && (endId = this._numItems - 1);
            for (;curId <= endId; curId++) this.displayData.push(this._calcItemPos(curId));
          }
          this._delRedundantItem();
          if (this.displayData.length <= 0 || !this._numItems) {
            this._lastDisplayData = [];
            return;
          }
          this.firstListId = this.displayData[0].id;
          this.displayItemNum = this.displayData.length;
          var len = this._lastDisplayData.length;
          var haveDataChange = this.displayItemNum != len;
          if (haveDataChange) {
            this.frameByFrameRenderNum > 0 && this._lastDisplayData.sort(function(a, b) {
              return a - b;
            });
            haveDataChange = this.firstListId != this._lastDisplayData[0] || this.displayData[this.displayItemNum - 1].id != this._lastDisplayData[len - 1];
          }
          if (this._forceUpdate || haveDataChange) if (this.frameByFrameRenderNum > 0) if (this._numItems > 0) {
            this._updateDone ? this._updateCounter = 0 : this._doneAfterUpdate = true;
            this._updateDone = false;
          } else {
            this._updateCounter = 0;
            this._updateDone = true;
          } else {
            this._lastDisplayData = [];
            for (var c = 0; c < this.displayItemNum; c++) this._createOrUpdateItem(this.displayData[c]);
            this._forceUpdate = false;
          }
          this._calcNearestItem();
        }
      };
      List.prototype._calcViewPos = function() {
        var scrollPos = this.content.getPosition();
        switch (this._alignCalcType) {
         case 1:
          this.elasticLeft = scrollPos.x > 0 ? scrollPos.x : 0;
          this.viewLeft = (scrollPos.x < 0 ? -scrollPos.x : 0) - this.elasticLeft;
          this.viewRight = this.viewLeft + this.node.width;
          this.elasticRight = this.viewRight > this.content.width ? Math.abs(this.viewRight - this.content.width) : 0;
          this.viewRight += this.elasticRight;
          break;

         case 2:
          this.elasticRight = scrollPos.x < 0 ? -scrollPos.x : 0;
          this.viewRight = (scrollPos.x > 0 ? -scrollPos.x : 0) + this.elasticRight;
          this.viewLeft = this.viewRight - this.node.width;
          this.elasticLeft = this.viewLeft < -this.content.width ? Math.abs(this.viewLeft + this.content.width) : 0;
          this.viewLeft -= this.elasticLeft;
          break;

         case 3:
          this.elasticTop = scrollPos.y < 0 ? Math.abs(scrollPos.y) : 0;
          this.viewTop = (scrollPos.y > 0 ? -scrollPos.y : 0) + this.elasticTop;
          this.viewBottom = this.viewTop - this.node.height;
          this.elasticBottom = this.viewBottom < -this.content.height ? Math.abs(this.viewBottom + this.content.height) : 0;
          this.viewBottom += this.elasticBottom;
          break;

         case 4:
          this.elasticBottom = scrollPos.y > 0 ? Math.abs(scrollPos.y) : 0;
          this.viewBottom = (scrollPos.y < 0 ? -scrollPos.y : 0) - this.elasticBottom;
          this.viewTop = this.viewBottom + this.node.height;
          this.elasticTop = this.viewTop > this.content.height ? Math.abs(this.viewTop - this.content.height) : 0;
          this.viewTop -= this.elasticTop;
        }
      };
      List.prototype._calcItemPos = function(id) {
        var width, height, top, bottom, left, right, itemX, itemY;
        switch (this._align) {
         case cc.Layout.Type.HORIZONTAL:
          switch (this._horizontalDir) {
           case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT:
            if (this._customSize) {
              var fixed = this._getFixedSize(id);
              left = this._leftGap + (this._itemSize.width + this._columnGap) * (id - fixed.count) + (fixed.val + this._columnGap * fixed.count);
              var cs = this._customSize[id];
              width = cs > 0 ? cs : this._itemSize.width;
            } else {
              left = this._leftGap + (this._itemSize.width + this._columnGap) * id;
              width = this._itemSize.width;
            }
            right = left + width;
            if (this.lackCenter) {
              var offset = this.content.width / 2 - this._allItemSizeNoEdge / 2;
              left += offset;
              right += offset;
            }
            return {
              id: id,
              left: left,
              right: right,
              x: left + this._itemTmp.anchorX * width,
              y: this._itemTmp.y
            };

           case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT:
            if (this._customSize) {
              var fixed = this._getFixedSize(id);
              right = -this._rightGap - (this._itemSize.width + this._columnGap) * (id - fixed.count) - (fixed.val + this._columnGap * fixed.count);
              var cs = this._customSize[id];
              width = cs > 0 ? cs : this._itemSize.width;
            } else {
              right = -this._rightGap - (this._itemSize.width + this._columnGap) * id;
              width = this._itemSize.width;
            }
            left = right - width;
            if (this.lackCenter) {
              var offset = this.content.width / 2 - this._allItemSizeNoEdge / 2;
              left -= offset;
              right -= offset;
            }
            return {
              id: id,
              right: right,
              left: left,
              x: left + this._itemTmp.anchorX * width,
              y: this._itemTmp.y
            };
          }
          break;

         case cc.Layout.Type.VERTICAL:
          switch (this._verticalDir) {
           case cc.Layout.VerticalDirection.TOP_TO_BOTTOM:
            if (this._customSize) {
              var fixed = this._getFixedSize(id);
              top = -this._topGap - (this._itemSize.height + this._lineGap) * (id - fixed.count) - (fixed.val + this._lineGap * fixed.count);
              var cs = this._customSize[id];
              height = cs > 0 ? cs : this._itemSize.height;
            } else {
              top = -this._topGap - (this._itemSize.height + this._lineGap) * id;
              height = this._itemSize.height;
            }
            bottom = top - height;
            if (this.lackCenter) {
              var offset = this.content.height / 2 - this._allItemSizeNoEdge / 2;
              top -= offset;
              bottom -= offset;
            }
            return {
              id: id,
              top: top,
              bottom: bottom,
              x: this._itemTmp.x,
              y: bottom + this._itemTmp.anchorY * height
            };

           case cc.Layout.VerticalDirection.BOTTOM_TO_TOP:
            if (this._customSize) {
              var fixed = this._getFixedSize(id);
              bottom = this._bottomGap + (this._itemSize.height + this._lineGap) * (id - fixed.count) + (fixed.val + this._lineGap * fixed.count);
              var cs = this._customSize[id];
              height = cs > 0 ? cs : this._itemSize.height;
            } else {
              bottom = this._bottomGap + (this._itemSize.height + this._lineGap) * id;
              height = this._itemSize.height;
            }
            top = bottom + height;
            if (this.lackCenter) {
              var offset = this.content.height / 2 - this._allItemSizeNoEdge / 2;
              top += offset;
              bottom += offset;
            }
            return {
              id: id,
              top: top,
              bottom: bottom,
              x: this._itemTmp.x,
              y: bottom + this._itemTmp.anchorY * height
            };
          }

         case cc.Layout.Type.GRID:
          var colLine = Math.floor(id / this._colLineNum);
          switch (this._startAxis) {
           case cc.Layout.AxisDirection.HORIZONTAL:
            switch (this._verticalDir) {
             case cc.Layout.VerticalDirection.TOP_TO_BOTTOM:
              top = -this._topGap - (this._itemSize.height + this._lineGap) * colLine;
              bottom = top - this._itemSize.height;
              itemY = bottom + this._itemTmp.anchorY * this._itemSize.height;
              break;

             case cc.Layout.VerticalDirection.BOTTOM_TO_TOP:
              bottom = this._bottomGap + (this._itemSize.height + this._lineGap) * colLine;
              top = bottom + this._itemSize.height;
              itemY = bottom + this._itemTmp.anchorY * this._itemSize.height;
            }
            itemX = this._leftGap + id % this._colLineNum * (this._itemSize.width + this._columnGap);
            switch (this._horizontalDir) {
             case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT:
              itemX += this._itemTmp.anchorX * this._itemSize.width;
              itemX -= this.content.anchorX * this.content.width;
              break;

             case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT:
              itemX += (1 - this._itemTmp.anchorX) * this._itemSize.width;
              itemX -= (1 - this.content.anchorX) * this.content.width;
              itemX *= -1;
            }
            return {
              id: id,
              top: top,
              bottom: bottom,
              x: itemX,
              y: itemY
            };

           case cc.Layout.AxisDirection.VERTICAL:
            switch (this._horizontalDir) {
             case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT:
              left = this._leftGap + (this._itemSize.width + this._columnGap) * colLine;
              right = left + this._itemSize.width;
              itemX = left + this._itemTmp.anchorX * this._itemSize.width;
              itemX -= this.content.anchorX * this.content.width;
              break;

             case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT:
              right = -this._rightGap - (this._itemSize.width + this._columnGap) * colLine;
              left = right - this._itemSize.width;
              itemX = left + this._itemTmp.anchorX * this._itemSize.width;
              itemX += (1 - this.content.anchorX) * this.content.width;
            }
            itemY = -this._topGap - id % this._colLineNum * (this._itemSize.height + this._lineGap);
            switch (this._verticalDir) {
             case cc.Layout.VerticalDirection.TOP_TO_BOTTOM:
              itemY -= (1 - this._itemTmp.anchorY) * this._itemSize.height;
              itemY += (1 - this.content.anchorY) * this.content.height;
              break;

             case cc.Layout.VerticalDirection.BOTTOM_TO_TOP:
              itemY -= this._itemTmp.anchorY * this._itemSize.height;
              itemY += this.content.anchorY * this.content.height;
              itemY *= -1;
            }
            return {
              id: id,
              left: left,
              right: right,
              x: itemX,
              y: itemY
            };
          }
        }
      };
      List.prototype._calcExistItemPos = function(id) {
        var item = this.getItemByListId(id);
        if (!item) return null;
        var data = {
          id: id,
          x: item.x,
          y: item.y
        };
        if (this._sizeType) {
          data.top = item.y + item.height * (1 - item.anchorY);
          data.bottom = item.y - item.height * item.anchorY;
        } else {
          data.left = item.x - item.width * item.anchorX;
          data.right = item.x + item.width * (1 - item.anchorX);
        }
        return data;
      };
      List.prototype.getItemPos = function(id) {
        return this._virtual ? this._calcItemPos(id) : this.frameByFrameRenderNum ? this._calcItemPos(id) : this._calcExistItemPos(id);
      };
      List.prototype._getFixedSize = function(listId) {
        if (!this._customSize) return null;
        null == listId && (listId = this._numItems);
        var fixed = 0;
        var count = 0;
        for (var id in this._customSize) if (parseInt(id) < listId) {
          fixed += this._customSize[id];
          count++;
        }
        return {
          val: fixed,
          count: count
        };
      };
      List.prototype._onScrollBegan = function() {
        this._beganPos = this._sizeType ? this.viewTop : this.viewLeft;
      };
      List.prototype._onScrollEnded = function() {
        var t = this;
        if (null != t.scrollToListId) {
          var item = t.getItemByListId(t.scrollToListId);
          t.scrollToListId = null;
          item && item.runAction(cc.sequence(cc.scaleTo(.1, 1.06), cc.scaleTo(.1, 1)));
        }
        t._onScrolling();
        t._slideMode != SlideType.ADHERING || t.adhering ? t._slideMode == SlideType.PAGE && (null != t._beganPos ? this._pageAdhere() : t.adhere()) : t.adhere();
      };
      List.prototype._onTouchStart = function(ev, captureListeners) {
        if (this._scrollView["_hasNestedViewGroup"](ev, captureListeners)) return;
        var isMe = ev.eventPhase === cc.Event.AT_TARGET && ev.target === this.node;
        if (!isMe) {
          var itemNode = ev.target;
          while (null == itemNode._listId && itemNode.parent) itemNode = itemNode.parent;
          this._scrollItem = null != itemNode._listId ? itemNode : ev.target;
        }
      };
      List.prototype._onTouchUp = function() {
        var t = this;
        t._scrollPos = null;
        if (t._slideMode == SlideType.ADHERING) {
          this.adhering && (this._adheringBarrier = true);
          t.adhere();
        } else t._slideMode == SlideType.PAGE && (null != t._beganPos ? this._pageAdhere() : t.adhere());
        this._scrollItem = null;
      };
      List.prototype._onTouchCancelled = function(ev, captureListeners) {
        var t = this;
        if (t._scrollView["_hasNestedViewGroup"](ev, captureListeners) || ev.simulate) return;
        t._scrollPos = null;
        if (t._slideMode == SlideType.ADHERING) {
          t.adhering && (t._adheringBarrier = true);
          t.adhere();
        } else t._slideMode == SlideType.PAGE && (null != t._beganPos ? t._pageAdhere() : t.adhere());
        this._scrollItem = null;
      };
      List.prototype._onSizeChanged = function() {
        this.checkInited(false) && this._onScrolling();
      };
      List.prototype._onItemAdaptive = function(item) {
        if (!this._sizeType && item.width != this._itemSize.width || this._sizeType && item.height != this._itemSize.height) {
          this._customSize || (this._customSize = {});
          var val = this._sizeType ? item.height : item.width;
          if (this._customSize[item._listId] != val) {
            this._customSize[item._listId] = val;
            this._resizeContent();
            this.updateAll();
            if (null != this._scrollToListId) {
              this._scrollPos = null;
              this.unschedule(this._scrollToSo);
              this.scrollTo(this._scrollToListId, Math.max(0, this._scrollToEndTime - new Date().getTime() / 1e3));
            }
          }
        }
      };
      List.prototype._pageAdhere = function() {
        var t = this;
        if (!t.cyclic && (t.elasticTop > 0 || t.elasticRight > 0 || t.elasticBottom > 0 || t.elasticLeft > 0)) return;
        var curPos = t._sizeType ? t.viewTop : t.viewLeft;
        var dis = (t._sizeType ? t.node.height : t.node.width) * t.pageDistance;
        var canSkip = Math.abs(t._beganPos - curPos) > dis;
        if (canSkip) {
          var timeInSecond = .5;
          switch (t._alignCalcType) {
           case 1:
           case 4:
            t._beganPos > curPos ? t.prePage(timeInSecond) : t.nextPage(timeInSecond);
            break;

           case 2:
           case 3:
            t._beganPos < curPos ? t.prePage(timeInSecond) : t.nextPage(timeInSecond);
          }
        } else t.elasticTop <= 0 && t.elasticRight <= 0 && t.elasticBottom <= 0 && t.elasticLeft <= 0 && t.adhere();
        t._beganPos = null;
      };
      List.prototype.adhere = function() {
        var t = this;
        if (!t.checkInited()) return;
        if (t.elasticTop > 0 || t.elasticRight > 0 || t.elasticBottom > 0 || t.elasticLeft > 0) return;
        t.adhering = true;
        t._calcNearestItem();
        var offset = (t._sizeType ? t._topGap : t._leftGap) / (t._sizeType ? t.node.height : t.node.width);
        var timeInSecond = .7;
        t.scrollTo(t.nearestListId, timeInSecond, offset);
      };
      List.prototype.update = function() {
        if (this.frameByFrameRenderNum <= 0 || this._updateDone) return;
        if (this._virtual) {
          var len = this._updateCounter + this.frameByFrameRenderNum > this.displayItemNum ? this.displayItemNum : this._updateCounter + this.frameByFrameRenderNum;
          for (var n = this._updateCounter; n < len; n++) {
            var data = this.displayData[n];
            data && this._createOrUpdateItem(data);
          }
          if (this._updateCounter >= this.displayItemNum - 1) if (this._doneAfterUpdate) {
            this._updateCounter = 0;
            this._updateDone = false;
            this._doneAfterUpdate = false;
          } else {
            this._updateDone = true;
            this._delRedundantItem();
            this._forceUpdate = false;
            this._calcNearestItem();
            this.slideMode == SlideType.PAGE && (this.curPageNum = this.nearestListId);
          } else this._updateCounter += this.frameByFrameRenderNum;
        } else if (this._updateCounter < this._numItems) {
          var len = this._updateCounter + this.frameByFrameRenderNum > this._numItems ? this._numItems : this._updateCounter + this.frameByFrameRenderNum;
          for (var n = this._updateCounter; n < len; n++) this._createOrUpdateItem2(n);
          this._updateCounter += this.frameByFrameRenderNum;
        } else {
          this._updateDone = true;
          this._calcNearestItem();
          this.slideMode == SlideType.PAGE && (this.curPageNum = this.nearestListId);
        }
      };
      List.prototype._createOrUpdateItem = function(data) {
        var item = this.getItemByListId(data.id);
        if (item) {
          if (this._forceUpdate && this.renderEvent) {
            item.setPosition(cc.v2(data.x, data.y));
            this._resetItemSize(item);
            this.renderEvent && cc.Component.EventHandler.emitEvents([ this.renderEvent ], item, data.id % this._actualNumItems);
            this.renderCallback && this.renderCallback(item, data.id % this._actualNumItems);
          }
        } else {
          var canGet = this._pool.size() > 0;
          item = canGet ? this._pool.get() : cc.instantiate(this._itemTmp);
          if (item._listId != data.id) {
            item._listId = data.id;
            item.setContentSize(this._itemSize);
          }
          item.setPosition(cc.v2(data.x, data.y));
          this._resetItemSize(item);
          this.content.addChild(item);
          if (canGet && this._needUpdateWidget) {
            var widget = item.getComponent(cc.Widget);
            widget && widget.updateAlignment();
          }
          item.setSiblingIndex(this.content.childrenCount - 1);
          var listItem = item.getComponent(ListItem_1.default);
          item["listItem"] = listItem;
          if (listItem) {
            listItem.listId = data.id;
            listItem.list = this;
            listItem._registerEvent();
          }
          this.renderEvent && cc.Component.EventHandler.emitEvents([ this.renderEvent ], item, data.id % this._actualNumItems);
          this.renderCallback && this.renderCallback(item, data.id % this._actualNumItems);
        }
        this._resetItemSize(item);
        this._updateListItem(item["listItem"]);
        this._lastDisplayData.indexOf(data.id) < 0 && this._lastDisplayData.push(data.id);
      };
      List.prototype._createOrUpdateItem2 = function(listId) {
        var item = this.content.children[listId];
        var listItem;
        if (item) {
          if (this._forceUpdate && this.renderEvent) {
            item._listId = listId;
            listItem && (listItem.listId = listId);
            this.renderEvent && cc.Component.EventHandler.emitEvents([ this.renderEvent ], item, listId);
            this.renderCallback && this.renderCallback(item, listId);
          }
        } else {
          item = cc.instantiate(this._itemTmp);
          item._listId = listId;
          this.content.addChild(item);
          listItem = item.getComponent(ListItem_1.default);
          item["listItem"] = listItem;
          if (listItem) {
            listItem.listId = listId;
            listItem.list = this;
            listItem._registerEvent();
          }
          this.renderEvent && cc.Component.EventHandler.emitEvents([ this.renderEvent ], item, listId);
          this.renderCallback && this.renderCallback(item, listId);
        }
        this._updateListItem(listItem);
        this._lastDisplayData.indexOf(listId) < 0 && this._lastDisplayData.push(listId);
      };
      List.prototype._updateListItem = function(listItem) {
        if (!listItem) return;
        if (this.selectedMode > SelectedType.NONE) {
          var item = listItem.node;
          switch (this.selectedMode) {
           case SelectedType.SINGLE:
            listItem.selected = this.selectedId == item._listId;
            break;

           case SelectedType.MULT:
            listItem.selected = this.multSelected.indexOf(item._listId) >= 0;
          }
        }
      };
      List.prototype._resetItemSize = function(item) {
        return;
        var size;
      };
      List.prototype._updateItemPos = function(listIdOrItem) {
        var item = isNaN(listIdOrItem) ? listIdOrItem : this.getItemByListId(listIdOrItem);
        var pos = this.getItemPos(item._listId);
        item.setPosition(pos.x, pos.y);
      };
      List.prototype.setMultSelected = function(args, bool) {
        var t = this;
        if (!t.checkInited()) return;
        Array.isArray(args) || (args = [ args ]);
        if (null == bool) t.multSelected = args; else {
          var listId = void 0, sub = void 0;
          if (bool) for (var n = args.length - 1; n >= 0; n--) {
            listId = args[n];
            sub = t.multSelected.indexOf(listId);
            sub < 0 && t.multSelected.push(listId);
          } else for (var n = args.length - 1; n >= 0; n--) {
            listId = args[n];
            sub = t.multSelected.indexOf(listId);
            sub >= 0 && t.multSelected.splice(sub, 1);
          }
        }
        t._forceUpdate = true;
        t._onScrolling();
      };
      List.prototype.updateItem = function(args) {
        if (!this.checkInited()) return;
        Array.isArray(args) || (args = [ args ]);
        for (var n = 0, len = args.length; n < len; n++) {
          var listId = args[n];
          var item = this.getItemByListId(listId);
          if (item) {
            this.renderEvent && cc.Component.EventHandler.emitEvents([ this.renderEvent ], item, listId % this._actualNumItems);
            this.renderCallback && this.renderCallback(item, listId % this._actualNumItems);
          }
        }
      };
      List.prototype.updateAll = function() {
        if (!this.checkInited()) return;
        this.numItems = this.numItems;
      };
      List.prototype.getItemByListId = function(listId) {
        for (var n = this.content.childrenCount - 1; n >= 0; n--) {
          var item = this.content.children[n];
          if (item._listId == listId) return item;
        }
      };
      List.prototype._getOutsideItem = function() {
        var item;
        var result = [];
        for (var n = this.content.childrenCount - 1; n >= 0; n--) {
          item = this.content.children[n];
          this.displayData.find(function(d) {
            return d.id == item._listId;
          }) || result.push(item);
        }
        return result;
      };
      List.prototype._delRedundantItem = function() {
        if (this._virtual) {
          var arr = this._getOutsideItem();
          for (var n = arr.length - 1; n >= 0; n--) {
            var item = arr[n];
            if (this._scrollItem && item._listId == this._scrollItem._listId) continue;
            this.resetCallback && this.resetCallback(item);
            this._pool.put(item);
            for (var m = this._lastDisplayData.length - 1; m >= 0; m--) if (this._lastDisplayData[m] == item._listId) {
              this._lastDisplayData.splice(m, 1);
              break;
            }
          }
        } else while (this.content.childrenCount > this._numItems) this._delSingleItem(this.content.children[this.content.childrenCount - 1]);
      };
      List.prototype._delSingleItem = function(item) {
        item.removeFromParent();
        item.destroy && item.destroy();
        item = null;
      };
      List.prototype.aniDelItem = function(listId, callFunc, aniType) {
        var t = this;
        if (!t.checkInited() || t.cyclic || !t._virtual) return cc.error("This function is not allowed to be called!");
        if (t._aniDelRuning) return cc.warn("Please wait for the current deletion to finish!");
        var item = t.getItemByListId(listId);
        var listItem;
        if (!item) {
          callFunc(listId);
          return;
        }
        listItem = item.getComponent(ListItem_1.default);
        t._aniDelRuning = true;
        var curLastId = t.displayData[t.displayData.length - 1].id;
        var resetSelectedId = listItem.selected;
        listItem.showAni(aniType, function() {
          var newId;
          curLastId < t._numItems - 2 && (newId = curLastId + 1);
          if (null != newId) {
            var newData = t._calcItemPos(newId);
            t.displayData.push(newData);
            t._virtual ? t._createOrUpdateItem(newData) : t._createOrUpdateItem2(newId);
          } else t._numItems--;
          if (t.selectedMode == SelectedType.SINGLE) resetSelectedId ? t._selectedId = -1 : t._selectedId - 1 >= 0 && t._selectedId--; else if (t.selectedMode == SelectedType.MULT && t.multSelected.length) {
            var sub = t.multSelected.indexOf(listId);
            sub >= 0 && t.multSelected.splice(sub, 1);
            for (var n = t.multSelected.length - 1; n >= 0; n--) {
              var id = t.multSelected[n];
              id >= listId && t.multSelected[n]--;
            }
          }
          if (t._customSize) {
            t._customSize[listId] && delete t._customSize[listId];
            var newCustomSize = {};
            var size = void 0;
            for (var id in t._customSize) {
              size = t._customSize[id];
              var idNumber = parseInt(id);
              newCustomSize[idNumber - (idNumber >= listId ? 1 : 0)] = size;
            }
            t._customSize = newCustomSize;
          }
          var sec = .2333;
          var acts, haveCB;
          for (var n = null != newId ? newId : curLastId; n >= listId + 1; n--) {
            item = t.getItemByListId(n);
            if (item) {
              var posData = t._calcItemPos(n - 1);
              acts = [ cc.moveTo(sec, cc.v2(posData.x, posData.y)) ];
              if (n <= listId + 1) {
                haveCB = true;
                acts.push(cc.callFunc(function() {
                  t._aniDelRuning = false;
                  callFunc(listId);
                }));
              }
              acts.length > 1 ? item.runAction(cc.sequence(acts)) : item.runAction(acts[0]);
            }
          }
          if (!haveCB) {
            t._aniDelRuning = false;
            callFunc(listId);
          }
        }, true);
      };
      List.prototype.scrollTo = function(listId, timeInSecond, offset, overStress) {
        void 0 === timeInSecond && (timeInSecond = .5);
        void 0 === offset && (offset = null);
        void 0 === overStress && (overStress = false);
        var t = this;
        if (!t.checkInited(false)) return;
        null == timeInSecond ? timeInSecond = .5 : timeInSecond < 0 && (timeInSecond = 0);
        listId < 0 ? listId = 0 : listId >= t._numItems && (listId = t._numItems - 1);
        !t._virtual && t._layout && t._layout.enabled && t._layout.updateLayout();
        var pos = t.getItemPos(listId);
        var targetX, targetY;
        switch (t._alignCalcType) {
         case 1:
          targetX = pos.left;
          targetX -= null != offset ? t.node.width * offset : t._leftGap;
          pos = cc.v2(targetX, 0);
          break;

         case 2:
          targetX = pos.right - t.node.width;
          targetX += null != offset ? t.node.width * offset : t._rightGap;
          pos = cc.v2(targetX + t.content.width, 0);
          break;

         case 3:
          targetY = pos.top;
          targetY += null != offset ? t.node.height * offset : t._topGap;
          pos = cc.v2(0, -targetY);
          break;

         case 4:
          targetY = pos.bottom + t.node.height;
          targetY -= null != offset ? t.node.height * offset : t._bottomGap;
          pos = cc.v2(0, -targetY + t.content.height);
        }
        var viewPos = t.content.getPosition();
        viewPos = Math.abs(t._sizeType ? viewPos.y : viewPos.x);
        var comparePos = t._sizeType ? pos.y : pos.x;
        var runScroll = Math.abs((null != t._scrollPos ? t._scrollPos : viewPos) - comparePos) > .5;
        if (runScroll) {
          t._scrollView.scrollToOffset(pos, timeInSecond);
          t._scrollToListId = listId;
          t._scrollToEndTime = new Date().getTime() / 1e3 + timeInSecond;
          t._scrollToSo = t.scheduleOnce(function() {
            t._adheringBarrier || (t.adhering = t._adheringBarrier = false);
            t._scrollPos = t._scrollToListId = t._scrollToEndTime = t._scrollToSo = null;
            if (overStress) {
              var item = t.getItemByListId(listId);
              item && item.runAction(cc.sequence(cc.scaleTo(.1, 1.05), cc.scaleTo(.1, 1)));
            }
          }, timeInSecond + .1);
          timeInSecond <= 0 && t._onScrolling();
        }
      };
      List.prototype._calcNearestItem = function() {
        var t = this;
        t.nearestListId = null;
        var data, center;
        t._virtual && t._calcViewPos();
        var vTop, vRight, vBottom, vLeft;
        vTop = t.viewTop;
        vRight = t.viewRight;
        vBottom = t.viewBottom;
        vLeft = t.viewLeft;
        var breakFor = false;
        for (var n = 0; n < t.content.childrenCount && !breakFor; n += t._colLineNum) {
          data = t._virtual ? t.displayData[n] : t._calcExistItemPos(n);
          if (data) {
            center = t._sizeType ? (data.top + data.bottom) / 2 : center = (data.left + data.right) / 2;
            switch (t._alignCalcType) {
             case 1:
              if (data.right >= vLeft) {
                t.nearestListId = data.id;
                vLeft > center && (t.nearestListId += t._colLineNum);
                breakFor = true;
              }
              break;

             case 2:
              if (data.left <= vRight) {
                t.nearestListId = data.id;
                vRight < center && (t.nearestListId += t._colLineNum);
                breakFor = true;
              }
              break;

             case 3:
              if (data.bottom <= vTop) {
                t.nearestListId = data.id;
                vTop < center && (t.nearestListId += t._colLineNum);
                breakFor = true;
              }
              break;

             case 4:
              if (data.top >= vBottom) {
                t.nearestListId = data.id;
                vBottom > center && (t.nearestListId += t._colLineNum);
                breakFor = true;
              }
            }
          }
        }
        data = t._virtual ? t.displayData[t.displayItemNum - 1] : t._calcExistItemPos(t._numItems - 1);
        if (data && data.id == t._numItems - 1) {
          center = t._sizeType ? (data.top + data.bottom) / 2 : center = (data.left + data.right) / 2;
          switch (t._alignCalcType) {
           case 1:
            vRight > center && (t.nearestListId = data.id);
            break;

           case 2:
            vLeft < center && (t.nearestListId = data.id);
            break;

           case 3:
            vBottom < center && (t.nearestListId = data.id);
            break;

           case 4:
            vTop > center && (t.nearestListId = data.id);
          }
        }
      };
      List.prototype.prePage = function(timeInSecond) {
        void 0 === timeInSecond && (timeInSecond = .5);
        if (!this.checkInited()) return;
        this.skipPage(this.curPageNum - 1, timeInSecond);
      };
      List.prototype.nextPage = function(timeInSecond) {
        void 0 === timeInSecond && (timeInSecond = .5);
        if (!this.checkInited()) return;
        this.skipPage(this.curPageNum + 1, timeInSecond);
      };
      List.prototype.skipPage = function(pageNum, timeInSecond) {
        var t = this;
        if (!t.checkInited()) return;
        if (t._slideMode != SlideType.PAGE) return cc.error("This function is not allowed to be called, Must SlideMode = PAGE!");
        if (pageNum < 0 || pageNum >= t._numItems) return;
        if (t.curPageNum == pageNum) return;
        t.curPageNum = pageNum;
        t.pageChangeEvent && cc.Component.EventHandler.emitEvents([ t.pageChangeEvent ], pageNum);
        t.scrollTo(pageNum, timeInSecond);
      };
      List.prototype.calcCustomSize = function(numItems) {
        var t = this;
        if (!t.checkInited()) return;
        if (!t._itemTmp) return cc.error("Unset template item!");
        if (!t.renderEvent && !t.renderCallback) return cc.error("Unset Render-Event!");
        t._customSize = {};
        var temp = cc.instantiate(t._itemTmp);
        t.content.addChild(temp);
        for (var n = 0; n < numItems; n++) {
          t.renderEvent && cc.Component.EventHandler.emitEvents([ t.renderEvent ], temp, n);
          this.renderCallback && this.renderCallback(temp, n);
          temp.height == t._itemSize.height && temp.width == t._itemSize.width || (t._customSize[n] = t._sizeType ? temp.height : temp.width);
        }
        Object.keys(t._customSize).length || (t._customSize = null);
        temp.removeFromParent();
        temp.destroy && temp.destroy();
        return t._customSize;
      };
      __decorate([ property({
        type: cc.Enum(TemplateType),
        tooltip: false
      }) ], List.prototype, "templateType", void 0);
      __decorate([ property({
        type: cc.Node,
        tooltip: false,
        visible: function() {
          return this.templateType == TemplateType.NODE;
        }
      }) ], List.prototype, "tmpNode", void 0);
      __decorate([ property({
        type: cc.Prefab,
        tooltip: false,
        visible: function() {
          return this.templateType == TemplateType.PREFAB;
        }
      }) ], List.prototype, "tmpPrefab", void 0);
      __decorate([ property() ], List.prototype, "_slideMode", void 0);
      __decorate([ property({
        type: cc.Enum(SlideType),
        tooltip: false
      }) ], List.prototype, "slideMode", null);
      __decorate([ property({
        type: cc.Float,
        range: [ 0, 1, .1 ],
        tooltip: false,
        slide: true,
        visible: function() {
          return this._slideMode == SlideType.PAGE;
        }
      }) ], List.prototype, "pageDistance", void 0);
      __decorate([ property({
        type: cc.Component.EventHandler,
        tooltip: false,
        visible: function() {
          return this._slideMode == SlideType.PAGE;
        }
      }) ], List.prototype, "pageChangeEvent", void 0);
      __decorate([ property() ], List.prototype, "_virtual", void 0);
      __decorate([ property({
        type: cc.Boolean,
        tooltip: false
      }) ], List.prototype, "virtual", null);
      __decorate([ property({
        tooltip: false,
        visible: function() {
          var val = this.virtual && this.slideMode == SlideType.NORMAL;
          val || (this.cyclic = false);
          return val;
        }
      }) ], List.prototype, "cyclic", void 0);
      __decorate([ property({
        tooltip: false,
        visible: function() {
          return this.virtual;
        }
      }) ], List.prototype, "lackCenter", void 0);
      __decorate([ property({
        tooltip: false,
        visible: function() {
          var val = this.virtual && !this.lackCenter;
          val || (this.lackSlide = false);
          return val;
        }
      }) ], List.prototype, "lackSlide", void 0);
      __decorate([ property({
        type: cc.Integer
      }) ], List.prototype, "_updateRate", void 0);
      __decorate([ property({
        type: cc.Integer,
        range: [ 0, 6, 1 ],
        tooltip: false,
        slide: true
      }) ], List.prototype, "updateRate", null);
      __decorate([ property({
        type: cc.Integer,
        range: [ 0, 12, 1 ],
        tooltip: false,
        slide: true
      }) ], List.prototype, "frameByFrameRenderNum", void 0);
      __decorate([ property({
        type: cc.Component.EventHandler,
        tooltip: false
      }) ], List.prototype, "renderEvent", void 0);
      __decorate([ property({
        type: cc.Enum(SelectedType),
        tooltip: false
      }) ], List.prototype, "selectedMode", void 0);
      __decorate([ property({
        tooltip: false,
        visible: function() {
          return this.selectedMode == SelectedType.SINGLE;
        }
      }) ], List.prototype, "repeatEventSingle", void 0);
      __decorate([ property({
        type: cc.Component.EventHandler,
        tooltip: false,
        visible: function() {
          return this.selectedMode > SelectedType.NONE;
        }
      }) ], List.prototype, "selectedEvent", void 0);
      __decorate([ property({
        serializable: false
      }) ], List.prototype, "_numItems", void 0);
      List = __decorate([ ccclass, disallowMultiple(), menu("\u81ea\u5b9a\u4e49\u7ec4\u4ef6/List"), requireComponent(cc.ScrollView), executionOrder(-5e3) ], List);
      return List;
    }(cc.Component);
    exports.default = List;
    cc._RF.pop();
  }, {
    "./ListItem": "ListItem"
  } ],
  LoadCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5adafSmr6hPPpL6RAdhKQgp", "LoadCtrl");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SceneCtrlBase_1 = require("../../../BaseFrame/BaseControl/SceneCtrlBase");
    var DataMgr_1 = require("../../../BaseFrame/BaseManager/DataMgr");
    var AppContext_1 = require("../../AppContext/AppContext");
    var GameEnums_1 = require("../../BaseModule/GameEnums");
    var PlayerData_1 = require("../../BaseModule/PlayerData");
    var LoadFSM_1 = require("./LoadFSM");
    var LoadCtrl = function(_super) {
      __extends(LoadCtrl, _super);
      function LoadCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._LoadFSM = null;
        return _this;
      }
      Object.defineProperty(LoadCtrl.prototype, "SceneName", {
        get: function() {
          return "LoadScene";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoadCtrl.prototype, "SceneScript", {
        get: function() {
          return "LoadView";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoadCtrl.prototype, "view", {
        get: function() {
          return this._ownerView;
        },
        enumerable: false,
        configurable: true
      });
      LoadCtrl.prototype.OnSceneBinded = function() {
        console.warn(this._ownerView);
        this._LoadFSM = new LoadFSM_1.default(this);
        this._LoadFSM.OnStartUpFSM();
      };
      LoadCtrl.prototype._IsFromNative = function() {
        var isTrue = false;
        var header = location.origin;
        header.indexOf("file") > -1 && (isTrue = true);
        return isTrue;
      };
      LoadCtrl.prototype.OnSceneEnd = function() {
        this._LoadFSM.EndFSM();
        this._LoadFSM.OnDestroyFSM();
      };
      LoadCtrl.prototype.SetGameData = function(recData) {
        DataMgr_1.default.Inst.SetData(GameEnums_1.DataType.PLAYER_DATA, new PlayerData_1.default(recData));
      };
      LoadCtrl.prototype.OnTick = function(dt) {
        null != this._LoadFSM && AppContext_1.default.Inst.IsConnectingState() && this._LoadFSM.OnUpdateTickFSM(dt);
      };
      return LoadCtrl;
    }(SceneCtrlBase_1.default);
    exports.default = LoadCtrl;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/BaseControl/SceneCtrlBase": "SceneCtrlBase",
    "../../../BaseFrame/BaseManager/DataMgr": "DataMgr",
    "../../AppContext/AppContext": "AppContext",
    "../../BaseModule/GameEnums": "GameEnums",
    "../../BaseModule/PlayerData": "PlayerData",
    "./LoadFSM": "LoadFSM"
  } ],
  LoadFSM: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "53fcatNzEFJWrDxlFtaJcm1", "LoadFSM");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ResLoader_1 = require("../../../BaseFrame/BaseControl/ResLoader");
    var EventMgr_1 = require("../../../BaseFrame/BaseManager/EventMgr");
    var GameMgr_1 = require("../../../BaseFrame/BaseManager/GameMgr");
    var TimerMgr_1 = require("../../../BaseFrame/BaseManager/TimerMgr");
    var UIMgr_1 = require("../../../BaseFrame/BaseManager/UIMgr");
    var AppLog_1 = require("../../../BaseFrame/Log/AppLog");
    var SimpleFSMState_1 = require("../../../BaseFrame/StateMachine/SimpleFSMState");
    var SimpleFSMSystem_1 = require("../../../BaseFrame/StateMachine/SimpleFSMSystem");
    var AppContext_1 = require("../../AppContext/AppContext");
    var Global_1 = require("../../AppContext/Global");
    var EventID_1 = require("../../BaseModule/EventID");
    var GameEnums_1 = require("../../BaseModule/GameEnums");
    var TableConfigData_1 = require("../../BaseModule/TableConfigData");
    var NetSender_1 = require("../../NetModule/NetSender");
    var UI_DoubleComDialog_1 = require("../CommonDiaglog/UI_DoubleComDialog");
    var UI_DoubleNetDialog_1 = require("../CommonDiaglog/UI_DoubleNetDialog");
    var UI_SingerComDialog_1 = require("../CommonDiaglog/UI_SingerComDialog");
    var MainCtrl_1 = require("../MainScene/MainCtrl");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LaunchState;
    (function(LaunchState) {
      LaunchState[LaunchState["START"] = 1] = "START";
      LaunchState[LaunchState["LOAD_SYSTEM_PREFAB"] = 2] = "LOAD_SYSTEM_PREFAB";
      LaunchState[LaunchState["GET_GAME_DATA"] = 3] = "GET_GAME_DATA";
      LaunchState[LaunchState["PRELOAD_SCENE"] = 4] = "PRELOAD_SCENE";
      LaunchState[LaunchState["END"] = 5] = "END";
    })(LaunchState || (LaunchState = {}));
    var mapLuanchData;
    var StartState = function(_super) {
      __extends(StartState, _super);
      function StartState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      StartState.prototype.GetUniqueID = function() {
        return LaunchState.START;
      };
      StartState.prototype.OnBeforeEntering = function() {
        var _this = this;
        this._ownerFSM.SetMaxPrecentTage(this.GetUniqueID());
        mapLuanchData = {};
        mapLuanchData[LaunchState.START] = {
          resType: cc.JsonAsset,
          urls: [ "configData/game_config" ]
        };
        mapLuanchData[LaunchState.LOAD_SYSTEM_PREFAB] = {
          resType: cc.Prefab,
          urls: [ UI_SingerComDialog_1.default.refPath, UI_DoubleComDialog_1.default.refPath ]
        };
        console.time("time+START");
        console.time("checkTime_start");
        this.nextState = null;
        this._ownerFSM.SetMaxPrecentTage(this.GetUniqueID());
        TableConfigData_1.TableConfigData.Init();
        ResLoader_1.default.LoadResource(mapLuanchData[LaunchState.START].urls, mapLuanchData[LaunchState.START].resType).then(function(asset) {
          _this.nextState = LaunchState.LOAD_SYSTEM_PREFAB;
          console.timeEnd("checkTime_start");
        }).catch(function(err) {
          AppLog_1.default.Error(err);
          _this._ownerFSM.ShowErrorDialog();
        });
        this.nextState = LaunchState.LOAD_SYSTEM_PREFAB;
      };
      StartState.prototype.OnBeforeLeaving = function() {
        console.timeEnd("time+START");
      };
      StartState.prototype.ReasonState = function(param) {
        return this.nextState;
      };
      return StartState;
    }(SimpleFSMState_1.default);
    var LoadSystemPrefabState = function(_super) {
      __extends(LoadSystemPrefabState, _super);
      function LoadSystemPrefabState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      LoadSystemPrefabState.prototype.GetUniqueID = function() {
        return LaunchState.LOAD_SYSTEM_PREFAB;
      };
      LoadSystemPrefabState.prototype.OnBeforeEntering = function() {
        var _this = this;
        console.time("LoadSystemPrefabState");
        this.nextState = null;
        this._ownerFSM.SetMaxPrecentTage(this.GetUniqueID());
        console.time("checkTime_loadSystemPrefabState");
        ResLoader_1.default.LoadResource(mapLuanchData[LaunchState.LOAD_SYSTEM_PREFAB].urls, mapLuanchData[LaunchState.LOAD_SYSTEM_PREFAB].resType).then(function(assets) {
          for (var i = 0; i < assets.length; ++i) {
            assets[i].addRef();
            ResLoader_1.default.TagAsset(assets[i], assets[i].name);
          }
          _this.nextState = LaunchState.GET_GAME_DATA;
          console.timeEnd("checkTime_loadSystemPrefabState");
        }).catch(function(err) {
          AppLog_1.default.Error(err);
          _this._ownerFSM.ShowErrorDialog();
        });
      };
      LoadSystemPrefabState.prototype.OnBeforeLeaving = function() {
        console.timeEnd("LoadSystemPrefabState");
      };
      LoadSystemPrefabState.prototype.ReasonState = function(param) {
        return this.nextState;
      };
      return LoadSystemPrefabState;
    }(SimpleFSMState_1.default);
    var GetGameDataState = function(_super) {
      __extends(GetGameDataState, _super);
      function GetGameDataState() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lastSendNetTime = 0;
        _this.retryTime = 0;
        return _this;
      }
      GetGameDataState.prototype.GetUniqueID = function() {
        return LaunchState.GET_GAME_DATA;
      };
      GetGameDataState.prototype.OnBeforeEntering = function() {
        this.nextState = null;
        this._ownerFSM.SetMaxPrecentTage(this.GetUniqueID());
        console.time("launghfsmtime+gamedata");
        AppLog_1.default.Log("AppContext.Inst.LaunchParam.webMode=", AppContext_1.default.Inst.LaunchParam.webMode);
        console.time("checkTime_getGameDataState");
        if ("SOCKET" == AppContext_1.default.Inst.LaunchParam.webMode) this._toGetGameData(); else {
          EventMgr_1.EventMgr.Inst.addEvent(EventID_1.LocMsg.GET_GAME_DATA, this._getGameData, this);
          var msgData = {
            code: 1001,
            data: {},
            remark: "\u6210\u529f"
          };
          EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.LocMsg.GET_GAME_DATA, msgData);
        }
      };
      GetGameDataState.prototype.OnBeforeLeaving = function() {
        EventMgr_1.EventMgr.Inst.removeEvent(EventID_1.LocMsg.GET_GAME_DATA, this._getGameData, this);
      };
      GetGameDataState.prototype.ReasonState = function(param) {
        if (TimerMgr_1.default.Inst.GetCurrentLocalTime() - this.lastSendNetTime > 5) if (this.retryTime > 0) this._ownerFSM.ShowNetErrorDialog(); else {
          ++this.retryTime;
          this._toGetGameData();
        }
        return this.nextState;
      };
      GetGameDataState.prototype._toGetGameData = function() {
        console.timeEnd("launghfsmtime+gamedata");
        console.timeEnd("checkTime_getGameDataState");
        this.lastSendNetTime = TimerMgr_1.default.Inst.GetCurrentLocalTime();
        if ("SOCKET" == AppContext_1.default.Inst.LaunchParam.webMode) {
          var userIdArr = [];
          if (AppContext_1.default.Inst.LaunchParam.userId == AppContext_1.default.Inst.LaunchParam.targetId) userIdArr.push(AppContext_1.default.Inst.LaunchParam.userId); else {
            userIdArr.push(AppContext_1.default.Inst.LaunchParam.userId);
            userIdArr.push(AppContext_1.default.Inst.LaunchParam.targetId);
          }
          var sdata = {
            userId: userIdArr
          };
          if (NetSender_1.default.SetNetData(EventID_1.NetSendMsgEnum.GameData, sdata)) {
            EventMgr_1.EventMgr.Inst.removeEvent(EventID_1.LocMsg.GET_GAME_DATA, this._getGameData, this);
            EventMgr_1.EventMgr.Inst.addEvent(EventID_1.LocMsg.GET_GAME_DATA, this._getGameData, this);
          } else {
            EventMgr_1.EventMgr.Inst.removeEvent(EventID_1.LocMsg.GET_GAME_DATA, this._getGameData, this);
            this.nextState = LaunchState.GET_GAME_DATA;
          }
        }
      };
      GetGameDataState.prototype._getGameData = function(recData) {
        console.timeEnd("launghfsmtime+gamedata");
        this.retryTime = 0;
        if (recData.code == GameEnums_1.ServerEC.SUCCESS) {
          this.ownerObj.SetGameData(recData.data);
          this.nextState = LaunchState.PRELOAD_SCENE;
          return;
        }
        this._ownerFSM.ShowErrorDialog();
      };
      return GetGameDataState;
    }(SimpleFSMState_1.default);
    var PreloadSceneState = function(_super) {
      __extends(PreloadSceneState, _super);
      function PreloadSceneState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      PreloadSceneState.prototype.GetUniqueID = function() {
        return LaunchState.PRELOAD_SCENE;
      };
      PreloadSceneState.prototype.OnBeforeEntering = function() {
        console.time("time+PreloadSceneState");
        console.time("checkTime_preloadSceneState");
        this.nextState = null;
        this._ownerFSM.SetMaxPrecentTage(this.GetUniqueID());
        this.nextState = LaunchState.END;
      };
      PreloadSceneState.prototype.OnBeforeLeaving = function() {
        console.timeEnd("time+PreloadSceneState");
        console.timeEnd("checkTime_preloadSceneState");
      };
      PreloadSceneState.prototype.ReasonState = function(param) {
        return this.nextState;
      };
      return PreloadSceneState;
    }(SimpleFSMState_1.default);
    var EndState = function(_super) {
      __extends(EndState, _super);
      function EndState() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      EndState.prototype.GetUniqueID = function() {
        return LaunchState.END;
      };
      EndState.prototype.OnBeforeEntering = function() {
        this._ownerFSM.SetMaxPrecentTage(this.GetUniqueID());
        AppLog_1.default.OpenFLAG = Global_1.default.Inst.isDebugMode;
        console.time("checkTime_endState");
      };
      EndState.prototype.OnBeforeLeaving = function() {
        console.timeEnd("time+START");
        console.timeEnd("checkTime_endState");
      };
      EndState.prototype.ReasonState = function(param) {
        if (this._ownerFSM.IsLoadFinsih()) {
          this._ownerFSM.EndFSM();
          GameMgr_1.default.Inst.ChangeScene(new MainCtrl_1.default());
        }
        return null;
      };
      EndState.prototype.showErrorUI = function() {
        var pData = {
          strTiltle: "\u8fd9\u4e2a\u5c0f\u4f19\u4f34\u8fd8\u6ca1\u6709\u5ba0\u7269\u54e6",
          strContent: "\u770b\u770b\u5176\u4ed6\u4eba\u5427\uff01",
          confirmText: "\u9000\u51fa\u6e38\u620f",
          confirmSprIdx: 0,
          confirmCallBack: null,
          popData: null
        };
        pData.confirmCallBack = function() {};
        UIMgr_1.default.Inst.AsyncCreatePupopByPath(UI_SingerComDialog_1.default.refPath, UI_SingerComDialog_1.default.refKey).then(function(dialog) {
          dialog.SetDialog(pData);
          dialog.Popup();
        });
      };
      return EndState;
    }(SimpleFSMState_1.default);
    var LoadFSM = function(_super) {
      __extends(LoadFSM, _super);
      function LoadFSM() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nextScene = "";
        _this.retryTime = 0;
        _this._precentage = 0;
        _this._maxPrecentage = 0;
        return _this;
      }
      LoadFSM.prototype.ShowErrorDialog = function() {
        var _a;
        var _this = this;
        var mapMsg = (_a = {}, _a[LaunchState.START] = "\u52a0\u8f7d\u914d\u7f6e\u5931\u8d25", 
        _a[LaunchState.LOAD_SYSTEM_PREFAB] = "\u52a0\u8f7d\u6e38\u620f\u5931\u8d25", _a[LaunchState.GET_GAME_DATA] = "\u65e0\u6cd5\u53d6\u5f97\u5ba0\u7269\u6570\u636e", 
        _a[LaunchState.PRELOAD_SCENE] = "\u65e0\u6cd5\u53d6\u5f97\u6e38\u620f\u573a\u666f", 
        _a);
        var self = this;
        var pData = {
          strTiltle: "\u63d0\u793a",
          strContent: mapMsg[this._currStateUID],
          confirmText: self.retryTime < 3 ? "\u91cd\u8bd5" : "\u79bb\u5f00\u6e38\u620f",
          confirmSprIdx: 1,
          confirmCallBack: null,
          popData: null
        };
        pData.confirmCallBack = function() {
          if (self.retryTime < 2) {
            self.retryTime++;
            self.TransitionTo(_this._currStateUID);
          }
        };
        if (UIMgr_1.default.Inst.GetDisplayingUI("UI_SingerComDialog") || UIMgr_1.default.Inst.IsLoadingUI("UI_SingerComDialog")) return;
        UIMgr_1.default.Inst.AsyncCreatePupopByPath(UI_SingerComDialog_1.default.refPath, UI_SingerComDialog_1.default.refKey).then(function(dialog) {
          dialog.SetDialog(pData);
          dialog.Popup();
        });
      };
      LoadFSM.prototype.ShowNetErrorDialog = function() {
        var _a;
        var mapMsg = (_a = {}, _a[LaunchState.GET_GAME_DATA] = {
          title: "\u54ce\u5440\uff0c\u4e0e\u5ba0\u7269\u661f\u7403\u7684\u8fde\u63a5\u4e2d\u65ad\u4e86",
          context: "\u65e0\u6cd5\u53d6\u5f97\u5ba0\u7269\u6570\u636e\n\u5feb\u68c0\u67e5\u4e00\u4e0b\u4f60\u7684\u7f51\u7edc\u5427"
        }, _a);
        var self = this;
        var pData = {
          strTiltle: mapMsg[self._currStateUID].title,
          strContent: mapMsg[self._currStateUID].context,
          isBtnConfirmLeft: true,
          isBtnRightCloseShow: true,
          confirmText: "\u91cd\u65b0\u8fde\u63a5",
          confirmSprIdx: 0,
          confirmCallBack: null,
          cancelText: "\u7a0d\u540e\u518d\u6765",
          cancelSprIdx: 1,
          cancelCallBack: null,
          popData: null
        };
        pData.confirmCallBack = function() {
          var next = self._currStateUID;
          self.TransitionTo(next);
        };
        pData.cancelCallBack = function() {
          AppLog_1.default.Log("cancelCallBack");
        };
        if (UIMgr_1.default.Inst.GetDisplayingUI("UI_DoubleNetDialog") || UIMgr_1.default.Inst.IsLoadingUI("UI_DoubleNetDialog")) return;
        UIMgr_1.default.Inst.AsyncCreatePupopByPath(UI_DoubleNetDialog_1.default.refPath, UI_DoubleNetDialog_1.default.refKey).then(function(dialog) {
          dialog.SetDialog(pData);
          dialog.Popup();
        });
      };
      LoadFSM.prototype.OnStartUpFSM = function() {
        this.TransitionTo(LaunchState.START);
        this.retryTime = 0;
        this._precentage = 0;
        this._maxPrecentage = 0;
      };
      LoadFSM.prototype.EndFSM = function() {
        _super.prototype.EndFSM.call(this);
      };
      LoadFSM.prototype.SetMaxPrecentTage = function(currState) {
        this._maxPrecentage = Math.floor(currState / this._allState.size * 100);
      };
      LoadFSM.prototype.OnUpdateTickFSM = function(dt) {
        _super.prototype.OnUpdateTickFSM.call(this, dt);
        if (null != this._currState) {
          this._precentage < this._maxPrecentage && (this._precentage += 500 * dt);
          this._precentage = Math.min(Math.floor(this._precentage), this._maxPrecentage);
          this.ownerObj.view.UpdateLoading(Math.floor(this._precentage));
        }
      };
      LoadFSM.prototype.IsLoadFinsih = function() {
        return this._precentage >= 100;
      };
      LoadFSM.prototype._OnInitAllStates = function() {
        this._AddState(new StartState());
        this._AddState(new LoadSystemPrefabState());
        this._AddState(new GetGameDataState());
        this._AddState(new PreloadSceneState());
        this._AddState(new EndState());
      };
      LoadFSM.prototype._DebugLogForFSM = function(currUID, nextUID) {
        AppLog_1.default.Log("LoadFSM \u7531 " + LaunchState[currUID] + " \u8f6c " + LaunchState[nextUID]);
      };
      LoadFSM = __decorate([ ccclass ], LoadFSM);
      return LoadFSM;
    }(SimpleFSMSystem_1.default);
    exports.default = LoadFSM;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/BaseControl/ResLoader": "ResLoader",
    "../../../BaseFrame/BaseManager/EventMgr": "EventMgr",
    "../../../BaseFrame/BaseManager/GameMgr": "GameMgr",
    "../../../BaseFrame/BaseManager/TimerMgr": "TimerMgr",
    "../../../BaseFrame/BaseManager/UIMgr": "UIMgr",
    "../../../BaseFrame/Log/AppLog": "AppLog",
    "../../../BaseFrame/StateMachine/SimpleFSMState": "SimpleFSMState",
    "../../../BaseFrame/StateMachine/SimpleFSMSystem": "SimpleFSMSystem",
    "../../AppContext/AppContext": "AppContext",
    "../../AppContext/Global": "Global",
    "../../BaseModule/EventID": "EventID",
    "../../BaseModule/GameEnums": "GameEnums",
    "../../BaseModule/TableConfigData": "TableConfigData",
    "../../NetModule/NetSender": "NetSender",
    "../CommonDiaglog/UI_DoubleComDialog": "UI_DoubleComDialog",
    "../CommonDiaglog/UI_DoubleNetDialog": "UI_DoubleNetDialog",
    "../CommonDiaglog/UI_SingerComDialog": "UI_SingerComDialog",
    "../MainScene/MainCtrl": "MainCtrl"
  } ],
  LoadView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e870bj9oAtN8bf0a3lD2C/1", "LoadView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppLog_1 = require("../../../BaseFrame/Log/AppLog");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LoadView = function(_super) {
      __extends(LoadView, _super);
      function LoadView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.progressLoad = null;
        _this.lblLoading = null;
        return _this;
      }
      LoadView.prototype.onLoad = function() {};
      LoadView.prototype.start = function() {
        AppLog_1.default.Log("LoadView");
      };
      LoadView.prototype.UpdateLoading = function(precentage) {};
      __decorate([ property(cc.ProgressBar) ], LoadView.prototype, "progressLoad", void 0);
      __decorate([ property(cc.Label) ], LoadView.prototype, "lblLoading", void 0);
      LoadView = __decorate([ ccclass ], LoadView);
      return LoadView;
    }(cc.Component);
    exports.default = LoadView;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/Log/AppLog": "AppLog"
  } ],
  LocalizedLabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc087SffZFA7Y7O6Wz0s9Wj", "LocalizedLabel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LanguageData_1 = require("./LanguageData");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, disallowMultiple = _a.disallowMultiple, menu = _a.menu, executionOrder = _a.executionOrder, requireComponent = _a.requireComponent;
    var LocalizedLabel = function(_super) {
      __extends(LocalizedLabel, _super);
      function LocalizedLabel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._debouncedUpdateLabel = null;
        _this.label = null;
        _this._dataID = "";
        return _this;
      }
      Object.defineProperty(LocalizedLabel.prototype, "dataID", {
        get: function() {
          return this._dataID;
        },
        set: function(val) {
          if (this._dataID !== val) {
            this._dataID = val;
            false;
            this.updateLabel();
          }
        },
        enumerable: false,
        configurable: true
      });
      LocalizedLabel.prototype.onLoad = function() {
        false;
        LanguageData_1.i18n.inst || LanguageData_1.i18n.init();
        cc.log("dataID: " + this.dataID + " value: " + LanguageData_1.i18n.t(this.dataID));
        this.fetchRender();
      };
      LocalizedLabel.prototype.fetchRender = function() {
        var label = this.getComponent(cc.Label);
        if (label) {
          this.label = label;
          this.updateLabel();
          return;
        }
      };
      LocalizedLabel.prototype.updateLabel = function() {
        if (!this.label) {
          cc.error("Failed to update localized label, label component is invalid!");
          return;
        }
        var localizedString = LanguageData_1.i18n.t(this.dataID, {});
        localizedString && (this.label.string = LanguageData_1.i18n.t(this.dataID, {}));
      };
      LocalizedLabel.prototype.debounce = function(func, wait, immediate) {
        var timeout = -1;
        return function() {
          var _this = this;
          var context = this, args = arguments;
          var later = function() {
            timeout = -1;
            immediate || func.apply(_this, args);
          }.bind(this);
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          callNow && func.apply(this, args);
        };
      };
      LocalizedLabel.editor = {
        executeInEditMode: true,
        menu: "i18nBase/LocalizedLabel"
      };
      __decorate([ property ], LocalizedLabel.prototype, "_dataID", void 0);
      __decorate([ property ], LocalizedLabel.prototype, "dataID", null);
      LocalizedLabel = __decorate([ ccclass, disallowMultiple(), menu("\u81ea\u5b9a\u4e49\u7ec4\u4ef6/LocalizedLabel") ], LocalizedLabel);
      return LocalizedLabel;
    }(cc.Component);
    exports.default = LocalizedLabel;
    cc._RF.pop();
  }, {
    "./LanguageData": "LanguageData"
  } ],
  LocalizedSprite: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d03afLc/lFJ25ZtaU9Rc/p9", "LocalizedSprite");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SpriteFrameSet_1 = require("./SpriteFrameSet");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, disallowMultiple = _a.disallowMultiple, menu = _a.menu, executionOrder = _a.executionOrder, requireComponent = _a.requireComponent;
    var LocalizedSprite = function(_super) {
      __extends(LocalizedSprite, _super);
      function LocalizedSprite() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.sprite = null;
        _this.spriteFrameSet = [];
        return _this;
      }
      LocalizedSprite.prototype.onLoad = function() {
        this.fetchRender();
      };
      LocalizedSprite.prototype.fetchRender = function() {
        var sprite = this.getComponent(cc.Sprite);
        if (sprite) {
          this.sprite = sprite;
          this.updateSprite(window.i18nConfig.curLang);
          return;
        }
      };
      LocalizedSprite.prototype.getSpriteFrameByLang = function(lang) {
        for (var i = 0; i < this.spriteFrameSet.length; ++i) if (this.spriteFrameSet[i].language === lang) return this.spriteFrameSet[i].spriteFrame;
      };
      LocalizedSprite.prototype.updateSprite = function(language) {
        if (!this.sprite) {
          cc.error("Failed to update localized sprite, sprite component is invalid!");
          return;
        }
        var spriteFrame = this.getSpriteFrameByLang(language);
        !spriteFrame && this.spriteFrameSet[0] && (spriteFrame = this.spriteFrameSet[0].spriteFrame);
        spriteFrame && (this.sprite.spriteFrame = spriteFrame);
      };
      LocalizedSprite.editor = {
        executeInEditMode: true,
        inspector: "packages://i18n/inspector/localized-sprite.js",
        menu: "i18n/LocalizedSprite"
      };
      __decorate([ property({
        type: [ SpriteFrameSet_1.default ]
      }) ], LocalizedSprite.prototype, "spriteFrameSet", void 0);
      LocalizedSprite = __decorate([ ccclass, disallowMultiple(), menu("\u81ea\u5b9a\u4e49\u7ec4\u4ef6/LocalizedSprite") ], LocalizedSprite);
      return LocalizedSprite;
    }(cc.Component);
    exports.default = LocalizedSprite;
    cc._RF.pop();
  }, {
    "./SpriteFrameSet": "SpriteFrameSet"
  } ],
  MainCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "66414RA84tJ/rL2YRHMJx5n", "MainCtrl");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SceneCtrlBase_1 = require("../../../BaseFrame/BaseControl/SceneCtrlBase");
    var EventMgr_1 = require("../../../BaseFrame/BaseManager/EventMgr");
    var AppLog_1 = require("../../../BaseFrame/Log/AppLog");
    var AppContext_1 = require("../../AppContext/AppContext");
    var MainCtrl = function(_super) {
      __extends(MainCtrl, _super);
      function MainCtrl() {
        var _this = _super.call(this) || this;
        _this._arrBind = [];
        _this.lastSendNetTime = 0;
        _this.retryTime = 0;
        _this._OffListener();
        _this._arrBind = [];
        for (var i = 0; i < _this._arrBind.length; ++i) EventMgr_1.EventMgr.Inst.addEvent(_this._arrBind[i].event, _this._arrBind[i].callback, _this);
        return _this;
      }
      Object.defineProperty(MainCtrl.prototype, "SceneName", {
        get: function() {
          return "MainScene";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MainCtrl.prototype, "SceneScript", {
        get: function() {
          return "MainView";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MainCtrl.prototype, "view", {
        get: function() {
          return this._ownerView;
        },
        enumerable: false,
        configurable: true
      });
      MainCtrl.prototype.OnSceneBinded = function() {
        this.view.InitLogic();
      };
      MainCtrl.prototype.OnSceneEnd = function() {
        this._OffListener();
      };
      MainCtrl.prototype._OffListener = function() {
        for (var i = 0; i < this._arrBind.length; ++i) EventMgr_1.EventMgr.Inst.removeEvent(this._arrBind[i].event, this._arrBind[i].callback, this);
        this._arrBind = null;
      };
      MainCtrl.prototype._onGameShow = function() {
        AppLog_1.default.CLog([ "mainctrl gameshow" ], "red");
        if (cc.game.isPaused()) {
          AppLog_1.default.Error("mainctrl gameshow Paused");
          cc.game.resume();
        }
        AppContext_1.default.Inst.IsConnectingState() ? AppLog_1.default.Log("connecting do nothing") : AppLog_1.default.Log("close");
      };
      MainCtrl.prototype._onGameHide = function() {
        AppLog_1.default.CLog([ "mainctrl onGameHide" ], "red");
        this.view && this.view.ClearShowLogic();
      };
      return MainCtrl;
    }(SceneCtrlBase_1.default);
    exports.default = MainCtrl;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/BaseControl/SceneCtrlBase": "SceneCtrlBase",
    "../../../BaseFrame/BaseManager/EventMgr": "EventMgr",
    "../../../BaseFrame/Log/AppLog": "AppLog",
    "../../AppContext/AppContext": "AppContext"
  } ],
  MainView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc36fkRiH9PuYTdPbQrW/fW", "MainView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataMgr_1 = require("../../../BaseFrame/BaseManager/DataMgr");
    var AppLog_1 = require("../../../BaseFrame/Log/AppLog");
    var Global_1 = require("../../AppContext/Global");
    var GameEnums_1 = require("../../BaseModule/GameEnums");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MainView = function(_super) {
      __extends(MainView, _super);
      function MainView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.topLayerWg = null;
        _this.sptPetAvatar = null;
        _this._playerData = null;
        return _this;
      }
      MainView.prototype.onLoad = function() {
        Global_1.default.Inst.WidgetForIphonX(this.topLayerWg);
      };
      MainView.prototype.InitLogic = function() {
        AppLog_1.default.Log("MainView InitLogic");
        this._playerData = DataMgr_1.default.Inst.GetData(GameEnums_1.DataType.PLAYER_DATA);
        this.InitView();
      };
      MainView.prototype.RefreshLogic = function() {
        if (!this.node) return;
        this.CloseOpenedPop();
      };
      MainView.prototype.ClearShowLogic = function() {
        this.CloseOpenedPop();
      };
      MainView.prototype.CloseOpenedPop = function() {};
      MainView.prototype.InitView = function() {
        Global_1.default.Inst.btnVConsole.node.setPosition(cc.v2(0, 0));
        Global_1.default.Inst.btnVConsole.node.zIndex = 133;
        Global_1.default.Inst.lblDebugMode.node.zIndex = 133;
      };
      MainView.prototype.onClickBtnExit = function() {};
      MainView.prototype.update = function(dt) {};
      MainView.prototype.onDestroy = function() {};
      __decorate([ property(cc.Widget) ], MainView.prototype, "topLayerWg", void 0);
      __decorate([ property(cc.Sprite) ], MainView.prototype, "sptPetAvatar", void 0);
      MainView = __decorate([ ccclass ], MainView);
      return MainView;
    }(cc.Component);
    exports.default = MainView;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/BaseManager/DataMgr": "DataMgr",
    "../../../BaseFrame/Log/AppLog": "AppLog",
    "../../AppContext/Global": "Global",
    "../../BaseModule/GameEnums": "GameEnums"
  } ],
  MyDynamicAltasManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c576Nv06VBeqZwtbAPlOw6", "MyDynamicAltasManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var space = 2;
    var MyAltas = function() {
      function MyAltas(name, maxWidth, maxHeight) {
        this.name = name;
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._x = 0;
        this._y = 0;
        this._nextY = 0;
        this._mapTexture = new Map();
        this._mapTextureRefCount = new Map();
        this._texture = new cc.Texture2D();
        var canvas = document.createElement("canvas");
        canvas.width = maxWidth;
        canvas.height = maxHeight;
        this._texture.initWithElement(canvas);
        this._texture.name = name;
        this._texture.packable = false;
        this._refCount = 0;
        canvas.remove();
      }
      Object.defineProperty(MyAltas.prototype, "refCount", {
        get: function() {
          return this._refCount;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MyAltas.prototype, "texture", {
        get: function() {
          return this._texture;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MyAltas.prototype, "childCount", {
        get: function() {
          return this._mapTexture.size;
        },
        enumerable: false,
        configurable: true
      });
      MyAltas.prototype.AddTexture = function(textureKey, texture) {
        return this._AddTexture(textureKey, texture, texture.width, texture.height);
      };
      MyAltas.prototype.AddTextureByCustomSize = function(textureKey, texture, customSize) {
        return this._AddTexture(textureKey, texture, customSize.width, customSize.height);
      };
      MyAltas.prototype.AddTextureByScale = function(textureKey, texture, scaleX, scaleY) {
        return this._AddTexture(textureKey, texture, texture.width * scaleX, texture.height * scaleY);
      };
      MyAltas.prototype.HasTexture = function(textureKey) {
        return this._mapTexture.has(textureKey);
      };
      MyAltas.prototype.GetTextureRect = function(textureKey) {
        return this._mapTexture.get(textureKey);
      };
      MyAltas.prototype.RemoveTexture = function(textureKey) {
        if (this._mapTexture.has(textureKey)) {
          var refCount = this._mapTextureRefCount.get(textureKey) - 1;
          --this._refCount;
          if (refCount <= 0) {
            this._mapTexture.delete(textureKey);
            this._mapTextureRefCount.delete(textureKey);
          } else this._mapTextureRefCount.set(textureKey, refCount);
        }
      };
      MyAltas.prototype.Destroy = function() {
        var htmlObj = this._texture.getHtmlElementObj();
        htmlObj && htmlObj.remove();
        this._texture && this._texture.destroy();
        this._mapTexture.clear();
        this._mapTextureRefCount.clear();
        this._refCount = 0;
      };
      MyAltas.prototype._AddTexture = function(textureKey, texture, textureWidth, textureHeight) {
        if (!texture.getHtmlElementObj()) return null;
        if (this._mapTexture.has(textureKey)) {
          this._mapTextureRefCount.set(textureKey, this._mapTextureRefCount.get(textureKey) + 1);
          ++this._refCount;
          return this._mapTexture.get(textureKey);
        }
        var canvas = this._texture.getHtmlElementObj();
        var context = canvas.getContext("2d");
        var txWidht = textureWidth;
        var txHeight = textureHeight;
        if (this._x + txWidht + space > this.maxWidth) {
          this._x = space;
          this._y = this._nextY;
        }
        this._y + txHeight > this._nextY && (this._nextY = this._y + txHeight + space);
        if (this._nextY > this.maxHeight) return null;
        var rect = new cc.Rect(this._x, this._y, txWidht, txHeight);
        context.drawImage(texture.getHtmlElementObj(), this._x, this._y, txWidht, txHeight);
        this._x += txWidht + space;
        this._texture.initWithElement(canvas);
        this._texture.packable = false;
        this._mapTexture.set(textureKey, rect);
        this._mapTextureRefCount.set(textureKey, 0);
        ++this._refCount;
        return rect;
      };
      return MyAltas;
    }();
    var MyDynamicAltasManager = function() {
      function MyDynamicAltasManager() {}
      MyDynamicAltasManager.GetAltas = function(altasName) {
        return MyDynamicAltasManager._mapAltas.get(altasName);
      };
      MyDynamicAltasManager.GetSpriteFrame = function(textureKey) {
        var res = this.FindAltasByTexture(textureKey);
        if (res) {
          var spf = new cc.SpriteFrame(res.texture);
          spf.setRect(res.rect);
          return spf;
        }
        return null;
      };
      MyDynamicAltasManager.CreateAltas = function(altasName, maxWidht, maxHeight) {
        if (this._mapAltas.has(altasName)) throw Error(altasName + "\u5df2\u7ecf\u5b58\u5728\u5bf9\u5e94\u7684Altas, \u82e5\u679c\u8981\u5904\u7406\u8bf7\u5148\u6e05\u9664\u539f\u6765\u7684altas");
        var altas = new MyAltas(altasName, maxWidht, maxHeight);
        MyDynamicAltasManager._mapAltas.set(altasName, altas);
        MyDynamicAltasManager._debugNode && MyDynamicAltasManager._debugNode.emit("createAltas", altasName);
        return altas;
      };
      MyDynamicAltasManager.AddTexture = function(altasName, textureKey, texture) {
        var param = {
          type: "NORMAL"
        };
        return MyDynamicAltasManager._AddTexture(altasName, textureKey, texture, param);
      };
      MyDynamicAltasManager.AddTextureByCustomSize = function(altasName, textureKey, texture, customSize) {
        var param = {
          type: "CUSTOM_SIZE",
          customSize: customSize
        };
        return MyDynamicAltasManager._AddTexture(altasName, textureKey, texture, param);
      };
      MyDynamicAltasManager.AddTextureByScale = function(altasName, textureKey, texture, scaleX, scaleY) {
        void 0 != scaleY && null != scaleY || (scaleY = scaleX);
        var param = {
          type: "SCALE",
          scaleX: scaleX,
          scaleY: scaleY
        };
        return MyDynamicAltasManager._AddTexture(altasName, textureKey, texture, param);
      };
      MyDynamicAltasManager.CreateGroupAltas = function(groupName, maxWidth, maxHeight, maxCount) {
        void 0 === maxCount && (maxCount = 0);
        if (this._mapGroupAltas.has(groupName)) throw Error("\u5df2\u7ecf\u5b58\u5728\u5bf9\u5e94\u7684Group, \u82e5\u679c\u8981\u5904\u7406\u8bf7\u5148\u6e05\u9664\u539f\u6765\u7684Group");
        MyDynamicAltasManager._mapGroupAltas.set(groupName, {
          altasList: [],
          maxCount: maxCount,
          maxWidth: maxWidth,
          maxHeight: maxHeight
        });
      };
      MyDynamicAltasManager.AddGroupTexture = function(groupName, textureKey, texture) {
        var param = {
          type: "NORMAL"
        };
        return MyDynamicAltasManager._AddTextureToGroup(groupName, textureKey, texture, param);
      };
      MyDynamicAltasManager.AddGroupTextureByCustomSize = function(groupName, textureKey, texture, customSize) {
        var param = {
          type: "CUSTOM_SIZE",
          customSize: customSize
        };
        return MyDynamicAltasManager._AddTextureToGroup(groupName, textureKey, texture, param);
      };
      MyDynamicAltasManager.AddGroupTextureByScale = function(groupName, textureKey, texture, scaleX, scaleY) {
        void 0 != scaleY && null != scaleY || (scaleY = scaleX);
        var param = {
          type: "SCALE",
          scaleX: scaleX,
          scaleY: scaleY
        };
        return MyDynamicAltasManager._AddTextureToGroup(groupName, textureKey, texture, param);
      };
      MyDynamicAltasManager.HasAltas = function(altasName) {
        return MyDynamicAltasManager._mapAltas.has(altasName);
      };
      MyDynamicAltasManager.HasGroup = function(groupName) {
        return MyDynamicAltasManager._mapGroupAltas.has(groupName);
      };
      MyDynamicAltasManager.FindAltasByTexture = function(textureKey) {
        var res = {
          texture: null,
          rect: null,
          atlasName: ""
        };
        MyDynamicAltasManager._mapAltas.forEach(function(altas, altasName) {
          if (!altas) return true;
          if (altas.HasTexture(textureKey)) {
            res = {
              texture: altas.texture,
              rect: altas.GetTextureRect(textureKey),
              atlasName: altasName
            };
            return false;
          }
        });
        return res;
      };
      MyDynamicAltasManager.RemoveTexture = function(textureKey) {
        this._mapAltas.forEach(function(altas, name) {
          if (!altas) return true;
          altas.HasTexture(textureKey) && altas.RemoveTexture(textureKey);
        });
      };
      MyDynamicAltasManager.CloneTextureFromSpriteAltas = function(altas, textName) {
        var spf = altas.getSpriteFrame(textName);
        if (!spf) return null;
        var rect = spf.getRect();
        var texture = spf.getTexture();
        if (!texture) return null;
        var canvas = document.createElement("canvas");
        canvas.width = rect.width;
        canvas.height = rect.height;
        var ctx = canvas.getContext("2d");
        if (!texture.getHtmlElementObj()) return null;
        ctx.drawImage(texture.getHtmlElementObj(), rect.x, rect.y, rect.width, rect.height, 0, 0, rect.width, rect.height);
        var resTexture = new cc.Texture2D();
        resTexture.initWithElement(canvas);
        resTexture._uuid = "clone_" + spf._uuid;
        resTexture && (resTexture.packable = false);
        canvas.remove();
        return resTexture;
      };
      MyDynamicAltasManager.CloneTextureFromSpriteFrame = function(spriteFrame) {
        var rect = spriteFrame.getRect();
        var texture = spriteFrame.getTexture();
        if (!texture) return null;
        var canvas = document.createElement("canvas");
        canvas.width = rect.width;
        canvas.height = rect.height;
        var ctx = canvas.getContext("2d");
        if (!texture.getHtmlElementObj()) return null;
        ctx.drawImage(texture.getHtmlElementObj(), rect.x, rect.y, rect.width, rect.height, 0, 0, rect.width, rect.height);
        var resTexture = new cc.Texture2D();
        resTexture.initWithElement(canvas);
        resTexture._uuid = "clone_" + spriteFrame._uuid;
        resTexture && (resTexture.packable = false);
        canvas.remove();
        return resTexture;
      };
      MyDynamicAltasManager.DestroyAltasByName = function(altasName) {
        if (MyDynamicAltasManager._mapAltas.has(altasName)) {
          MyDynamicAltasManager._mapAltas.get(altasName).Destroy();
          MyDynamicAltasManager._mapAltas.delete(altasName);
          MyDynamicAltasManager._debugNode && MyDynamicAltasManager._debugNode.emit("destroyAltas", altasName);
        }
      };
      MyDynamicAltasManager.DestroyNonUseAltas = function() {
        MyDynamicAltasManager._mapAltas.forEach(function(altas, name) {
          if (altas && altas.refCount <= 0) {
            altas.Destroy();
            MyDynamicAltasManager._debugNode && MyDynamicAltasManager._debugNode.emit("destroyAltas", name);
            MyDynamicAltasManager._mapAltas.delete(name);
          }
        });
      };
      MyDynamicAltasManager.DestroyAllAtlas = function() {
        this._mapGroupAltas.forEach(function(altasGroupValue, groupName) {
          MyDynamicAltasManager.DestroyAltasByGroup(groupName);
        });
        MyDynamicAltasManager._mapAltas.forEach(function(altas, name) {
          MyDynamicAltasManager.DestroyAltasByName(name);
        });
        MyDynamicAltasManager._mapAltas.clear();
        MyDynamicAltasManager._mapGroupAltas.clear();
      };
      MyDynamicAltasManager.ShowDebug = function(show) {
        true;
        return;
        var scroll;
        var content_1;
        var layout;
      };
      MyDynamicAltasManager.cacheMermory = function() {
        var str = [ "MyDynamicAltasManager \u5360\u7528\u5185\u5b58\u5982\u4e0b:" ];
        var sumSize = 0;
        MyDynamicAltasManager._mapAltas.forEach(function(atlas, name) {
          var textureSize = atlas.maxWidth * atlas.maxHeight * (4 / 1024 / 1024);
          var mbSize = Math.round(1e3 * textureSize) / 1e3;
          sumSize += mbSize;
          str.push(name + ": " + mbSize + "MB, " + atlas.childCount + "\u5f20\u6563\u56fe");
        });
        str.push("\u603b\u5185\u5b58: " + sumSize + "MB");
        console.warn(str.join("\n"));
      };
      MyDynamicAltasManager.DestroyAltasByGroup = function(groupName) {
        var _this = this;
        if (!this._mapGroupAltas.has(groupName)) return;
        var altasList = this._mapGroupAltas.get(groupName).altasList;
        for (var i = 0; i < altasList.length; ++i) MyDynamicAltasManager.DestroyAltasByName(altasList[i]);
        this._mapTextureInGroup.forEach(function(data, textureKey) {
          if (data.groupName == groupName) {
            _this._mapTextureInGroup.delete(textureKey);
            return true;
          }
        });
        this._mapGroupAltas.delete(groupName);
      };
      MyDynamicAltasManager._AddAltasNodeToDebugNode = function(altasName, content, texture) {
        var node = new cc.Node(altasName);
        node.anchorY = 1;
        node.anchorX = 0;
        var spriteFrame = new cc.SpriteFrame(texture);
        var sprite = node.addComponent(cc.Sprite);
        sprite.spriteFrame = spriteFrame;
        var widthRate = texture.width > cc.winSize.width ? cc.winSize.width / texture.width : 1;
        node.parent = content;
        node.setScale(widthRate);
      };
      MyDynamicAltasManager._AddTexture = function(altasName, textureKey, texture, param) {
        if (!MyDynamicAltasManager._mapAltas.has(altasName)) throw Error(altasName + "-\u6ca1\u6709\u5bf9\u5e94\u56fe\u96c6\uff0c\u8bf7\u786e\u8ba4\u662f\u5426\u5df2\u521b\u5efa");
        var altas = MyDynamicAltasManager._mapAltas.get(altasName);
        var rect = MyDynamicAltasManager._AddTextureToAltas(altas, textureKey, texture, param);
        texture && (texture.packable = false);
        var spriteFrame = new cc.SpriteFrame();
        if (rect) {
          var altasTexture = altas.texture;
          spriteFrame.setTexture(altasTexture);
          spriteFrame.setRect(rect);
        } else {
          console.warn(altasName + "_" + textureKey + "\u6ca1\u5408\u5230\u52a8\u6001\u5408\u56fe\u4e2d");
          spriteFrame.setTexture(texture);
        }
        return spriteFrame;
      };
      MyDynamicAltasManager._AddTextureToGroup = function(groupName, textureKey, texture, param) {
        if (!MyDynamicAltasManager._mapGroupAltas.has(groupName)) throw Error(groupName + "-\u6ca1\u6709\u5bf9\u5e94\u56fe\u96c6\u7fa4\uff0c\u8bf7\u786e\u8ba4\u662f\u5426\u5df2\u521b\u5efa");
        var spriteFrame = null;
        if (this._mapTextureInGroup.has(textureKey)) {
          var groupData = this._mapTextureInGroup.get(textureKey);
          if (MyDynamicAltasManager._mapGroupAltas.has(groupData.groupName) && MyDynamicAltasManager._mapGroupAltas.get(groupData.groupName).altasList[groupData.idx] && MyDynamicAltasManager._mapAltas.has(groupData.altasName)) {
            var altas = MyDynamicAltasManager._mapAltas.get(groupData.altasName);
            var rect = altas.GetTextureRect(textureKey);
            spriteFrame = new cc.SpriteFrame();
            var altasTexture = altas.texture;
            spriteFrame.setTexture(altasTexture);
            spriteFrame.setRect(rect);
            return spriteFrame;
          }
        }
        var data = MyDynamicAltasManager._mapGroupAltas.get(groupName);
        var altasList = data.altasList;
        0 == altasList.length && altasList.push(groupName + "_" + altasList.length);
        for (var i = 0; i < 2; ++i) {
          var idx = altasList.length - 1;
          var altasName = altasList[idx];
          var altas = MyDynamicAltasManager._mapAltas.get(altasName);
          altas || (altas = MyDynamicAltasManager.CreateAltas(altasName, data.maxWidth, data.maxHeight));
          var rect = MyDynamicAltasManager._AddTextureToAltas(altas, textureKey, texture, param);
          texture && (texture.packable = false);
          if (rect) {
            this._mapTextureInGroup.set(textureKey, {
              groupName: groupName,
              idx: idx,
              altasName: altasName
            });
            spriteFrame = new cc.SpriteFrame();
            var altasTexture = altas.texture;
            spriteFrame.setTexture(altasTexture);
            spriteFrame.setRect(rect);
            break;
          }
          if (altasList.length == data.maxCount) break;
          altasList.push(groupName + "_" + altasList.length);
        }
        if (null == spriteFrame) {
          console.warn(groupName + "_" + textureKey + "\u6ca1\u5408\u5230\u52a8\u6001\u5408\u56fe\u4e2d");
          spriteFrame.setTexture(texture);
        }
        return spriteFrame;
      };
      MyDynamicAltasManager._AddTextureToAltas = function(altas, textureKey, texture, param) {
        var rect = null;
        switch (param.type) {
         case "NORMAL":
          rect = altas.AddTexture(textureKey, texture);
          break;

         case "CUSTOM_SIZE":
          rect = altas.AddTextureByCustomSize(textureKey, texture, param.customSize);
          break;

         case "SCALE":
          rect = altas.AddTextureByScale(textureKey, texture, param.scaleX, param.scaleY);
        }
        return rect;
      };
      MyDynamicAltasManager._debugNode = null;
      MyDynamicAltasManager._mapAltas = new Map();
      MyDynamicAltasManager._mapGroupAltas = new Map();
      MyDynamicAltasManager._mapTextureInGroup = new Map();
      return MyDynamicAltasManager;
    }();
    exports.default = MyDynamicAltasManager;
    cc._RF.pop();
  }, {} ],
  MyPolyfill: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d874o26LdAwoMH+G/T0KEv", "MyPolyfill");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var MyPolyfill = function() {
      function MyPolyfill() {
        String.prototype.padStart || (String.prototype.padStart = function padStart(targetLength, padString) {
          targetLength >>= 0;
          padString = String("undefined" !== typeof padString ? padString : " ");
          if (this.length >= targetLength) return String(this);
          targetLength -= this.length;
          targetLength > padString.length && (padString += padString.repeat(targetLength / padString.length));
          return padString.slice(0, targetLength) + String(this);
        });
        String.prototype.padEnd || (String.prototype.padEnd = function padEnd(targetLength, padString) {
          targetLength >>= 0;
          padString = String("undefined" !== typeof padString ? padString : " ");
          if (this.length > targetLength) return String(this);
          targetLength -= this.length;
          targetLength > padString.length && (padString += padString.repeat(targetLength / padString.length));
          return String(this) + padString.slice(0, targetLength);
        });
        Array.prototype.from || (Array.prototype.from = function() {
          var toStr = Object.prototype.toString;
          var isCallable = function(fn) {
            return "function" === typeof fn || "[object Function]" === toStr.call(fn);
          };
          var toInteger = function(value) {
            var number = Number(value);
            if (isNaN(number)) return 0;
            if (0 === number || !isFinite(number)) return number;
            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
          };
          var maxSafeInteger = Math.pow(2, 53) - 1;
          var toLength = function(value) {
            var len = toInteger(value);
            return Math.min(Math.max(len, 0), maxSafeInteger);
          };
          return function from(arrayLike) {
            var C = this;
            var items = Object(arrayLike);
            if (null == arrayLike) throw new TypeError("Array.from requires an array-like object - not null or undefined");
            var mapFn = arguments.length > 1 ? arguments[1] : void 0;
            var T;
            if ("undefined" !== typeof mapFn) {
              if (!isCallable(mapFn)) throw new TypeError("Array.from: when provided, the second argument must be a function");
              arguments.length > 2 && (T = arguments[2]);
            }
            var len = toLength(items.length);
            var A = isCallable(C) ? Object(new C(len)) : new Array(len);
            var k = 0;
            var kValue;
            while (k < len) {
              kValue = items[k];
              A[k] = mapFn ? "undefined" === typeof T ? mapFn(kValue, k) : mapFn.call(T, kValue, k) : kValue;
              k += 1;
            }
            A.length = len;
            return A;
          };
        }());
      }
      return MyPolyfill;
    }();
    exports.default = MyPolyfill;
    cc._RF.pop();
  }, {} ],
  NetHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62a0fg8EOxNK7Q8y/fH/nMP", "NetHandler");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventMgr_1 = require("../../BaseFrame/BaseManager/EventMgr");
    var AppLog_1 = require("../../BaseFrame/Log/AppLog");
    var EventID_1 = require("../BaseModule/EventID");
    var GameEnums_1 = require("../BaseModule/GameEnums");
    var ccclass = cc._decorator.ccclass;
    var NetHandler = function() {
      function NetHandler() {}
      NetHandler_1 = NetHandler;
      NetHandler.GetHandlerBind = function() {
        return [];
      };
      NetHandler.RegisteMessage = function(key, msgType, eventType) {
        NetHandler_1.eventMap.set(key, {
          msgType: msgType,
          eventType: eventType
        });
        return {
          netMsgType: key,
          callback: NetHandler_1.HandlerEvent
        };
      };
      NetHandler.HandlerEvent = function(msgData, msgType, sn, ping) {
        void 0 === ping && (ping = 0);
        var pd = NetHandler_1.eventMap.get(EventID_1.NetMsg[msgType]);
        if (pd) {
          var logStr = "Handler NetMsgType=" + msgType;
          var decodeData = NetHandler_1.DecodeMsg(msgData, pd.msgType, logStr);
          "HeartBeat" != msgType && NetHandler_1.PrintMsg(logStr + ",code=" + msgData.code + ",remark=" + msgData.remark + ",data=", msgData);
          pd.eventType && EventMgr_1.EventMgr.Inst.emitEvent(pd.eventType.toString(), decodeData, sn, ping);
        }
      };
      NetHandler.DecodeMsg = function(msgData, key, str) {
        if (msgData.code == GameEnums_1.ServerEC.SUCCESS) {
          var uArr = new Uint8Array(msgData.data);
          var data = key.decode(uArr);
          msgData.data = data;
        }
        return msgData;
      };
      NetHandler.PrintMsg = function(str, msgData) {
        msgData.code == GameEnums_1.ServerEC.SUCCESS ? AppLog_1.default.CLog([ str, JSON.stringify(msgData.data, null, "\t") ], "#FFA300") : AppLog_1.default.CLog([ str, JSON.stringify(msgData.data, null, "\t") ], "#FFA600");
      };
      var NetHandler_1;
      NetHandler.eventMap = new Map();
      NetHandler = NetHandler_1 = __decorate([ ccclass ], NetHandler);
      return NetHandler;
    }();
    exports.default = NetHandler;
    cc._RF.pop();
  }, {
    "../../BaseFrame/BaseManager/EventMgr": "EventMgr",
    "../../BaseFrame/Log/AppLog": "AppLog",
    "../BaseModule/EventID": "EventID",
    "../BaseModule/GameEnums": "GameEnums"
  } ],
  NetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2db8ERc4JGLZR9QKHBW4y4", "NetMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var socket_io_1 = require("socket.io");
    var AppContext_1 = require("../../Game/AppContext/AppContext");
    var EventID_1 = require("../../Game/BaseModule/EventID");
    var GameEnums_1 = require("../../Game/BaseModule/GameEnums");
    var NetHandler_1 = require("../../Game/NetModule/NetHandler");
    var AppLog_1 = require("../Log/AppLog");
    var connector_1 = require("../Protobuf/connector");
    var ProtocolHelper_1 = require("../Protobuf/ProtocolHelper");
    var EventMgr_1 = require("./EventMgr");
    var NetMgr = function() {
      function NetMgr() {
        this._socket = null;
        this._serverLogining = false;
        this._SN = 1;
        this._RN = 1;
        this._mapSendSN = new Map();
      }
      Object.defineProperty(NetMgr.prototype, "sn", {
        get: function() {
          return this._SN;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(NetMgr, "Inst", {
        get: function() {
          null == NetMgr._inst && (NetMgr._inst = new NetMgr());
          return NetMgr._inst;
        },
        enumerable: false,
        configurable: true
      });
      NetMgr.prototype.ConnectSocket = function(url) {
        if (null == this._socket || null !== this._socket && !this._socket.connected && !this._serverLogining) try {
          this._serverLogining = true;
          AppLog_1.default.Log("url=", url);
          this._OffSocketEvents();
          this._SN = 1;
          this._RN = 1;
          this._socket = socket_io_1.connect(url, {
            transports: [ "websocket" ],
            reconnection: false,
            timeout: 2e3
          });
          this._OffNetMsgEvents();
          this._OnNetMsgEvents();
          this._OnSocketEvents();
        } catch (err) {
          var errorstring = "network connect error:" + err.message;
          AppLog_1.default.Error(errorstring);
          this._serverLogining = false;
        }
        return this._serverLogining;
      };
      NetMgr.prototype.CloseSocket = function(from) {
        console.error("\u4ece" + from + "\u4e3b\u52a8\u8c03\u7528close");
        if (this._socket.connected) {
          this._socket.close();
          this._mapSendSN.clear();
          this._SN = 1;
          this._RN = 1;
          this._serverLogining = false;
        }
      };
      NetMgr.prototype._OnNetMsgEvents = function() {
        var arrBind = NetHandler_1.default.GetHandlerBind();
        for (var i = 0; i < arrBind.length; ++i) EventMgr_1.EventMgr.Inst.addEvent(arrBind[i].netMsgType, arrBind[i].callback, this);
        AppLog_1.default.Info("bind msg Handler");
      };
      NetMgr.prototype._OffNetMsgEvents = function() {
        var arrBind = NetHandler_1.default.GetHandlerBind();
        for (var i = 0; i < arrBind.length; ++i) EventMgr_1.EventMgr.Inst.removeEvent(arrBind[i].netMsgType, arrBind[i].callback, this);
        AppLog_1.default.Info("unbind msg Handler");
      };
      NetMgr.prototype._OnSocketEvents = function() {
        if (!this._socket) return;
        this._socket.on("connect", this._OnOpen.bind(this));
        this._socket.on("disconnect", this._OnClose.bind(this));
        this._socket.on("socketioData", this._OnSocketIoData.bind(this));
        this._socket.on("connect_error", this._OnConnectError.bind(this));
        this._socket.on("connect_timeout", this._OnConnectTimeout.bind(this));
        this._socket.on("error", this._OnError.bind(this));
      };
      NetMgr.prototype._OffSocketEvents = function() {
        if (!this._socket) return;
        this._socket.off("connect");
        this._socket.off("disconnect");
        this._socket.off("socketioData");
        this._socket.off("connect_error");
        this._socket.off("connect_timeout");
        this._socket.off("error");
      };
      NetMgr.prototype._OnOpen = function(event) {
        AppLog_1.default.Info("ws connect success");
        this._SN = 1;
        this._RN = 1;
        this._serverLogining = false;
        EventMgr_1.EventMgr.Inst.emitEvent("WS_OPEN", event);
      };
      NetMgr.prototype._OnError = function(event) {
        AppLog_1.default.Error("\u7f51\u7edc\u8fde\u63a5 error~:", event.data);
        this._serverLogining = false;
        EventMgr_1.EventMgr.Inst.emitEvent("WS_ERROR", event);
      };
      NetMgr.prototype._OnConnectError = function(event) {
        AppLog_1.default.Error("\u7f51\u7edc\u8fde\u63a5 _OnConnectError Error~:", event.data);
        this._serverLogining = false;
        EventMgr_1.EventMgr.Inst.emitEvent("WS_ERROR", event);
      };
      NetMgr.prototype._OnConnectTimeout = function(event) {
        AppLog_1.default.Error("\u7f51\u7edc\u8fde\u63a5 Timeout error~:", event.data);
        this._serverLogining = false;
        EventMgr_1.EventMgr.Inst.emitEvent("WS_ERROR", event);
      };
      NetMgr.prototype._OnClose = function(event) {
        AppLog_1.default.Error("\u7f51\u7edc\u8fde\u63a5\u5173\u95ed _OnClose~:", event);
        EventMgr_1.EventMgr.Inst.emitEvent("WS_CLOSE", event);
      };
      NetMgr.prototype._OnSocketIoData = function(arrayBuff) {
        var recData = ProtocolHelper_1.default.DecodeMsg(arrayBuff);
        recData.CommandMessageType == connector_1.CommandMessage.Type.RESP && recData.RespCommandType == connector_1.RespCommand.Type.SAUTH && this._OnSauthResponse(recData.data);
        if (recData.CommandMessageType == connector_1.CommandMessage.Type.MSG && recData.data) for (var i = 0; i < recData.data.length; ++i) this._HandlerAnalyzedMessage(recData.data[i]);
      };
      NetMgr.prototype.Emit = function(connectorMsgType, msgId, data) {
        if ("SOCKET" == AppContext_1.default.Inst.LaunchParam.webMode) {
          var isConnecting = this.IsConnected();
          if (isConnecting) {
            var sendBuf = ProtocolHelper_1.default.EncryptMsg(connectorMsgType, data);
            "HEART_BEAT" != msgId;
            this._socket.emit("socketioData", sendBuf.buffer);
            if (connectorMsgType == connector_1.MessageType.COMMAND) {
              this._mapSendSN.set(this._SN, {
                connectorMsgType: connectorMsgType,
                msgId: msgId,
                buffer: sendBuf,
                sendTime: new Date().getTime()
              });
              this._SN++;
            }
          } else {
            AppLog_1.default.Log("\u7f51\u8def\u65ad\u5f00");
            "HEART_BEAT" != msgId && console.error("socket \u65ad\u4e86 sn:" + this._SN + ", msgid:" + msgId + "\u53d1\u4e0d\u51fa\u53bb");
          }
          return isConnecting;
        }
      };
      NetMgr.prototype._HandlerAnalyzedMessage = function(jsonData) {
        switch (jsonData.respType) {
         case GameEnums_1.ServerRespEvent.REQ_EVENT:
          var ping = 0;
          if (this._mapSendSN.has(jsonData.sn)) {
            ping = new Date().getTime() - this._mapSendSN.get(jsonData.sn).sendTime;
            this._mapSendSN.delete(jsonData.sn);
          }
          this._OnRequestMessage(jsonData, ping);
          break;

         case GameEnums_1.ServerRespEvent.PUSH_EVENT:
          if (jsonData.sn - this._RN > 1) {
            EventMgr_1.EventMgr.Inst.emitEvent("VERIFY_SN_FAIL");
            console.error("SN \u5bf9\u4e0d\u4e0a\uff0c\u5dee\u4e86" + (jsonData.sn - this._RN) + "\uff0crn\u4e3a" + this._RN + " sn" + jsonData.sn);
          }
          this._RN = jsonData.sn;
          this._OnPushMessage(jsonData);
          break;

         default:
          AppLog_1.default.CLog([ jsonData ], "#FF0000");
        }
      };
      NetMgr.prototype._OnRequestMessage = function(event, ping) {
        EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.NetMsg[event.msgType], event.msg, event.msgType, event.sn, ping);
      };
      NetMgr.prototype._OnSauthResponse = function(event) {
        EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.LocMsg.SAUTH_RESULT.toString(), event);
        AppLog_1.default.CLog([ "_OnSauthResponse:", event ], "#FF0000");
      };
      NetMgr.prototype._OnPushMessage = function(event) {
        if ("ERROR_SN" == event.msgType) {
          AppLog_1.default.Error("\u51fa\u73feERROR_SN");
          EventMgr_1.EventMgr.Inst.emitEvent("VERIFY_SN_FAIL");
          this._SN = 1;
          return;
        }
        event.msgType && EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.NetMsg[event.msgType], event.msg, event.msgType, event.sn);
      };
      NetMgr.prototype.IsConnected = function() {
        return this._socket && this._socket.connected;
      };
      NetMgr.prototype.IsClosed = function() {
        return !this._socket || this._socket && "closed" == this._socket.io.readyState;
      };
      NetMgr._inst = null;
      return NetMgr;
    }();
    exports.default = NetMgr;
    cc._RF.pop();
  }, {
    "../../Game/AppContext/AppContext": "AppContext",
    "../../Game/BaseModule/EventID": "EventID",
    "../../Game/BaseModule/GameEnums": "GameEnums",
    "../../Game/NetModule/NetHandler": "NetHandler",
    "../Log/AppLog": "AppLog",
    "../Protobuf/ProtocolHelper": "ProtocolHelper",
    "../Protobuf/connector": "connector",
    "./EventMgr": "EventMgr",
    "socket.io": "socket.io"
  } ],
  NetSender: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0b35Jk3d5MW4/DdG1BkRlG", "NetSender");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var DataMgr_1 = require("../../BaseFrame/BaseManager/DataMgr");
    var NetMgr_1 = require("../../BaseFrame/BaseManager/NetMgr");
    var AppLog_1 = require("../../BaseFrame/Log/AppLog");
    var parts_1 = require("../../BaseFrame/Protobuf/common/parts");
    var connector_1 = require("../../BaseFrame/Protobuf/connector");
    var AppContext_1 = require("../AppContext/AppContext");
    var EventID_1 = require("../BaseModule/EventID");
    var GameEnums_1 = require("../BaseModule/GameEnums");
    var ccclass = cc._decorator.ccclass;
    var NetSender = function() {
      function NetSender() {}
      NetSender_1 = NetSender;
      NetSender.SetEventBind = function() {};
      NetSender.RegisteMessage = function(key, writer) {
        NetSender_1.eventMap.set(key, writer);
      };
      NetSender._ProtobufMsg = function(msgBuffer, proto, respType) {
        var repType = respType || GameEnums_1.ServerRespEvent.REQ_EVENT;
        var data = {
          msgType: proto.msgType,
          msg: msgBuffer,
          sn: NetMgr_1.default.Inst.sn,
          respType: repType
        };
        var clientBuffer = parts_1.MsgDataClient.encode(data).finish();
        var str = this.bufferToStr(clientBuffer);
        if ("SOCKET" == AppContext_1.default.Inst.LaunchParam.webMode) {
          var gameData = connector_1.GeneralMsg.create({
            type: connector_1.GeneralMsg.Type.TEXT,
            msg: str
          });
          var playId = AppContext_1.default.Inst.curLoginPLayerId;
          var msg = connector_1.MsgCommand.create({
            from: playId.toString(),
            to: "0",
            generalMsg: gameData
          });
          var sendData = connector_1.CommandMessage.create({
            type: connector_1.CommandMessage.Type.MSG,
            msgCommand: msg,
            clientType: connector_1.ClientType.APP,
            businessType: connector_1.BusinessType.NPET,
            appName: "nPet",
            key: playId.toString()
          });
          return sendData;
        }
        return data;
      };
      NetSender.SetNetData = function(netProtocolType, sData, respType) {
        var data = NetSender_1.eventMap.get(netProtocolType);
        if (data) {
          var proto = {
            msgType: netProtocolType,
            msg: sData
          };
          if (netProtocolType != EventID_1.NetSendMsgEnum.HeartBeat) {
            var logStr = "Send NetMsgType=" + netProtocolType;
            AppLog_1.default.CLog([ logStr, JSON.stringify(sData, null, "\t") ], "#EAED68");
          }
          var buffer = data(sData).finish();
          var sendData = NetSender_1._ProtobufMsg(buffer, proto, respType);
          return NetMgr_1.default.Inst.Emit(connector_1.MessageType.COMMAND, netProtocolType, sendData);
        }
      };
      NetSender.bufferToStr = function(buffer) {
        var str = Array.from(buffer).toString();
        var numArr = str.split(",").map(Number);
        var arr = [];
        numArr.forEach(function(v, k) {
          v >= 128 && (v -= 256);
          arr.push(v);
        });
        var finalStr = arr.toString();
        return finalStr;
      };
      NetSender.SendSauth = function() {
        var data = DataMgr_1.default.Inst.GetData(GameEnums_1.DataType.PERSONAL_DATA).GetSauthData();
        var sauthData = {
          userId: data.userId,
          sessionId: data.sessionId,
          clientType: connector_1.ClientType.APP,
          businessType: connector_1.BusinessType.NPET,
          clientVersion: data.clientVersion,
          deviceId: data.deviceId,
          deviceVendor: data.deviceVendor,
          deviceModel: data.deviceModel,
          deviceOsName: data.deviceOsName,
          deviceOsVersion: data.deviceOsVersion
        };
        var sendData = connector_1.SauthMessage.create(sauthData);
        console.warn(sendData);
        return NetMgr_1.default.Inst.Emit(connector_1.MessageType.SAUTH, "", sendData);
      };
      var NetSender_1;
      NetSender.eventMap = new Map();
      NetSender = NetSender_1 = __decorate([ ccclass ], NetSender);
      return NetSender;
    }();
    exports.default = NetSender;
    cc._RF.pop();
  }, {
    "../../BaseFrame/BaseManager/DataMgr": "DataMgr",
    "../../BaseFrame/BaseManager/NetMgr": "NetMgr",
    "../../BaseFrame/Log/AppLog": "AppLog",
    "../../BaseFrame/Protobuf/common/parts": "parts",
    "../../BaseFrame/Protobuf/connector": "connector",
    "../AppContext/AppContext": "AppContext",
    "../BaseModule/EventID": "EventID",
    "../BaseModule/GameEnums": "GameEnums"
  } ],
  PageCtrlBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d546CDc/pN9KifHCMhUnO5", "PageCtrlBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventMgr_1 = require("../BaseManager/EventMgr");
    var UIMgr_1 = require("../BaseManager/UIMgr");
    var AppLog_1 = require("../Log/AppLog");
    var PageCtrlBase = function() {
      function PageCtrlBase() {
        this._mapUIPath = null;
        this._eventList = [];
        this._mapUIPath = new Map();
        this._DefineOwnerUI();
      }
      PageCtrlBase.prototype.addEventListener = function(eventName, callBack, target) {
        this._eventList.push({
          eventName: eventName,
          callBack: callBack,
          target: target
        });
        EventMgr_1.EventMgr.Inst.addEvent(eventName, callBack, target);
      };
      PageCtrlBase.prototype.removeAllEventListener = function() {
        while (this._eventList.length > 0) {
          var data = this._eventList.pop();
          EventMgr_1.EventMgr.Inst.removeEvent(data.eventName, data.callBack, data.target);
        }
      };
      PageCtrlBase.prototype.Clear = function() {
        this.removeAllEventListener();
      };
      PageCtrlBase.prototype.GetUISync = function(uiName) {
        this._HasRegister(uiName);
        var ui = UIMgr_1.default.Inst.SyncCreatePopupByName(uiName);
        return ui;
      };
      PageCtrlBase.prototype.GetUIAsync = function(uiName, setGroup) {
        var _this = this;
        this._HasRegister(uiName);
        return new Promise(function(resolve, reject) {
          UIMgr_1.default.Inst.AsyncCreatePupopByPath(_this._mapUIPath.get(uiName), uiName, setGroup).then(function(ui) {
            return resolve(ui);
          }).catch(function(err) {
            AppLog_1.default.Error(err);
            return reject(err);
          });
        });
      };
      PageCtrlBase.prototype._HasRegister = function(uiName) {
        if (!this._mapUIPath.has(uiName)) throw new Error(uiName + " \u5e76\u6ca1\u6709\u767b\u8bb0, \u8bf7\u68c0\u67e5\u5bf9\u5e94controller");
      };
      return PageCtrlBase;
    }();
    exports.default = PageCtrlBase;
    cc._RF.pop();
  }, {
    "../BaseManager/EventMgr": "EventMgr",
    "../BaseManager/UIMgr": "UIMgr",
    "../Log/AppLog": "AppLog"
  } ],
  PersonalData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36eb8Hiq/5MTLHmiS6r3N4U", "PersonalData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppLog_1 = require("../../BaseFrame/Log/AppLog");
    var PersonalData = function() {
      function PersonalData(data) {
        void 0 === data && (data = {});
        this._userId = null;
        this._sessionId = null;
        this._version = null;
        this._deviceId = null;
        this._deviceVendor = null;
        this._deviceModel = null;
        this._deviceOsName = null;
        this._deviceOsVersion = null;
        this._userIdEcpt = null;
        AppLog_1.default.Log("SetLoginInfo=", data);
        this._userId = data.userId;
      }
      PersonalData.IsDefaultAvatarBg = function(name) {
        return "HeaderColor_Default" == name;
      };
      Object.defineProperty(PersonalData.prototype, "PlayerID", {
        get: function() {
          return this._userId;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PersonalData.prototype, "PlayerIdEcpt", {
        get: function() {
          return this._userIdEcpt;
        },
        enumerable: false,
        configurable: true
      });
      PersonalData.prototype.GetDeviceModel = function() {
        return this._deviceModel;
      };
      PersonalData.prototype.GetSauthData = function() {
        return {
          userId: this._userId.toString(),
          sessionId: this._sessionId,
          deviceId: this._deviceId,
          clientVersion: this._version,
          deviceVendor: this._deviceVendor,
          deviceModel: this._deviceModel,
          deviceOsName: this._deviceOsName,
          deviceOsVersion: this._deviceOsVersion
        };
      };
      return PersonalData;
    }();
    exports.default = PersonalData;
    cc._RF.pop();
  }, {
    "../../BaseFrame/Log/AppLog": "AppLog"
  } ],
  PlayerData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0643b7AJpxHhreDht3W4CpU", "PlayerData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PlayerData = function() {
      function PlayerData(recData) {
        this._playerData = null;
        this._initGameData(recData);
      }
      PlayerData.prototype._initGameData = function(recData) {};
      PlayerData.prototype.RefreshData = function(recData) {
        if (!this._playerData) {
          this._initGameData(recData);
          return;
        }
      };
      PlayerData.prototype.ClearModuleData = function() {
        this._playerData.clear();
        this._playerData = null;
      };
      PlayerData.TEST = false;
      return PlayerData;
    }();
    exports.default = PlayerData;
    cc._RF.pop();
  }, {} ],
  ProtocolHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "325b07iOW5NsIxt/1DhbypK", "ProtocolHelper");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppLog_1 = require("../Log/AppLog");
    var parts_1 = require("./common/parts");
    var connector_1 = require("./connector");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ProtocolHelper = function() {
      function ProtocolHelper() {}
      ProtocolHelper_1 = ProtocolHelper;
      ProtocolHelper.DecodeMsg = function(arrayBuff) {
        var recData = {
          CommandMessageType: -1,
          RespCommandType: -1,
          data: null
        };
        var dataview = new DataView(arrayBuff);
        var type = dataview.getUint8(1);
        if (type > 0) {
          var len = ProtocolHelper_1._ByteArrayToInt32(dataview.buffer.slice(2, 6));
          var buffData = dataview.buffer.slice(7, arrayBuff.byteLength);
          if (buffData.byteLength >= len) {
            var data = connector_1.CommandGroup.decode(new Uint8Array(buffData));
            for (var i = 0; i < data.commands.length; ++i) {
              var commMsg = data.commands[i];
              switch (commMsg.type) {
               case connector_1.CommandMessage.Type.RESP:
                switch (commMsg.respCommand.type) {
                 case connector_1.RespCommand.Type.SAUTH:
                  recData.CommandMessageType = connector_1.CommandMessage.Type.RESP;
                  recData.RespCommandType = connector_1.RespCommand.Type.SAUTH;
                  recData.data = commMsg.respCommand;
                  break;

                 default:
                  AppLog_1.default.Log("", commMsg.respCommand.errorMsg);
                  continue;
                }
                break;

               case connector_1.CommandMessage.Type.MSG:
                var msg = commMsg.msgCommand.generalMsg.msg;
                var finalData = [];
                if (commMsg.msgCommand.generalMsg.type == connector_1.GeneralMsg.Type.PIC) {
                  var msgArr = msg.split("|");
                  for (var i_1 = 0; i_1 < msgArr.length; ++i_1) {
                    var arr = new Uint8Array(msgArr[i_1].split(",").map(Number));
                    finalData.push(parts_1.MsgDataServer.decode(arr));
                  }
                } else {
                  var arr = new Uint8Array(msg.split(",").map(Number));
                  finalData = [ parts_1.MsgDataServer.decode(arr) ];
                }
                recData.CommandMessageType = connector_1.CommandMessage.Type.MSG;
                recData.data = finalData;
                break;

               default:
                AppLog_1.default.Log("df");
              }
            }
          }
        }
        return recData;
      };
      ProtocolHelper.EncryptMsg = function(type, data) {
        var stream = [ 1 ];
        stream.push(type);
        var bufferData = null;
        switch (type) {
         case connector_1.MessageType.SAUTH:
          bufferData = connector_1.SauthMessage.encode(data).finish();
          stream = stream.concat(this._Int32ToByteArray(bufferData.byteLength));
          stream = stream.concat([ 0, 0, 0 ]);
          break;

         case connector_1.MessageType.COMMAND:
          bufferData = connector_1.CommandMessage.encode(data).finish();
          stream = stream.concat(this._Int32ToByteArray(bufferData.byteLength));
        }
        stream.push(0);
        stream = stream.concat(Array.from(bufferData));
        var s = new Uint8Array(stream);
        return new Uint8Array(stream);
      };
      ProtocolHelper._Int32ToByteArray = function(val) {
        var byte = new Array(4);
        for (var i = 0; i < 4; ++i) {
          var idx = Math.abs(i - 3);
          byte[idx] = val >> 8 * i & 255;
        }
        return byte;
      };
      ProtocolHelper._ByteArrayToInt32 = function(byte) {
        var value = 0;
        var dv = new Uint8Array(byte);
        for (var i = 0; i < 4; ++i) {
          var idx = Math.abs(i - 3);
          value += dv[idx] * Math.pow(2, 8 * i);
        }
        return value;
      };
      var ProtocolHelper_1;
      ProtocolHelper = ProtocolHelper_1 = __decorate([ ccclass ], ProtocolHelper);
      return ProtocolHelper;
    }();
    exports.default = ProtocolHelper;
    cc._RF.pop();
  }, {
    "../Log/AppLog": "AppLog",
    "./common/parts": "parts",
    "./connector": "connector"
  } ],
  Queue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "674a6F+hu1PMbx/076gPj88", "Queue");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ccclass = cc._decorator.ccclass;
    var Queue = function() {
      function Queue() {
        this._dataStore = null;
        this._dataStore = [];
      }
      Queue.prototype.Enqueue = function(element) {
        this._dataStore.push(element);
      };
      Queue.prototype.Dequeue = function() {
        return this._dataStore.shift();
      };
      Object.defineProperty(Queue.prototype, "Front", {
        get: function() {
          return this._dataStore[0];
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Queue.prototype, "Back", {
        get: function() {
          return this._dataStore[this._dataStore.length - 1];
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Queue.prototype, "Empty", {
        get: function() {
          return 0 == this._dataStore.length;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Queue.prototype, "Count", {
        get: function() {
          return this._dataStore.length;
        },
        enumerable: false,
        configurable: true
      });
      Queue.prototype.FrontToBack = function() {
        var frontEle = this.Dequeue();
        this.Enqueue(frontEle);
      };
      Queue.prototype.BackToFront = function() {
        var backEle = this._dataStore.pop();
        this._dataStore.unshift(backEle);
      };
      Queue.prototype.FilterSelf = function(callback) {
        this._dataStore = this._dataStore.filter(callback);
      };
      Queue.prototype.Filter = function(callback) {
        return this._dataStore.filter(callback);
      };
      Queue.prototype.At = function(index) {
        return this._dataStore[index];
      };
      Queue = __decorate([ ccclass ], Queue);
      return Queue;
    }();
    exports.default = Queue;
    cc._RF.pop();
  }, {} ],
  ResLoader: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d57c45kbOFIfKo1VhgXZtwe", "ResLoader");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ResLoader = function() {
      function ResLoader() {}
      ResLoader.TagAsset = function(asset, tag) {
        if (!asset) throw new Error("without asset");
        this._mapTagAsset.set(tag, asset._uuid);
        this._mapUUidWithTag.set(asset._uuid, tag);
      };
      ResLoader.GroupAsset = function(asset, group) {
        if (!asset) throw new Error("without asset");
        this._mapGroupAsset.has(group) || this._mapGroupAsset.set(group, []);
        this._mapUUidWithGroup.has(asset._uuid) || this._mapUUidWithGroup.set(asset._uuid, []);
        var same = this._mapUUidWithGroup.get(asset._uuid).filter(function(g) {
          return g == group;
        });
        if (0 == same.length) {
          this._mapUUidWithGroup.get(asset._uuid).push(group);
          this._mapGroupAsset.get(group).push(asset._uuid);
        }
      };
      ResLoader.GetAssetByTag = function(tag) {
        var uuid = this._mapTagAsset.get(tag);
        if (!uuid) return null;
        return ResLoader._getCache(uuid);
      };
      ResLoader.GetAssetsByGroup = function(group) {
        var arrRes = [];
        if (!this._mapGroupAsset.get(group)) return arrRes;
        var uuids = this._mapGroupAsset.get(group);
        for (var i = 0; i < uuids.length; ++i) {
          var asset = ResLoader._getCache(uuids[i]);
          asset && arrRes.push(asset);
        }
        return arrRes;
      };
      ResLoader.LoadBundle = function(bundleName) {
        return new Promise(function(resolve, reject) {
          cc.assetManager.loadBundle(bundleName, function(err, bundle) {
            if (err) {
              console.error(err);
              return reject(err);
            }
            return resolve(bundle);
          });
        });
      };
      ResLoader.LoadBundleResource = function(resource, bundle, type, onProgress) {
        return "object" === typeof bundle || cc.assetManager.getBundle(bundle) ? "object" !== typeof bundle ? ResLoader._LoadBundleResource(cc.assetManager.getBundle(bundle), resource, type) : ResLoader._LoadBundleResource(bundle, resource, type) : new Promise(function(resolve, reject) {
          ResLoader.LoadBundle(bundle).then(function(bundle) {
            ResLoader._LoadBundleResource(bundle, resource, type, onProgress).then(function(asset) {
              return resolve(asset);
            }).catch(function(err) {
              return reject(err);
            });
          }).catch(function(err) {
            return reject(err);
          });
        });
      };
      ResLoader.LoadBundleScene = function(sceneName, bundle, onProgress) {
        return "object" === typeof bundle || cc.assetManager.getBundle(bundle) ? "object" !== typeof bundle ? ResLoader._LoadBundleScene(cc.assetManager.getBundle(bundle), sceneName) : ResLoader._LoadBundleScene(bundle, sceneName) : new Promise(function(resolve, reject) {
          ResLoader.LoadBundle(bundle).then(function(bundle) {
            ResLoader._LoadBundleScene(bundle, sceneName, onProgress).then(function(asset) {
              return resolve(asset);
            }).catch(function(err) {
              return reject(err);
            });
          }).catch(function(err) {
            return reject(err);
          });
        });
      };
      ResLoader.PreLoadResource = function(resource, type, onProgress) {
        return new Promise(function(resolve, reject) {
          cc.resources.preload(resource, type, onProgress, function(err, asset) {
            if (err) {
              console.error(err);
              return reject(err);
            }
            return resolve(asset);
          });
        });
      };
      ResLoader.LoadResource = function(resource, type, onProgress) {
        return new Promise(function(resolve, reject) {
          cc.resources.load(resource, type, onProgress, function(err, asset) {
            if (err) {
              console.error(err);
              return reject(err);
            }
            return resolve(asset);
          });
        });
      };
      ResLoader.LoadDragResource = function(pathdir) {
        return new Promise(function(resolve, reject) {
          cc.resources.loadDir(pathdir, function(err, asset) {
            if (err) {
              console.error(err);
              return reject(err);
            }
            var dragAssets_1 = {
              dragonAsset: null,
              dragonAtlasAsset: null
            };
            asset.forEach(function(item) {
              item instanceof dragonBones.DragonBonesAsset && (dragAssets_1.dragonAsset = item);
              item instanceof dragonBones.DragonBonesAtlasAsset && (dragAssets_1.dragonAtlasAsset = item);
            });
            return resolve(dragAssets_1);
          });
        });
      };
      ResLoader.LoadFromUrl = function(url, type) {
        return new Promise(function(resolve, reject) {
          cc.assetManager.loadRemote(url, type, function(err, asset) {
            if (err) {
              console.error(err);
              return reject(err);
            }
            asset instanceof cc.Texture2D && (cc.assetManager.assets._map[asset._uuid] = asset);
            resolve(asset);
          });
        });
      };
      ResLoader.ReleaseAssetFromTag = function(tag) {
        var uuid = this._mapTagAsset.get(tag);
        var asset = ResLoader._getCache(uuid);
        this._mapTagAsset.delete(tag);
        this._mapUUidWithTag.delete(uuid);
        if (asset) {
          this._mapUUidWithTag.delete(uuid);
          this._mapUUidWithGroup.has(uuid) || cc.assetManager.releaseAsset(asset);
        }
      };
      ResLoader.ReleaseAssetFromAllTag = function() {
        this._mapTagAsset.forEach(function(asset, tag) {
          ResLoader.ReleaseAssetFromTag(tag);
        });
      };
      ResLoader.ReleaseAssetsFromGroup = function(group, releaseTag) {
        var uuids = this._mapGroupAsset.get(group);
        if (uuids && uuids.length > 0) {
          for (var i = 0; i < uuids.length; ++i) {
            var uuid = uuids[i];
            if (this._mapUUidWithGroup.has(uuid)) {
              var groups = this._mapUUidWithGroup.get(uuid).filter(function(groupName) {
                return groupName != group;
              });
              if (0 == groups.length) {
                var tag = this._mapUUidWithTag.get(uuid);
                if (!tag || releaseTag) {
                  var asset = ResLoader._getCache(uuid);
                  asset && cc.assetManager.releaseAsset(asset);
                  if (releaseTag) {
                    this._mapTagAsset.delete(tag);
                    this._mapUUidWithTag.delete(uuid);
                  }
                }
                this._mapUUidWithGroup.delete(uuid);
              } else this._mapUUidWithGroup.set(uuid, groups);
            }
          }
          this._mapGroupAsset.delete(group);
        }
      };
      ResLoader.ReleaseAssetsFromAllGroup = function(releaseTag) {
        this._mapGroupAsset.forEach(function(uuids, group) {
          ResLoader.ReleaseAssetsFromGroup(group, releaseTag);
        });
      };
      ResLoader.OptimalCacheRecord = function() {
        var _this = this;
        this._mapTagAsset.forEach(function(uuid, tag) {
          if (!ResLoader._getCache(uuid)) {
            _this._mapTagAsset.delete(tag);
            _this._mapUUidWithTag.delete(uuid);
          }
        });
        this._mapGroupAsset.forEach(function(uuids, group) {
          uuids = uuids.filter(function(uuid) {
            if (!ResLoader._getCache(uuid)) {
              _this._mapUUidWithGroup.delete(uuid);
              return false;
            }
            return true;
          });
          0 == uuids.length ? _this._mapGroupAsset.delete(group) : _this._mapGroupAsset.set(group, uuids);
        });
      };
      ResLoader._LoadBundleResource = function(bundle, resource, type, onProgress) {
        return new Promise(function(resolve, reject) {
          bundle.load(resource, type, onProgress, function(err, asset) {
            if (err) return reject(err);
            if ("string" == typeof resource) return resolve(asset);
          });
        });
      };
      ResLoader._LoadBundleScene = function(bundle, sceneName, onProgress) {
        return new Promise(function(resolve, reject) {
          bundle.loadScene(sceneName, onProgress, function(err, asset) {
            if (err) return reject(err);
            return resolve(asset);
          });
        });
      };
      ResLoader._getCache = function(uuid) {
        return cc.assetManager.assets._map[uuid];
      };
      ResLoader._mapTagAsset = new Map();
      ResLoader._mapUUidWithTag = new Map();
      ResLoader._mapGroupAsset = new Map();
      ResLoader._mapUUidWithGroup = new Map();
      return ResLoader;
    }();
    exports.default = ResLoader;
    cc._RF.pop();
  }, {} ],
  SceneCtrlBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a107+hMj9P7KWpAvIKlU4G", "SceneCtrlBase");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SceneCtrlBase = function() {
      function SceneCtrlBase(args) {
        this._ownerView = null;
      }
      Object.defineProperty(SceneCtrlBase.prototype, "ownerView", {
        set: function(view) {
          this._ownerView = view;
        },
        enumerable: false,
        configurable: true
      });
      SceneCtrlBase.prototype.OnSceneBinded = function(param) {};
      SceneCtrlBase.prototype.OnSceneEnd = function() {};
      SceneCtrlBase.prototype.OnTick = function(dt) {};
      SceneCtrlBase = __decorate([ ccclass ], SceneCtrlBase);
      return SceneCtrlBase;
    }();
    exports.default = SceneCtrlBase;
    cc._RF.pop();
  }, {} ],
  SceneMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9f56oInIBBR5dnSQjG9ZSF", "SceneMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppLog_1 = require("../Log/AppLog");
    var SceneMgr = function() {
      function SceneMgr() {
        this._currSceneName = null;
        this._lastSceneName = null;
        this._isLoadingScene = false;
        this._currSceneName = this.GetCurrentSceneName();
        this._lastSceneName = "";
        this._isLoadingScene = false;
      }
      Object.defineProperty(SceneMgr.prototype, "IsSwitching", {
        get: function() {
          return this._isLoadingScene;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SceneMgr, "Inst", {
        get: function() {
          null == SceneMgr._inst && (SceneMgr._inst = new SceneMgr());
          return this._inst;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SceneMgr.prototype, "lastSceneName", {
        get: function() {
          return this._lastSceneName;
        },
        enumerable: false,
        configurable: true
      });
      SceneMgr.prototype.Destroy = function() {
        SceneMgr._inst = null;
      };
      SceneMgr.prototype.PreLoadScene = function(sceneName) {
        return new Promise(function(resolve, reject) {
          cc.director.preloadScene(sceneName, void 0, function(error) {
            AppLog_1.default.Info("Next scene---" + sceneName + "--- preloaded");
            return error ? reject(error) : resolve();
          });
        });
      };
      SceneMgr.prototype.LoadScene = function(sceneName, param) {
        var _this = this;
        return new Promise(function(resolve, reject) {
          if (_this._currSceneName != sceneName) {
            if (_this._isLoadingScene) return;
            _this._isLoadingScene = true;
            var loadSceneCallback = function() {
              AppLog_1.default.Info("scene " + sceneName + " load finish");
              this._isLoadingScene = false;
              this._lastSceneName = this._currSceneName;
              this._currSceneName = sceneName;
              AppLog_1.default.Info("Scene_" + sceneName + "_Load_End");
              resolve(param);
            }.bind(_this);
            cc.director.loadScene(sceneName, loadSceneCallback);
          }
        });
      };
      SceneMgr.prototype.GetCurrentSceneName = function() {
        var currentScene = cc.director.getScene();
        return null == currentScene ? null : currentScene.name;
      };
      SceneMgr._inst = null;
      return SceneMgr;
    }();
    exports.default = SceneMgr;
    cc._RF.pop();
  }, {
    "../Log/AppLog": "AppLog"
  } ],
  ScrollViewCtrl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c7cebpIJx9FNrFIXIGFAizI", "ScrollViewCtrl");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ItemBase_1 = require("./ItemBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SCROLLVIEW_DIRECTION;
    (function(SCROLLVIEW_DIRECTION) {
      SCROLLVIEW_DIRECTION[SCROLLVIEW_DIRECTION["HORIZONTAL"] = 0] = "HORIZONTAL";
      SCROLLVIEW_DIRECTION[SCROLLVIEW_DIRECTION["VECTICAL"] = 1] = "VECTICAL";
    })(SCROLLVIEW_DIRECTION || (SCROLLVIEW_DIRECTION = {}));
    var ScrollViewCtrl = function(_super) {
      __extends(ScrollViewCtrl, _super);
      function ScrollViewCtrl() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.scrollView = null;
        _this.direction = SCROLLVIEW_DIRECTION.VECTICAL;
        _this.groupDataNum = 1;
        _this.pfItem = null;
        _this.spacing = 10;
        _this._bottom_right_Node = null;
        _this._top_left_Node = null;
        _this._RepeatNodeArray = [];
        _this._RepeatNodeCtrlArray = [];
        _this._contentXorY = 0;
        _this._scrollViewData = [];
        _this.initUIFinish = false;
        return _this;
      }
      ScrollViewCtrl.prototype.setServerData = function(data) {
        if (data.length <= 0) return;
        this.FreshScrollViewByData(data);
      };
      ScrollViewCtrl.prototype.onLoad = function() {
        this.LodaInit();
      };
      ScrollViewCtrl.prototype.getScrollViewData = function() {
        return this._scrollViewData;
      };
      ScrollViewCtrl.prototype.LodaInit = function() {};
      ScrollViewCtrl.prototype.FreshScrollViewByData = function(data) {
        this._formatData(data);
        if (!this.initUIFinish) return;
        for (var index = 0; index < this._RepeatNodeCtrlArray.length; index++) {
          var idx = this._RepeatNodeCtrlArray[index].idx;
          var data_1 = idx < this._scrollViewData.length ? this._scrollViewData[idx] : void 0;
          this._RepeatNodeCtrlArray[index].FreashData(idx, this, data_1);
        }
        this._setContentSize();
        this._scrollingEvent();
      };
      ScrollViewCtrl.prototype.ScrollToTop = function() {};
      ScrollViewCtrl.prototype.onEnable = function() {
        this.initUIFinish || this._initViewLists();
      };
      ScrollViewCtrl.prototype._initViewLists = function() {
        this._creatScrollViewItems();
        this._setContentSize();
        this._InitListener();
        this.initUIFinish = true;
        this.FreshScrollViewByData(this._scrollViewData);
      };
      ScrollViewCtrl.prototype.ClearScrollViewUI = function() {
        this._bottom_right_Node = null;
        this._top_left_Node = null;
        this._contentXorY = 0;
        this.initUIFinish = false;
        console.error(this.scrollView.content.y);
        this.scrollView.content.y = 0;
        this.scrollView.content.height = 0;
        for (var _i = 0, _a = this._RepeatNodeArray; _i < _a.length; _i++) {
          var iterator = _a[_i];
          iterator.removeFromParent(true);
          iterator.destroy();
        }
        this._RepeatNodeArray = [];
        this._RepeatNodeCtrlArray = [];
        this.scrollView.stopAutoScroll();
        this.scrollView.scrollToTop(0);
        this._initViewLists();
      };
      ScrollViewCtrl.prototype._creatScrollViewItems = function() {
        var firstNode = null;
        var maxItemNum = 10;
        for (var index = 0; index < maxItemNum; index++) {
          var item_1 = this._creatItem();
          this._RepeatNodeArray.push(item_1);
          this._RepeatNodeCtrlArray.push(item_1.getComponent(ItemBase_1.default));
          firstNode || (firstNode = item_1);
          if (this.direction === SCROLLVIEW_DIRECTION.VECTICAL) {
            if (-item_1.position.y + item_1.height / 2 > this.scrollView.node.height) break;
          } else if (item_1.position.x + item_1.height / 2 > this.scrollView.node.height) break;
        }
        var item = this._creatItem();
        this._RepeatNodeArray.push(item);
        this._RepeatNodeCtrlArray.push(item.getComponent(ItemBase_1.default));
        this._top_left_Node = firstNode;
        this.initUIFinish = true;
      };
      ScrollViewCtrl.prototype._setContentSize = function() {
        if (this.direction === SCROLLVIEW_DIRECTION.VECTICAL) {
          var contentHeight = this.spacing + (this._bottom_right_Node.height + this.spacing) * this._scrollViewData.length;
          this.scrollView.content.height = contentHeight;
        } else {
          var contentWidth = this.spacing + (this._bottom_right_Node.width + this.spacing) * this._scrollViewData.length;
          this.scrollView.content.width = contentWidth;
        }
      };
      ScrollViewCtrl.prototype._formatData = function(data) {
        this._scrollViewData = [];
        var dataArray = [];
        for (var index = 0; index < data.length; index++) {
          if (dataArray.length >= this.groupDataNum) {
            this._scrollViewData.push(dataArray);
            dataArray = [];
          }
          dataArray.push(data[index]);
        }
        dataArray.length > 0 && this._scrollViewData.push(dataArray);
      };
      ScrollViewCtrl.prototype._InitListener = function() {
        this.scrollView.node.off("scrolling", this._scrollingEvent, this);
        this.scrollView.node.on("scrolling", this._scrollingEvent, this);
      };
      ScrollViewCtrl.prototype._scrollingEvent = function() {
        this.direction === SCROLLVIEW_DIRECTION.VECTICAL ? this._scrollingVectical() : this._scrollingHorizontal();
      };
      ScrollViewCtrl.prototype._scrollingVectical = function() {
        this.scrollView.content.y > this._contentXorY ? this._checkBottomItemPos() : this._checkTopItemPos();
        this._contentXorY = this.scrollView.content.y;
      };
      ScrollViewCtrl.prototype._scrollingHorizontal = function() {
        this.scrollView.content.x < this._contentXorY ? this._checkBottomItemPos() : this._checkTopItemPos();
        this._contentXorY = this.scrollView.content.x;
      };
      ScrollViewCtrl.prototype._checkTopItemPos = function() {
        var pos = this.scrollView.node.convertToNodeSpaceAR(this._bottom_right_Node.convertToWorldSpaceAR(cc.v2(0, 0)));
        if (this.direction === SCROLLVIEW_DIRECTION.VECTICAL) {
          var freshBottom = pos.y < -this.scrollView.node.height / 2 - this.spacing - this._bottom_right_Node.height / 2;
          freshBottom && this.freshItemPosAndUI(this._bottom_right_Node, false);
        } else {
          var freshBottom = pos.x > this.scrollView.node.width / 2 + this.spacing + this._bottom_right_Node.width / 2;
          freshBottom && this.freshItemPosAndUI(this._bottom_right_Node, false);
        }
      };
      ScrollViewCtrl.prototype._checkBottomItemPos = function() {
        var pos = this.scrollView.node.convertToNodeSpaceAR(this._top_left_Node.convertToWorldSpaceAR(cc.v2(0, 0)));
        if (this.direction === SCROLLVIEW_DIRECTION.VECTICAL) {
          var freshTop = pos.y > this.scrollView.node.height / 2 + this.spacing + this._top_left_Node.height / 2;
          freshTop && this.freshItemPosAndUI(this._top_left_Node, true);
        } else {
          var freshTop = pos.x < -this.scrollView.node.width / 2 - this.spacing - this._top_left_Node.width / 2;
          freshTop && this.freshItemPosAndUI(this._top_left_Node, true);
        }
      };
      ScrollViewCtrl.prototype._ChackHorizontalItemPos = function() {
        var pos = this.scrollView.content.convertToNodeSpaceAR(this._top_left_Node.convertToWorldSpaceAR(cc.v2()));
        var freshTop = pos.y > this.spacing + this._top_left_Node.height / 2;
        freshTop && this.freshItemPosAndUI(this._top_left_Node, true);
        var freshBottom = this._bottom_right_Node.y < -this.scrollView.node.height - this.spacing - this._bottom_right_Node.height / 2;
        freshBottom && this.freshItemPosAndUI(this._bottom_right_Node, false);
      };
      ScrollViewCtrl.prototype._creatItem = function() {
        var item = cc.instantiate(this.pfItem);
        this.freshItemPosAndUI(item, true);
        this.scrollView.content.addChild(item);
        console.log(item.y);
        return item;
      };
      ScrollViewCtrl.prototype.freshItemPosAndUI = function(item, moveToEnd) {
        moveToEnd ? this._moveToBottomOrRight(item) : this._moveToTopOrLeft(item);
      };
      ScrollViewCtrl.prototype._moveToTopOrLeft = function(item) {
        var _top_left_Node_pos = this._top_left_Node ? cc.v2(this._top_left_Node) : cc.v2(0, 0);
        if (this.direction === SCROLLVIEW_DIRECTION.VECTICAL) {
          var _top_left_Node_height = this._top_left_Node ? this._top_left_Node.height : 0;
          var addSpacing = _top_left_Node_pos.y + _top_left_Node_height / 2 + item.height / 2 + this.spacing;
          var pos = cc.v2(0, addSpacing);
          if (pos.y > 0) return;
          item.setPosition(pos);
        } else {
          var _top_left_Node_width = this._top_left_Node ? this._top_left_Node.width : 0;
          var addSpacing = _top_left_Node_pos.x - _top_left_Node_width / 2 - item.width / 2 - this.spacing;
          var pos = cc.v2(addSpacing, 0);
          if (pos.x < 0) return;
          item.setPosition(pos);
        }
        var idx = this._top_left_Node.getComponent(ItemBase_1.default).idx - 1;
        var data = idx < 0 ? void 0 : this._scrollViewData[idx];
        item.getComponent(ItemBase_1.default).FreashData(idx, this, data);
        this._top_left_Node = item;
        this._bottom_right_Node === item && (this._bottom_right_Node = this._RepeatNodeArray[(this._RepeatNodeArray.indexOf(item) + this._RepeatNodeArray.length - 1) % this._RepeatNodeArray.length]);
        this._bottom_right_Node || console.error("error");
      };
      ScrollViewCtrl.prototype._moveToBottomOrRight = function(item) {
        var _bottom_right_Node_pos = this._bottom_right_Node ? cc.v2(this._bottom_right_Node) : cc.v2(0, 0);
        if (this.direction === SCROLLVIEW_DIRECTION.VECTICAL) {
          var _bottom_right_Node_height = this._bottom_right_Node ? this._bottom_right_Node.height : 0;
          var addSpacing = item.height / 2 + _bottom_right_Node_height / 2 + this.spacing;
          var pos = cc.v2(0, _bottom_right_Node_pos.y - addSpacing);
          if (this.initUIFinish && pos.y <= -this.scrollView.content.height) return;
          item.setPosition(pos);
        } else {
          var _bottom_right_Node_width = this._bottom_right_Node ? this._bottom_right_Node.width : 0;
          var addSpacing = item.width / 2 + _bottom_right_Node_width / 2 + this.spacing;
          var pos = cc.v2(_bottom_right_Node_pos.x + addSpacing, 0);
          if (this.initUIFinish && pos.x > this.scrollView.content.width) return;
          item.setPosition(pos);
        }
        var idx = 0;
        this._bottom_right_Node && (idx = this._bottom_right_Node.getComponent(ItemBase_1.default).idx + 1);
        var data = idx >= this._scrollViewData.length ? void 0 : this._scrollViewData[idx];
        item.getComponent(ItemBase_1.default).FreashData(idx, this, data);
        this._bottom_right_Node = item;
        this._top_left_Node === item && (this._top_left_Node = this._RepeatNodeArray[(this._RepeatNodeArray.indexOf(item) + 1) % this._RepeatNodeArray.length]);
      };
      __decorate([ property(cc.ScrollView) ], ScrollViewCtrl.prototype, "scrollView", void 0);
      __decorate([ property({
        type: cc.Enum(SCROLLVIEW_DIRECTION),
        tooltip: "\u65b9\u5411"
      }) ], ScrollViewCtrl.prototype, "direction", void 0);
      __decorate([ property({
        tooltip: "\u6bcf\u7ec4\u6570\u636e\u4e2a\u6570\uff0c2\u8868\u793a\uff1a2\u4e2a\u6570\u636e\u4e00\u7ec4\u4f20\u9012\u7ed9\u4e00\u4e2apfItem\uff0cpfItem\u4e2d\u81f3\u5c11\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u63a5\u5e94"
      }) ], ScrollViewCtrl.prototype, "groupDataNum", void 0);
      __decorate([ property({
        type: cc.Prefab,
        tooltip: "item\u9884\u8d28\u4f53\uff1b\u5982\u679cGroupDataNum\u4e2d\u67092\u4e2a\uff0c\u5bf9\u5e94pfItem\u4e2d\u4e5f\u8981\u505a\u4e24\u4e2a\u5904\u7406\u4e0e\u4e4b\u5bf9\u5e94"
      }) ], ScrollViewCtrl.prototype, "pfItem", void 0);
      __decorate([ property ], ScrollViewCtrl.prototype, "spacing", void 0);
      ScrollViewCtrl = __decorate([ ccclass ], ScrollViewCtrl);
      return ScrollViewCtrl;
    }(cc.Component);
    exports.default = ScrollViewCtrl;
    cc._RF.pop();
  }, {
    "./ItemBase": "ItemBase"
  } ],
  SimpleFSMState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea317uorRxDo59lSCNtFCJF", "SimpleFSMState");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ccclass = cc._decorator.ccclass;
    var SimpleFSMState = function() {
      function SimpleFSMState() {
        this._ownerFSM = null;
        this.nextState = 0;
      }
      Object.defineProperty(SimpleFSMState.prototype, "ownerObj", {
        get: function() {
          return this._ownerFSM.ownerObj;
        },
        enumerable: false,
        configurable: true
      });
      SimpleFSMState.prototype.OnInitPrepareState = function(owner) {
        this._ownerFSM = owner;
      };
      SimpleFSMState.prototype.OnDestroyState = function() {
        this._ownerFSM = null;
      };
      SimpleFSMState.prototype.ActState = function(transition, param) {
        this._ownerFSM.TransitionTo(transition, param);
      };
      SimpleFSMState.prototype.GetNextState = function(transition) {
        return this._ownerFSM.GetStateByTransition(transition);
      };
      SimpleFSMState = __decorate([ ccclass ], SimpleFSMState);
      return SimpleFSMState;
    }();
    exports.default = SimpleFSMState;
    cc._RF.pop();
  }, {} ],
  SimpleFSMSystem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea0c54DAApLuZFzrgGOWNHY", "SimpleFSMSystem");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ccclass = cc._decorator.ccclass;
    var SimpleFSMSystem = function() {
      function SimpleFSMSystem(owner) {
        this._currState = null;
        this._allState = null;
        this._currStateUID = null;
        this._prevStateUID = null;
        this._ownerObj = owner;
        this._allState = new Map();
        this._OnInitAllStates();
      }
      Object.defineProperty(SimpleFSMSystem.prototype, "prevStatUID", {
        get: function() {
          return this._prevStateUID;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SimpleFSMSystem.prototype, "ownerObj", {
        get: function() {
          return this._ownerObj;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SimpleFSMSystem.prototype, "currStateUID", {
        get: function() {
          return this._currStateUID;
        },
        enumerable: false,
        configurable: true
      });
      SimpleFSMSystem.prototype.EndFSM = function() {
        this._PerformTransition(null);
      };
      SimpleFSMSystem.prototype.OnDestroyFSM = function() {
        try {
          this.EndFSM();
        } catch (err) {}
        this._allState.forEach(function(v, k) {
          v.OnDestroyState();
        });
        this._allState = null;
        this._ownerObj = null;
      };
      SimpleFSMSystem.prototype.OnUpdateTickFSM = function(dt) {
        if (null == this._currState) return;
        var transition = this._currState.ReasonState(dt);
        null != transition && (transition.state ? this._currState.ActState(transition.state, transition.param) : this._currState.ActState(transition));
      };
      SimpleFSMSystem.prototype.TransitionTo = function(transition, param) {
        var nextState = null;
        nextState = null == this._currState ? this.GetStateByTransition(transition) : this._currState.GetNextState(transition);
        if (null == nextState) return false;
        (true, null != this._currState) && null != nextState && this._DebugLogForFSM(this._currState.GetUniqueID(), nextState.GetUniqueID());
        this._PerformTransition(nextState, param);
        return true;
      };
      SimpleFSMSystem.prototype.GetStateByTransition = function(transition) {
        return this._allState.get(transition);
      };
      SimpleFSMSystem.prototype._PerformTransition = function(nextState, param) {
        if (null != this._currState) {
          this._currState.OnBeforeLeaving(param);
          this._prevStateUID = this._currStateUID;
          this._currStateUID = null;
        }
        this._currState = nextState;
        if (null != this._currState) {
          this._currStateUID = this._currState.GetUniqueID();
          this._currState.OnBeforeEntering(param);
        }
      };
      SimpleFSMSystem.prototype._AddState = function(state) {
        state.OnInitPrepareState(this);
        var uid = state.GetUniqueID();
        this._allState.has(uid) && this._allState.get(uid).OnDestroyState();
        this._allState.set(uid, state);
      };
      SimpleFSMSystem = __decorate([ ccclass ], SimpleFSMSystem);
      return SimpleFSMSystem;
    }();
    exports.default = SimpleFSMSystem;
    cc._RF.pop();
  }, {} ],
  SpineBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9bd5qE6lREq5c3yWywMqNi", "SpineBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AppLog_1 = require("../Log/AppLog");
    var SpineBase = function() {
      function SpineBase() {
        this._spineName = null;
        this._playingAnimName = null;
        this._playAnimCompleteCallback = null;
        this._isPlayingAnim = false;
        this._init = false;
      }
      SpineBase.prototype.Create = function() {
        AppLog_1.default.Error("spine Create");
      };
      SpineBase.prototype.InitSpine = function(spineName, rootNode, isRemote) {
        void 0 === isRemote && (isRemote = false);
        return isRemote ? this.InitRemoteSpine(spineName, rootNode, isRemote) : this.InitLocalSpine(spineName, rootNode, isRemote);
      };
      SpineBase.prototype.InitLocalSpine = function(spineName, rootNode, isRemote) {
        var _this = this;
        void 0 === isRemote && (isRemote = false);
        this._spineName = spineName;
        var self = this;
        return new Promise(function(resolve, reject) {
          var dir = "spines/" + spineName + "/" + spineName;
          AppLog_1.default.Error(">>>>>>>>\u52a0\u8f7dspine\u6587\u4ef6<<<<<<<<", dir);
          cc.resources.load(dir, sp.SkeletonData, function(error, asset) {
            if (error) return reject(error);
            var nodeNew = new cc.Node();
            self._skeleton = nodeNew.addComponent(sp.Skeleton);
            self._skeleton.skeletonData = asset;
            rootNode.addChild(nodeNew);
            _this._spineNode = nodeNew;
            return resolve(self);
          });
        });
      };
      SpineBase.prototype.InitRemoteSpine = function(spineName, rootNode, isRemote) {
        void 0 === isRemote && (isRemote = false);
        var self = this;
        return new Promise(function(resolve, reject) {
          var url = "https://fe-media.soulapp.cn/new-pet/";
          var image = "" + url + spineName + ".png";
          var ske = "" + url + spineName + ".skel";
          var atlas = "" + url + spineName + ".atlas";
          cc.assetManager.loadAny([ {
            url: atlas,
            ext: ".txt"
          }, {
            url: ske,
            ext: ".bin"
          } ], function(error, assets) {
            cc.assetManager.loadRemote(image, function(error, texture) {
              if (error) return reject(error);
              var pngName = spineName + ".png";
              var asset = new sp.SkeletonData();
              asset._nativeAsset = assets[1];
              asset.atlasText = assets[0];
              asset.textures = [ texture ];
              asset.textureNames = [ pngName ];
              var nodeNew = new cc.Node();
              self._skeleton = nodeNew.addComponent(sp.Skeleton);
              self._skeleton.skeletonData = asset;
              self._spineNode = nodeNew;
              rootNode.addChild(nodeNew);
              AppLog_1.default.Error(self._skeleton.skeletonData.refCount);
              return resolve(self);
            });
          });
        });
      };
      SpineBase.prototype.PlayAnimation = function(animName, isLoop) {
        void 0 === isLoop && (isLoop = false);
        this._playingAnimName = animName;
        this._skeleton.setAnimation(0, animName, isLoop);
      };
      SpineBase.prototype.Clear = function() {
        var a = cc.assetManager.assets;
        AppLog_1.default.Error("a=", a);
        cc.assetManager.releaseAsset(this._skeleton.skeletonData);
        this._spineNode.destroy();
      };
      return SpineBase;
    }();
    exports.default = SpineBase;
    cc._RF.pop();
  }, {
    "../Log/AppLog": "AppLog"
  } ],
  SpineMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "94c01Ek65BKGqidxEy3XQr4", "SpineMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SpineBase_1 = require("../BaseControl/SpineBase");
    var SpineMgr = function() {
      function SpineMgr() {
        this._loadingSpineSet = null;
        this._mapSpineRefer = null;
        this._loadingSpineSet = new Set();
        this._mapSpineRefer = new Map();
      }
      Object.defineProperty(SpineMgr, "Inst", {
        get: function() {
          null == SpineMgr._inst && (SpineMgr._inst = new SpineMgr());
          return this._inst;
        },
        enumerable: false,
        configurable: true
      });
      SpineMgr.prototype.AddSpine = function(spineName, rootNode, isRemote) {
        var _this = this;
        void 0 === isRemote && (isRemote = false);
        var self = this;
        return new Promise(function(resolve, reject) {
          _this._loadingSpineSet.add(spineName);
          var spb = new SpineBase_1.default();
          spb.InitSpine(spineName, rootNode, isRemote).then(function(asset) {
            self._loadingSpineSet.delete(spineName);
            if (_this._mapSpineRefer.has(spineName)) {
              var count = self._mapSpineRefer.get(spineName);
              self._mapSpineRefer.set(spineName, asset);
            } else self._mapSpineRefer.set(spineName, asset);
            return resolve(spb);
          }).catch(function() {
            self._loadingSpineSet.delete(spineName);
            return reject(reject);
          });
        });
      };
      SpineMgr.prototype.ReleaseSpine = function(spineName) {
        var a = this._mapSpineRefer.get(spineName);
        a.Clear();
      };
      SpineMgr.prototype.IsLoadingSpine = function(name) {
        return this._loadingSpineSet.has(name);
      };
      SpineMgr.prototype.Destroy = function() {
        SpineMgr._inst = null;
      };
      SpineMgr._inst = null;
      return SpineMgr;
    }();
    exports.default = SpineMgr;
    cc._RF.pop();
  }, {
    "../BaseControl/SpineBase": "SpineBase"
  } ],
  SpriteFrameSet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37eb7+NE+pCEbeD8GtCyf1c", "SpriteFrameSet");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SpriteFrameSet = function() {
      function SpriteFrameSet() {
        this.name = "SpriteFrameSet";
        this.language = "";
        this.spriteFrame = null;
      }
      __decorate([ property() ], SpriteFrameSet.prototype, "language", void 0);
      __decorate([ property({
        type: cc.SpriteFrame
      }) ], SpriteFrameSet.prototype, "spriteFrame", void 0);
      SpriteFrameSet = __decorate([ ccclass("SpriteFrameSet") ], SpriteFrameSet);
      return SpriteFrameSet;
    }();
    exports.default = SpriteFrameSet;
    cc._RF.pop();
  }, {} ],
  TableConfigData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "534edbI0StInbPsSrEQr5JU", "TableConfigData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TableConfigData = void 0;
    var TableConfigData = function() {
      function TableConfigData() {}
      TableConfigData.Init = function() {
        TableConfigData.coinData = new Map();
        TableConfigData.foodData = new Map();
      };
      TableConfigData.ClearAll = function() {
        TableConfigData.coinData.clear();
        TableConfigData.foodData.clear();
      };
      return TableConfigData;
    }();
    exports.TableConfigData = TableConfigData;
    cc._RF.pop();
  }, {} ],
  TextEnums: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8fa7x0H+VDOI73FbmAHUvD", "TextEnums");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ErrorContent = exports.ErrorType = void 0;
    var ErrorType;
    (function(ErrorType) {
      ErrorType["NET_ERROR"] = "\u7f51\u7edc\u9519\u8bef";
      ErrorType["LOCAL_ERROR"] = "\u672c\u5730\u9519\u8bef";
      ErrorType["UNKNOK_ERROR"] = "\u672a\u77e5\u9519\u8bef";
      ErrorType["NOTE"] = "\u6ce8\u610f";
      ErrorType["WARNING"] = "\u8b66\u544a";
      ErrorType["WX_ERROR"] = "\u5fae\u4fe1\u9519\u8bef";
      ErrorType["TIPS"] = "\u53cb\u60c5\u63d0\u793a";
    })(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
    var ErrorContent;
    (function(ErrorContent) {
      ErrorContent["INIT_INFO"] = "\u521d\u59cb\u5316\u7528\u6237\u6570\u636e\u5931\u8d25";
      ErrorContent["INIT_POWER"] = "\u521d\u59cb\u5316\u80fd\u91cf\u5931\u8d25";
      ErrorContent["CHECK_TIME"] = "\u6821\u5bf9\u670d\u52a1\u5668\u65f6\u95f4\u5931\u8d25";
      ErrorContent["UNKNOK_ERROR"] = "\u672a\u77e5\u9519\u8bef";
      ErrorContent["LOAD_SCENE"] = "\u52a0\u8f7d\u573a\u666f\u5931\u8d25";
      ErrorContent["LOAD_SOUND"] = "\u52a0\u8f7d\u97f3\u6e90\u5931\u8d25";
      ErrorContent["LOAD_PREFABS"] = "\u52a0\u8f7d\u7269\u4ef6\u5931\u8d25";
      ErrorContent["LOAD_CONFIG"] = "\u65e0\u6cd5\u53d6\u5f97\u914d\u7f6e\u6570\u636e";
      ErrorContent["WORD_DB"] = "\u65e0\u6cd5\u53d6\u5f97\u5b57\u8bcd\u5e93\u6570\u636e";
      ErrorContent["LOAD"] = "\u52a0\u8f7d\u6570\u636e\u5931\u8d25";
      ErrorContent["WX_GET"] = "\u83b7\u53d6\u5fae\u4fe1\u8bbe\u7f6e\u5931\u8d25";
      ErrorContent["WX_LOGIN"] = "\u767b\u5165\u5fae\u4fe1\u5931\u8d25";
      ErrorContent["WX_AUTH"] = "\u5fae\u4fe1\u8ba4\u8bc1\u5931\u8d25";
      ErrorContent["WX_USER_DATA"] = "\u53d6\u5f97\u5fae\u4fe1\u7528\u6237\u6570\u636e\u5931\u8d25";
      ErrorContent["SAUTH"] = "\u7528\u6237\u8eab\u4efd\u8bc1\u8ba4\u5931\u8d25";
      ErrorContent["NET_REQUIRE_FAIL"] = "\u8fde\u63a5\u7f51\u7edc\u5931\u8d25!";
      ErrorContent["BROWSER_VERSION_LOW"] = "\u4f60\u7684\u6d4f\u89c8\u5668\u8bbe\u5907\u4e0d\u652f\u6301\u672c\u6e38\u620f\uff01";
      ErrorContent["NET_REQUEST_FAIL"] = "\u7f51\u7edc\u597d\u50cf\u51fa\u95ee\u9898\u4e86\uff0c\u518d\u8bd5\u8bd5\uff5e";
    })(ErrorContent = exports.ErrorContent || (exports.ErrorContent = {}));
    cc._RF.pop();
  }, {} ],
  TimerMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "490003/KlBGK58LttwC3NEH", "TimerMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TimerMgr = function() {
      function TimerMgr() {
        this._mapTimeTrigger = null;
        this._timeTrigger = 0;
        this._startServerTime = 0;
        this._lastServerTime = 0;
        this._startLocalTime = 0;
        this._lastLocalTime = 0;
      }
      Object.defineProperty(TimerMgr, "Inst", {
        get: function() {
          if (null == TimerMgr._inst) {
            TimerMgr._inst = new TimerMgr();
            TimerMgr._inst._InitVariable();
          }
          return TimerMgr._inst;
        },
        enumerable: false,
        configurable: true
      });
      TimerMgr.prototype._InitVariable = function() {
        this._lastServerTime = 0;
        this._startServerTime = 0;
        this._startLocalTime = this.GetCurrentLocalTime();
        this._mapTimeTrigger = new Map();
        this._timeTrigger = this.GetCurrentLocalTime();
      };
      TimerMgr.prototype.SetCurrentLocalTime = function() {
        this._lastLocalTime = this.GetCurrentLocalTime();
      };
      TimerMgr.prototype.GetCurrentLocalTime = function(isMs) {
        void 0 === isMs && (isMs = false);
        return new Date().getTime() / (isMs ? 1 : 1e3);
      };
      TimerMgr.prototype.GetCurrentLastLocalTime = function() {
        return this._lastLocalTime;
      };
      TimerMgr.prototype.SetCurrServerTime = function(time) {
        this._lastServerTime = time || 0;
      };
      TimerMgr.prototype.GetCurrServerTime = function(isSecond) {
        if (isSecond) {
          var t = Math.floor(this._lastServerTime + 1e3 * (this.GetCurrentLocalTime() - this._lastLocalTime));
          return Math.floor(t / 1e3);
        }
        return Math.floor(this._lastServerTime + 1e3 * (this.GetCurrentLocalTime() - this._lastLocalTime));
      };
      TimerMgr.prototype.GetTotalTime = function() {
        return this.GetCurrentLocalTime() - this._startLocalTime;
      };
      TimerMgr.prototype.OnUpdateTick = function(dt) {
        var _this = this;
        this._timeTrigger > 0 && this.GetCurrentLocalTime() - this._timeTrigger >= 1 && this._mapTimeTrigger.forEach(function(value, event) {
          if (!(_this.GetCurrentLocalTime() >= value.time)) return true;
          setTimeout(value.callback, 0);
          value.interval > 0 ? value.time += value.interval : _this._mapTimeTrigger.delete(event);
          _this._timeTrigger = _this.GetCurrentLocalTime();
        });
      };
      TimerMgr.prototype.AddTimeTrigger = function(event, time, interval, cb) {
        this._mapTimeTrigger || (this._mapTimeTrigger = new Map());
        this._mapTimeTrigger.set(event, {
          time: this.GetCurrentLocalTime() + time,
          interval: interval,
          callback: cb
        });
      };
      TimerMgr.prototype.UpdateTimeTrigger = function(event, time, interval) {
        if (this._mapTimeTrigger.has(event)) {
          this._mapTimeTrigger.get(event).time = time;
          this._mapTimeTrigger.get(event).interval = interval;
        }
      };
      TimerMgr.prototype.RemoveTimeTrigger = function(event) {
        this._mapTimeTrigger.has(event) && this._mapTimeTrigger.delete(event);
      };
      TimerMgr.prototype.ClearTimeTrigger = function() {
        if (this._mapTimeTrigger) {
          this._mapTimeTrigger.clear();
          this._mapTimeTrigger = null;
        }
      };
      TimerMgr._inst = null;
      return TimerMgr;
    }();
    exports.default = TimerMgr;
    cc._RF.pop();
  }, {} ],
  UIBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9628Gs2+tOD7zT+S/a+oE/", "UIBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UIState = void 0;
    var GameEnums_1 = require("../../Game/BaseModule/GameEnums");
    var UIMgr_1 = require("../BaseManager/UIMgr");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent;
    var UIState;
    (function(UIState) {
      UIState[UIState["NONE"] = 0] = "NONE";
      UIState[UIState["NORMAL"] = 1] = "NORMAL";
      UIState[UIState["OPENING"] = 2] = "OPENING";
      UIState[UIState["CLOSEING"] = 3] = "CLOSEING";
    })(UIState = exports.UIState || (exports.UIState = {}));
    var UIBase = function(_super) {
      __extends(UIBase, _super);
      function UIBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._uiId = 0;
        _this._eventSet = new Set();
        _this._state = UIState.NONE;
        _this._align = {
          left: 0,
          bottom: 0,
          right: 0,
          top: 0
        };
        _this._popTimeoutId = -1;
        _this._closePopTimeoutId = -1;
        _this._popUpAnimName = "PopupIn";
        _this._popCloseAnimName = "PopupOut";
        _this.selfAnim = null;
        _this.selfWidget = null;
        return _this;
      }
      Object.defineProperty(UIBase.prototype, "id", {
        get: function() {
          return this._uiId;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UIBase.prototype, "SortingLayer", {
        get: function() {
          return GameEnums_1.SortingLayer.NORMAL_UI;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UIBase.prototype, "state", {
        get: function() {
          return this._state;
        },
        enumerable: false,
        configurable: true
      });
      UIBase.prototype.onLoad = function() {
        this._eventSet = new Set();
        this.LoadInit();
      };
      UIBase.prototype.Create = function(id) {
        this._uiId = id;
        if (this.selfWidget) {
          this.selfWidget.target = UIMgr_1.default.Inst.UIMngNode;
          this.selfWidget.isAlignRight = this.selfWidget.isAlignLeft = this.selfWidget.isAlignTop = this.selfWidget.isAlignBottom = true;
          this.selfWidget.left = this._align.left;
          this.selfWidget.right = this._align.right;
          this.selfWidget.top = this._align.top;
          this.selfWidget.bottom = this._align.bottom;
          var designSize = cc.view.getDesignResolutionSize();
          this.selfWidget.updateAlignment();
        }
        this._state = UIState.NONE;
        this._Create();
      };
      UIBase.prototype._Create = function() {};
      UIBase.prototype.Popup = function(isPlayEffect) {
        var _this = this;
        void 0 === isPlayEffect && (isPlayEffect = true);
        if (this._state == UIState.OPENING) return;
        this.node.active = true;
        return new Promise(function(resolve, reject) {
          try {
            if (null == _this._popUpAnimName || !_this.selfAnim) {
              _this._state = UIState.NORMAL;
              return resolve();
            }
            _this._popTimeoutId = setTimeout(function() {
              _this._state = UIState.NORMAL;
              return resolve();
            }, 1200);
            _this.selfAnim.once(cc.Animation.EventType.FINISHED.toString(), function() {
              -1 != this._popTimeoutId && clearTimeout(this._popTimeoutId);
              this._state = UIState.NORMAL;
              return resolve();
            }, _this);
            _this.selfAnim.play(_this._popUpAnimName);
            _this._state = UIState.OPENING;
          } catch (err) {
            reject(err);
          }
        });
      };
      UIBase.prototype.ClosePopup = function(callback, isRemoveToPool, isPlayEffect) {
        var _this = this;
        void 0 === isPlayEffect && (isPlayEffect = true);
        if (this._state == UIState.CLOSEING) return;
        var closeCallback = function() {
          _this._state = UIState.NONE;
          callback && callback();
          isRemoveToPool ? UIMgr_1.default.Inst.RemovePopupToPool(_this._uiId) : cc.isValid(_this.node, true) && _this.node.destroy();
        };
        if (null != this._popCloseAnimName && this.selfAnim) {
          this._closePopTimeoutId = setTimeout(function() {
            closeCallback && closeCallback();
          }, 1200);
          this.selfAnim.once(cc.Animation.EventType.FINISHED.toString(), function() {
            -1 != this._closePopTimeoutId && clearTimeout(this._closePopTimeoutId);
            closeCallback && closeCallback();
          }, this);
          this.selfAnim.play(this._popCloseAnimName);
          this._state = UIState.CLOSEING;
        } else closeCallback && closeCallback();
        this.OffEvent();
      };
      UIBase.prototype.onDestroy = function() {
        UIMgr_1.default.Inst.RemovePopupImmediately(this.id);
      };
      UIBase.prototype.IsOpened = function() {
        return this.state == UIState.NORMAL || this.state == UIState.OPENING;
      };
      UIBase.prototype.SetState = function(state) {
        this._state = state;
      };
      UIBase.prototype.AddEventListener = function(eventName, callback, target) {
        void 0 === target && (target = this);
        this._eventSet.add(eventName);
        this.node.on(eventName, callback, target);
      };
      UIBase.prototype.OffEvent = function() {
        var _this = this;
        this._eventSet.forEach(function(val1, val2) {
          _this.node.off(val1);
        });
      };
      UIBase.prototype.LoadInit = function() {};
      __decorate([ property({
        type: cc.Animation,
        displayName: "Popup\u52d5\u756b"
      }) ], UIBase.prototype, "selfAnim", void 0);
      __decorate([ property({
        type: cc.Widget,
        displayName: "\u81ea\u8eab\u9002\u914d\u7d44\u4ef6"
      }) ], UIBase.prototype, "selfWidget", void 0);
      UIBase = __decorate([ ccclass, requireComponent(cc.Widget) ], UIBase);
      return UIBase;
    }(cc.Component);
    exports.default = UIBase;
    cc._RF.pop();
  }, {
    "../../Game/BaseModule/GameEnums": "GameEnums",
    "../BaseManager/UIMgr": "UIMgr"
  } ],
  UIMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fb4begiEZZBqJ7X0bJFqIHO", "UIMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var EventID_1 = require("../../Game/BaseModule/EventID");
    var GameEnums_1 = require("../../Game/BaseModule/GameEnums");
    var ResLoader_1 = require("../BaseControl/ResLoader");
    var Queue_1 = require("../Libs/Queue");
    var EventMgr_1 = require("./EventMgr");
    var UIMgr = function() {
      function UIMgr() {
        this._uiIdCount = 0;
        this._uiMngNode = null;
        this._loadingUISet = null;
        this._poolMaxSize = 30;
        this._mapUIObj = null;
        this._queUIObj = null;
        this._queUIPool = null;
        this._uiIdCount = 0;
        this._mapUIObj = new Map();
        this._queUIObj = new Queue_1.default();
        this._queUIPool = new Queue_1.default();
        this._loadingUISet = new Set();
      }
      Object.defineProperty(UIMgr, "Inst", {
        get: function() {
          null == UIMgr._inst && (UIMgr._inst = new UIMgr());
          (!UIMgr._inst._uiMngNode || UIMgr._inst._uiMngNode && !UIMgr._inst._uiMngNode.isValid) && UIMgr._inst._CreateUINode();
          return UIMgr._inst;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UIMgr.prototype, "UIMngNode", {
        get: function() {
          return this._uiMngNode;
        },
        enumerable: false,
        configurable: true
      });
      UIMgr.prototype.SyncCreatePopupByName = function(name) {
        var ui = this._GetPopupFromPool(name);
        var uid = -1;
        if (null == ui) {
          var res = ResLoader_1.default.GetAssetByTag(name);
          if (!res) throw new Error("\u6ca1\u6709\u8be5" + name + "\u5728ResLoader\u4e2d\uff0c\u8bf7\u786e\u8ba4\u662f\u5426\u6709\u9884\u52a0\u8f7d");
          var node = cc.instantiate(res);
          ui = node.getComponent(name);
          uid = this._AddPopup(ui);
        } else uid = this._RigisterPopup(ui.id, ui);
        ui.node.zIndex != ui.SortingLayer && (ui.node.zIndex = ui.SortingLayer);
        this._uiMngNode.addChild(ui.node);
        ui.Create(uid);
        ui.node.active = false;
        return ui;
      };
      UIMgr.prototype.AsyncCreatePupopByPath = function(path, name, setGroup) {
        var _this = this;
        EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.UIMsg.LOAD_POP_UI_START, name);
        return new Promise(function(resolve, reject) {
          var ui = _this._GetPopupFromPool(name);
          if (null == ui) {
            _this._AsyncLoadingCover(true);
            var thenCb = function(asset) {
              _this._loadingUISet.delete(name);
              _this._AsyncLoadingCover(false);
              var node = cc.instantiate(asset);
              ui = node.getComponent(name);
              node.zIndex != ui.SortingLayer && (node.zIndex = ui.SortingLayer);
              _this._uiMngNode.addChild(node);
              ui.Create(_this._AddPopup(ui));
              ui.node.active = false;
              EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.UIMsg.LOAD_POP_UI_OVER, name);
              ResLoader_1.default.TagAsset(asset, name);
              "number" === typeof setGroup && ResLoader_1.default.GroupAsset(asset, setGroup);
              resolve(ui);
            };
            var catchCb = function(err) {
              _this._loadingUISet.delete(name);
              _this._AsyncLoadingCover(false);
              console.error(err);
              reject(err);
            };
            _this._loadingUISet.add(name);
            ResLoader_1.default.LoadResource(path, cc.Prefab).then(thenCb).catch(catchCb);
          } else {
            ui.node.zIndex != ui.SortingLayer && (ui.node.zIndex = ui.SortingLayer);
            _this._uiMngNode.addChild(ui.node);
            ui.Create(_this._RigisterPopup(ui.id, ui));
            ui.node.active = false;
            setTimeout(function() {
              EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.UIMsg.LOAD_POP_UI_OVER, name);
            }, 0);
            resolve(ui);
          }
        });
      };
      UIMgr.prototype._asyncLoadPrefabByPath = function(path, name, setGroup) {
        var _this = this;
        return new Promise(function(resolve, reject) {
          _this._AsyncLoadingCover(true);
          var thenCb = function(asset) {
            _this._loadingUISet.delete(name);
            _this._AsyncLoadingCover(false);
            var node = cc.instantiate(asset);
            var ui = node.getComponent(name);
            ResLoader_1.default.TagAsset(asset, name);
            "number" === typeof setGroup && ResLoader_1.default.GroupAsset(asset, setGroup);
            resolve(ui);
          };
          var catchCb = function(err) {
            _this._loadingUISet.delete(name);
            _this._AsyncLoadingCover(false);
            console.error(err);
            reject(err);
          };
          _this._loadingUISet.add(name);
          ResLoader_1.default.LoadResource(path, cc.Prefab).then(thenCb).catch(catchCb);
        });
      };
      UIMgr.prototype.AsyncCreatePackageByPath = function(parentNode, path, name, setGroup) {
        var _this = this;
        return new Promise(function(resolve, reject) {
          _this._asyncLoadPrefabByPath(path, name, setGroup).then(function(ui) {
            if (parentNode && cc.isValid(parentNode)) {
              parentNode.addChild(ui.node);
              resolve(ui);
            } else {
              ui && ui.node && ui.node.destroy();
              console.log("parentNode is null");
              reject("parentNode is null");
            }
          });
        });
      };
      UIMgr.prototype.GetToppPopup = function() {
        return this._queUIObj.Back;
      };
      UIMgr.prototype.GetDisplayingUI = function(name) {
        for (var i = this._queUIObj.Count - 1; i >= 0; --i) {
          if (!this._queUIObj.At(i) || this._queUIObj.At(i) && !this._queUIObj.At(i).IsOpened) continue;
          if (!this._queUIObj.At(i).node) continue;
          var node = this._queUIObj.At(i).node;
          if (node.name.toLocaleLowerCase() == name.toLocaleLowerCase() && cc.isValid(node, true)) return this._queUIObj.At(i);
        }
        return null;
      };
      UIMgr.prototype.RemovePopupToPool = function(uiId) {
        var popup = this._mapUIObj.get(uiId);
        if (void 0 != popup) {
          var popup_1 = null;
          this._queUIObj.FilterSelf(function(ui) {
            if (ui && ui.id == uiId) popup_1 = ui; else if (ui && ui.id != uiId) return true;
            return false;
          });
          this._mapUIObj.delete(uiId);
          this._queUIPool.Enqueue(popup_1);
          EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.UIMsg.CLOSE_POP_UI, popup_1.node.name);
          popup_1.node.active = false;
          popup_1.node.removeFromParent(false);
          if (this._queUIPool.Count > this._poolMaxSize) {
            var ui = this._queUIPool.Dequeue();
            ui.node && ui.destroy();
          }
          return true;
        }
        return false;
      };
      UIMgr.prototype.RemovePopupImmediately = function(uiId) {
        var popup = this._mapUIObj.get(uiId);
        if (void 0 != popup) {
          var popup_2 = null;
          this._queUIObj.FilterSelf(function(ui) {
            if (ui && ui.id == uiId) popup_2 = ui; else if (ui && ui.id != uiId) return true;
            return false;
          });
          EventMgr_1.EventMgr.Inst.emitEvent(EventID_1.UIMsg.CLOSE_POP_UI, popup_2.node.name);
          popup_2 && popup_2.node && cc.isValid(popup_2.node, true) && popup_2.node.destroy();
          this._mapUIObj.delete(uiId);
          return true;
        }
        return false;
      };
      UIMgr.prototype.RemoveUIInPool = function(name) {
        var arrUI = [];
        this._queUIPool.FilterSelf(function(ele) {
          if (ele && ele.node && ele.node.name.toLocaleLowerCase() == name.toLocaleLowerCase()) {
            arrUI.push(ele);
            return false;
          }
          return true;
        });
        for (var i = 0; i < arrUI.length; ++i) arrUI[i].node.destroy();
      };
      UIMgr.prototype.ReleaseAllUI = function() {
        this._uiIdCount = 0;
        this._mapUIObj.clear();
        this._queUIObj.FilterSelf(function(ui) {
          ui && ui.node && cc.isValid(ui.node, true) && ui.node.destroy();
          return false;
        });
        this._queUIPool.FilterSelf(function(ui) {
          ui && ui.node && cc.isValid(ui.node, true) && ui.node.destroy();
          return false;
        });
      };
      UIMgr.prototype.OptimalUIData = function() {
        var _this = this;
        this._mapUIObj.forEach(function(value, key) {
          null != value && void 0 != value || _this._mapUIObj.delete(key);
        });
        this._queUIObj.FilterSelf(function(ui) {
          return ui && !!ui.node;
        });
        this._queUIPool.FilterSelf(function(ui) {
          return ui && !!ui.node;
        });
      };
      UIMgr.prototype.EmitEvent = function(targetEvent, arg1, arg2, arg3, arg4, arg5) {
        for (var i = 0; i < this._queUIObj.Count; ++i) {
          if (!this._queUIObj.At(i) || !this._queUIObj.At(i).node) continue;
          if (!this._queUIObj.At(i).node.active) continue;
          this._queUIObj.At(i).node.emit(targetEvent, arg1, arg2, arg3, arg4, arg5);
        }
      };
      UIMgr.prototype.ResizeUILayer = function() {
        this.ResizeNodeForScreen(this._uiMngNode);
      };
      UIMgr.prototype.ResizeNodeForScreen = function(node) {
        if (!node) return;
        var size = cc.view.getCanvasSize();
        size.width /= cc.view.getScaleX();
        size.height /= cc.view.getScaleY();
        node.setPosition(size.width / 2, size.height / 2);
        node.width = size.width;
        node.height = size.height;
      };
      UIMgr.prototype.IsLoadingUI = function(name) {
        return this._loadingUISet.has(name);
      };
      UIMgr.prototype._AddPopup = function(uiObj) {
        return this._RigisterPopup(++this._uiIdCount, uiObj);
      };
      UIMgr.prototype._RigisterPopup = function(id, uiObj) {
        this._mapUIObj.set(id, uiObj);
        this._queUIObj.Enqueue(uiObj);
        return id;
      };
      UIMgr.prototype._GetPopupFromPool = function(name) {
        for (var i = 0; i < this._queUIPool.Count; ++i) {
          (!this._queUIPool.Front || this._queUIPool.Front && !this._queUIPool.Front.node) && this._queUIPool.Dequeue();
          if (this._queUIPool.Front.node.name.toLocaleLowerCase() == name.toLocaleLowerCase()) return this._queUIPool.Dequeue();
          this._queUIPool.FrontToBack();
        }
        return null;
      };
      UIMgr.prototype._CreateUINode = function() {
        var node = new cc.Node("UIMngNode");
        if (!cc.director.getScene()) return;
        cc.director.getScene().addChild(node);
        this._uiMngNode = node;
        this._uiMngNode.zIndex != GameEnums_1.SortingLayer.NORMAL_UI && (this._uiMngNode.zIndex = GameEnums_1.SortingLayer.NORMAL_UI);
        this.ResizeUILayer();
      };
      UIMgr.prototype._AsyncLoadingCover = function(isShow) {
        void 0 === isShow && (isShow = true);
      };
      UIMgr._inst = null;
      return UIMgr;
    }();
    exports.default = UIMgr;
    cc._RF.pop();
  }, {
    "../../Game/BaseModule/EventID": "EventID",
    "../../Game/BaseModule/GameEnums": "GameEnums",
    "../BaseControl/ResLoader": "ResLoader",
    "../Libs/Queue": "Queue",
    "./EventMgr": "EventMgr"
  } ],
  UI_DoubleComDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0f682j0AZFEIGw5MCHhUMm", "UI_DoubleComDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UIBase_1 = require("../../../BaseFrame/BaseControl/UIBase");
    var GameEnums_1 = require("../../BaseModule/GameEnums");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UI_DoubleComDialog = function(_super) {
      __extends(UI_DoubleComDialog, _super);
      function UI_DoubleComDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bodyNode = null;
        _this.lblTitle = null;
        _this.lblContent = null;
        _this.lytBtnArea = null;
        _this.lblBtnConfirm = null;
        _this.btnConfirm = null;
        _this.lblBtnCancel = null;
        _this.btnCancel = null;
        _this.btnRightCancel = null;
        _this.spfBtn = [];
        _this._confirmCallback = null;
        _this._cancelCallback = null;
        _this._popData = null;
        return _this;
      }
      Object.defineProperty(UI_DoubleComDialog, "refKey", {
        get: function() {
          return "UI_DoubleComDialog";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UI_DoubleComDialog, "refPath", {
        get: function() {
          return "prefabs/CommonDialog/UI_DoubleComDialog";
        },
        enumerable: false,
        configurable: true
      });
      UI_DoubleComDialog.prototype._Create = function() {};
      UI_DoubleComDialog.prototype.LoadInit = function() {
        this.node.zIndex = GameEnums_1.SortingLayer.COVER_UI;
        this.node.on(cc.Node.EventType.TOUCH_END.toString(), this._Close, this);
      };
      UI_DoubleComDialog.prototype.SetDialog = function(popData) {
        this._popData = popData;
        this.btnRightCancel.node.active = !!popData.isBtnRightCloseShow;
        popData.confirmText || (popData.confirmText = "\u786e\u8ba4");
        popData.cancelText || (popData.cancelText = "\u53d6\u6d88");
        this.btnRightCancel.node.active = false;
        this.lblTitle.string = popData.strTiltle;
        this.lblContent.string = popData.strContent;
        this.lblBtnConfirm.string = popData.confirmText;
        this.lblBtnCancel.string = popData.cancelText;
        popData.isBtnConfirmLeft ? this.lytBtnArea.horizontalDirection = cc.Layout.HorizontalDirection.LEFT_TO_RIGHT : this.lytBtnArea.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
        this.btnConfirm.node.active = true;
        this.btnCancel.node.active = true;
        this.btnCancel.target.getComponent(cc.Sprite).spriteFrame = this.spfBtn[popData.confirmSprIdx];
        this.btnConfirm.target.getComponent(cc.Sprite).spriteFrame = this.spfBtn[popData.cancelSprIdx];
      };
      UI_DoubleComDialog.prototype.OnClickConfirm = function(event, customEventData) {
        this.ClosePopup(this._popData.confirmCallBack, false);
      };
      UI_DoubleComDialog.prototype.OnClickCancel = function(event, customEventData) {
        this.ClosePopup(this._popData.cancelCallBack, false);
      };
      UI_DoubleComDialog.prototype.OnClickRightClose = function(event, customEventData) {
        this._Close();
      };
      UI_DoubleComDialog.prototype.OnClickBgClose = function(event, customEventData) {
        this._Close();
      };
      UI_DoubleComDialog.prototype._Close = function() {
        this.ClosePopup();
      };
      __decorate([ property(cc.Node) ], UI_DoubleComDialog.prototype, "bodyNode", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleComDialog.prototype, "lblTitle", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleComDialog.prototype, "lblContent", void 0);
      __decorate([ property(cc.Layout) ], UI_DoubleComDialog.prototype, "lytBtnArea", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleComDialog.prototype, "lblBtnConfirm", void 0);
      __decorate([ property(cc.Button) ], UI_DoubleComDialog.prototype, "btnConfirm", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleComDialog.prototype, "lblBtnCancel", void 0);
      __decorate([ property(cc.Button) ], UI_DoubleComDialog.prototype, "btnCancel", void 0);
      __decorate([ property(cc.Button) ], UI_DoubleComDialog.prototype, "btnRightCancel", void 0);
      __decorate([ property({
        type: cc.SpriteFrame,
        displayName: "\u4e24\u4e2a\u6309\u94ae\u56fe",
        tooltip: "0 cancle,1 confirm"
      }) ], UI_DoubleComDialog.prototype, "spfBtn", void 0);
      UI_DoubleComDialog = __decorate([ ccclass ], UI_DoubleComDialog);
      return UI_DoubleComDialog;
    }(UIBase_1.default);
    exports.default = UI_DoubleComDialog;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/BaseControl/UIBase": "UIBase",
    "../../BaseModule/GameEnums": "GameEnums"
  } ],
  UI_DoubleNetDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c99c3HNpqZHqpE+4NTtNpVp", "UI_DoubleNetDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UIBase_1 = require("../../../BaseFrame/BaseControl/UIBase");
    var GameEnums_1 = require("../../BaseModule/GameEnums");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UI_DoubleNetDialog = function(_super) {
      __extends(UI_DoubleNetDialog, _super);
      function UI_DoubleNetDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bodyNode = null;
        _this.lblTitle = null;
        _this.lblContent = null;
        _this.lytBtnArea = null;
        _this.lblBtnConfirm = null;
        _this.btnConfirm = null;
        _this.lblBtnCancel = null;
        _this.btnCancel = null;
        _this.btnRightCancel = null;
        _this.spfBtn = [];
        _this._confirmCallback = null;
        _this._cancelCallback = null;
        _this._popData = null;
        return _this;
      }
      Object.defineProperty(UI_DoubleNetDialog, "refKey", {
        get: function() {
          return "UI_DoubleNetDialog";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UI_DoubleNetDialog, "refPath", {
        get: function() {
          return "prefabs/CommonDialog/UI_DoubleNetDialog";
        },
        enumerable: false,
        configurable: true
      });
      UI_DoubleNetDialog.prototype._Create = function() {};
      UI_DoubleNetDialog.prototype.LoadInit = function() {
        this.node.zIndex = GameEnums_1.SortingLayer.COVER_UI;
        this.node.on(cc.Node.EventType.TOUCH_END.toString(), this._Close, this);
      };
      UI_DoubleNetDialog.prototype.SetDialog = function(popData) {
        this._popData = popData;
        this.btnRightCancel.node.active = !!popData.isBtnRightCloseShow;
        popData.confirmText || (popData.confirmText = "\u786e\u8ba4");
        popData.cancelText || (popData.cancelText = "\u53d6\u6d88");
        this.btnRightCancel.node.active = false;
        this.lblTitle.string = popData.strTiltle;
        this.lblContent.string = popData.strContent;
        this.lblBtnConfirm.string = popData.confirmText;
        this.lblBtnCancel.string = popData.cancelText;
        popData.isBtnConfirmLeft ? this.lytBtnArea.horizontalDirection = cc.Layout.HorizontalDirection.LEFT_TO_RIGHT : this.lytBtnArea.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
        this.btnConfirm.node.active = true;
        this.btnCancel.node.active = true;
        this.btnCancel.target.getComponent(cc.Sprite).spriteFrame = this.spfBtn[popData.confirmSprIdx];
        this.btnConfirm.target.getComponent(cc.Sprite).spriteFrame = this.spfBtn[popData.cancelSprIdx];
      };
      UI_DoubleNetDialog.prototype.OnClickConfirm = function(event, customEventData) {
        this.ClosePopup(this._popData.confirmCallBack, false);
      };
      UI_DoubleNetDialog.prototype.OnClickCancel = function(event, customEventData) {
        this.ClosePopup(this._popData.cancelCallBack, false);
      };
      UI_DoubleNetDialog.prototype.OnClickRightClose = function(event, customEventData) {
        this._Close();
      };
      UI_DoubleNetDialog.prototype.OnClickBgClose = function(event, customEventData) {
        this._Close();
      };
      UI_DoubleNetDialog.prototype._Close = function() {
        this.ClosePopup();
      };
      __decorate([ property(cc.Node) ], UI_DoubleNetDialog.prototype, "bodyNode", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleNetDialog.prototype, "lblTitle", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleNetDialog.prototype, "lblContent", void 0);
      __decorate([ property(cc.Layout) ], UI_DoubleNetDialog.prototype, "lytBtnArea", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleNetDialog.prototype, "lblBtnConfirm", void 0);
      __decorate([ property(cc.Button) ], UI_DoubleNetDialog.prototype, "btnConfirm", void 0);
      __decorate([ property(cc.Label) ], UI_DoubleNetDialog.prototype, "lblBtnCancel", void 0);
      __decorate([ property(cc.Button) ], UI_DoubleNetDialog.prototype, "btnCancel", void 0);
      __decorate([ property(cc.Button) ], UI_DoubleNetDialog.prototype, "btnRightCancel", void 0);
      __decorate([ property({
        type: cc.SpriteFrame,
        displayName: "\u4e24\u4e2a\u6309\u94ae\u56fe",
        tooltip: "0 cancle,1 confirm"
      }) ], UI_DoubleNetDialog.prototype, "spfBtn", void 0);
      UI_DoubleNetDialog = __decorate([ ccclass ], UI_DoubleNetDialog);
      return UI_DoubleNetDialog;
    }(UIBase_1.default);
    exports.default = UI_DoubleNetDialog;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/BaseControl/UIBase": "UIBase",
    "../../BaseModule/GameEnums": "GameEnums"
  } ],
  UI_SingerComDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89594/5835OWpQ5+/fDqVdM", "UI_SingerComDialog");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UIBase_1 = require("../../../BaseFrame/BaseControl/UIBase");
    var GameEnums_1 = require("../../BaseModule/GameEnums");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UI_SingerComDialog = function(_super) {
      __extends(UI_SingerComDialog, _super);
      function UI_SingerComDialog() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.bodyNode = null;
        _this.lblTitle = null;
        _this.lblContent = null;
        _this.lblBtnConfirm = null;
        _this.btnConfirm = null;
        _this.btnRightCancel = null;
        _this.spfBtn = [];
        _this._confirmCallback = null;
        _this._popData = null;
        return _this;
      }
      Object.defineProperty(UI_SingerComDialog, "refKey", {
        get: function() {
          return "UI_SingerComDialog";
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UI_SingerComDialog, "refPath", {
        get: function() {
          return "prefabs/CommonDialog/UI_SingerComDialog";
        },
        enumerable: false,
        configurable: true
      });
      UI_SingerComDialog.prototype._Create = function() {};
      UI_SingerComDialog.prototype.LoadInit = function() {
        this.node.zIndex = GameEnums_1.SortingLayer.COVER_UI;
        this.node.on(cc.Node.EventType.TOUCH_END.toString(), this._Close, this);
      };
      UI_SingerComDialog.prototype.SetDialog = function(popData) {
        this._popData = popData;
        this.btnRightCancel.node.active = !!popData.isBtnRightCloseShow;
        popData.confirmText || (popData.confirmText = "\u786e\u8ba4");
        this.btnRightCancel.node.active = false;
        this.lblTitle.string = popData.strTiltle;
        this.lblContent.string = popData.strContent;
        this.lblBtnConfirm.string = popData.confirmText;
        this.btnConfirm.target.getComponent(cc.Sprite).spriteFrame = this.spfBtn[popData.confirmSprIdx];
      };
      UI_SingerComDialog.prototype.OnClickConfirm = function(event, customEventData) {
        this.ClosePopup(this._popData.confirmCallBack, false);
      };
      UI_SingerComDialog.prototype.OnClickRightClose = function(event, customEventData) {
        this._Close();
      };
      UI_SingerComDialog.prototype.OnClickBgClose = function(event, customEventData) {
        this._Close();
      };
      UI_SingerComDialog.prototype._Close = function() {
        this.ClosePopup();
      };
      __decorate([ property(cc.Node) ], UI_SingerComDialog.prototype, "bodyNode", void 0);
      __decorate([ property(cc.Label) ], UI_SingerComDialog.prototype, "lblTitle", void 0);
      __decorate([ property(cc.Label) ], UI_SingerComDialog.prototype, "lblContent", void 0);
      __decorate([ property(cc.Label) ], UI_SingerComDialog.prototype, "lblBtnConfirm", void 0);
      __decorate([ property(cc.Button) ], UI_SingerComDialog.prototype, "btnConfirm", void 0);
      __decorate([ property(cc.Button) ], UI_SingerComDialog.prototype, "btnRightCancel", void 0);
      __decorate([ property({
        type: cc.SpriteFrame,
        displayName: "\u6309\u94ae\u80cc\u666f",
        tooltip: "0 red,1 green"
      }) ], UI_SingerComDialog.prototype, "spfBtn", void 0);
      UI_SingerComDialog = __decorate([ ccclass ], UI_SingerComDialog);
      return UI_SingerComDialog;
    }(UIBase_1.default);
    exports.default = UI_SingerComDialog;
    cc._RF.pop();
  }, {
    "../../../BaseFrame/BaseControl/UIBase": "UIBase",
    "../../BaseModule/GameEnums": "GameEnums"
  } ],
  Utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "08793IMXTFC/rV3oUyC7Btj", "Utils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ResLoader_1 = require("../BaseControl/ResLoader");
    var AppLog_1 = require("../Log/AppLog");
    var Utils = function() {
      function Utils() {}
      Utils.IsMobile = function() {
        return cc.sys.isMobile;
      };
      Utils.IsInWebView = function() {
        var useragent = navigator.userAgent;
        var rules = [ "WebView", "(iPhone|iPod|iPad)(?!.*Safari/)", "Android.*(wv|.0.0.0)" ];
        var regex = new RegExp("(" + rules.join("|") + ")", "ig");
        return Boolean(useragent.match(regex));
      };
      Utils.uuid = function() {
        var s = [];
        var hexDigits = "0123456789abcdef";
        for (var i = 0; i < 36; i++) s[i] = hexDigits.substr(Math.floor(16 * Math.random()), 1);
        s[14] = "4";
        s[19] = hexDigits.substr(3 & s[19] | 8, 1);
        s[8] = s[13] = s[18] = s[23] = "-";
        var uuid = s.join("");
        return uuid;
      };
      Utils.NextDateTime = function(dayCount, time) {
        var myDate = new Date();
        myDate.setDate(myDate.getDate() + dayCount);
        var year = myDate.getFullYear();
        var month = myDate.getMonth() + 1;
        var day = myDate.getDate();
        var nextDateStr = year + "-" + month + "-" + day + " " + time;
        return nextDateStr;
      };
      Utils.NextDateTimeBySecond = function(second) {
        var myDate = new Date();
        myDate.setSeconds(myDate.getSeconds() + second);
        var year = myDate.getFullYear();
        var month = myDate.getMonth() + 1;
        var day = myDate.getDate();
        var hour = myDate.getHours();
        var fhour = "";
        hour < 10 && (fhour = "0" + hour);
        var min = myDate.getMinutes();
        var fmin = "";
        min < 10 && (fmin = "0" + min);
        var sec = myDate.getSeconds();
        var fsec = "";
        sec < 10 && (fsec = "0" + sec);
        var nextDateStr = year + "-" + month + "-" + day + " " + fhour + ":" + fmin + ":" + fsec;
        return nextDateStr;
      };
      Utils.GetDistance = function(pointA, pointB) {
        var value = (pointB.x - pointA.x) * (pointB.x - pointA.x) + (pointB.y - pointA.y) * (pointB.y - pointA.y);
        return Math.sqrt(value);
      };
      Utils.GetVecDistance = function(pointA, pointB) {
        var value = Math.pow(pointB.x - pointA.x, 2) + Math.pow(pointB.y - pointA.y, 2);
        return Math.sqrt(value);
      };
      Utils.StringChangeValueType = function(value) {
        switch (value) {
         case "true":
          return true;

         case "false":
          return false;
        }
        var numPatt = /\x09^[0-9]*$/;
        var floatPatt = /^[-+]?\d+(\.\d+)?$/;
        if (value.match(new RegExp(numPatt))) return parseInt(value);
        if (value.match(new RegExp(floatPatt))) return parseFloat(value);
        return value;
      };
      Utils.IsInputChinese = function(str) {
        var regex = /^[\u4E00-\u9FFF]+$/;
        return !!str.match(regex);
      };
      Utils.FilterNonChinese = function(str) {
        var arrStr = str.split("");
        var res = "";
        for (var i = 0; i < arrStr.length; ++i) Utils.IsInputChinese(arrStr[i]) && (res += arrStr[i]);
        return res;
      };
      Utils.ObjExtend = function(origin, source) {
        origin || (origin = {});
        source || (source = {});
        for (var key in source) void 0 != origin[key] && null != origin[key] || (origin[key] = source[key]);
        return origin;
      };
      Utils.ObjAssign = function(origin) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
        origin || (origin = {});
        for (var i = 0; i < args.length; ++i) {
          args[i] || (args[i] = {});
          for (var key in args[i]) origin[key] = args[i][key];
        }
        return origin;
      };
      Utils.ToDecimal = function(value, count, type) {
        count < 1 && (count = 1);
        var up = 1 * Math.pow(10, count);
        var v = value * up;
        switch (type) {
         case "ceil":
          return 1 * Math.ceil(v) / up;

         case "floor":
          return 1 * Math.floor(v) / up;

         case "round":
          return 1 * Math.round(v) / up;
        }
      };
      Utils.CreateCaptureCanvas = function(camera, node, targetGroup) {
        var texture = new cc.RenderTexture();
        texture.initWithSize(cc.winSize.width, cc.winSize.height, cc.gfx.RB_FMT_S8);
        camera.targetTexture = texture;
        var originActive = node.active;
        node.active = true;
        var width = texture.width;
        var height = texture.height;
        var canvas = document.createElement("canvas");
        var originGroup = node.group;
        Utils._ChangeAllNodeGroup(node, targetGroup);
        canvas.width = width;
        canvas.height = height;
        var ctx = canvas.getContext("2d");
        camera.render();
        var data = texture.readPixels();
        var rowBytes = 4 * width;
        for (var row = 0; row < height; row++) {
          var srow = height - 1 - row;
          var imageData = ctx.createImageData(width, 1);
          var start = srow * width * 4;
          for (var i = 0; i < rowBytes; i++) imageData.data[i] = data[start + i];
          ctx.putImageData(imageData, 0, row);
        }
        Utils._ChangeAllNodeGroup(node, originGroup);
        node.active = originActive;
        return canvas;
      };
      Utils.CaptureImageToTmpPath = function(cameara, targetNode, targetGroup, width, height) {
        var canvas = Utils.CreateCaptureCanvas(cameara, targetNode, targetGroup);
        return canvas.toTempFilePathSync({
          destWidth: width,
          destHeight: height,
          fileType: "jpg",
          quality: 1
        });
      };
      Utils.ConvertBase64ToSpriteFrame = function(dataUrl) {
        var img = new Image();
        img.src = dataUrl;
        var self = this;
        var texture = new cc.Texture2D();
        texture.initWithElement(img);
        texture.handleLoadedTexture();
        return new cc.SpriteFrame(texture);
      };
      Utils.DownloadBase64Img = function(base64) {
        var href = base64.replace(/^data:image[^;]*/, "data:image/png");
        document.location.href = href;
      };
      Utils.ArrayRemove = function(arr, target, count) {
        count = count < 1 ? 1 : count;
        if (target >= arr.length) throw new Error("target over then array length");
        target + count >= arr.length && (count = arr.length - target);
        var data = new Array();
        for (var i = target; i < target + count; ++i) data.push(arr[i]);
        for (var i = target + count; i < arr.length; ++i) arr[i - count] = arr[i];
        for (var i = 0; i < count; ++i) arr.pop();
        return data;
      };
      Utils.ArrayClone = function(arr) {
        var newArr = new Array();
        for (var i = 0; i < arr.length; ++i) newArr.push(arr[i]);
        return newArr;
      };
      Utils.RandomArraySort = function(arr) {
        for (var i = 0; i < arr.length; ++i) {
          var ridx = Math.floor(Math.random() * (arr.length - i)) + i;
          var tmp = arr[i];
          arr[i] = arr[ridx];
          arr[ridx] = tmp;
        }
      };
      Utils.RandomRange = function(max, min, floor) {
        void 0 === min && (min = 0);
        void 0 === floor && (floor = true);
        return floor ? Math.floor(Math.random() * (max - min)) + min : Math.random() * (max - min) + min;
      };
      Utils.SaveData = function(key, data) {
        cc.sys.localStorage.setItem(key, data);
      };
      Utils.LoadData = function(key) {
        var data = cc.sys.localStorage.getItem(key);
        return "" == data ? null : data;
      };
      Utils.Factorial = function(n) {
        if (0 == n) return 1;
        return n * Utils.Factorial(n - 1);
      };
      Utils.GetCirclePoint = function(angle, radius, centerPoint) {
        centerPoint || (centerPoint = new cc.Vec2(0, 0));
        return new cc.Vec2(centerPoint.x + Math.cos(angle * Math.PI / 180) * radius, centerPoint.y + Math.sin(angle * Math.PI / 180) * radius);
      };
      Utils.BezierCurveByFrame = function(maxFrame, arrPoint, scope) {
        void 0 === scope && (scope = 0);
        var arrPath = [];
        for (var i = 0; i <= maxFrame; ++i) {
          var x = 0;
          var y = 0;
          var t = i / maxFrame;
          for (var i_1 = 0; i_1 < arrPoint.length; ++i_1) {
            var n = 0 == i_1 || i_1 == arrPoint.length - 1 ? 1 : arrPoint.length - 1 + scope;
            x += n * arrPoint[i_1].x * Math.pow(t, i_1) * Math.pow(1 - t, arrPoint.length - 1 - i_1);
            y += n * arrPoint[i_1].y * Math.pow(t, i_1) * Math.pow(1 - t, arrPoint.length - 1 - i_1);
          }
          arrPath.push(new cc.Vec2(x, y));
        }
        return arrPath;
      };
      Utils.BezierCurveByTime = function(dt, maxTime, arrPoint, scope) {
        void 0 === scope && (scope = 0);
        var arrPath = [];
        for (var i = 0; i <= Math.floor(maxTime / dt); ++i) {
          var x = 0;
          var y = 0;
          var t = i * dt / maxTime;
          for (var i_2 = 0; i_2 < arrPoint.length; ++i_2) {
            var n = 0 == i_2 || i_2 == arrPoint.length - 1 ? 1 : arrPoint.length - 1 + scope;
            x += n * arrPoint[i_2].x * Math.pow(t, i_2) * Math.pow(1 - t, arrPoint.length - 1 - i_2);
            y += n * arrPoint[i_2].y * Math.pow(t, i_2) * Math.pow(1 - t, arrPoint.length - 1 - i_2);
          }
          arrPath.push(new cc.Vec2(x, y));
        }
        return arrPath;
      };
      Utils.SecondOrderBezierCurve = function(frame, startPoint, endPoint, height, nearSlice) {
        void 0 === nearSlice && (nearSlice = .1);
        var arrPoint = Utils.CalSecondOrderBezierPoint(startPoint, endPoint, height, nearSlice);
        return Utils.BezierCurveByFrame(frame, arrPoint);
      };
      Utils.CalSecondOrderBezierPoint = function(startPoint, endPoint, height, nearSlice) {
        void 0 === nearSlice && (nearSlice = .1);
        nearSlice < 0 ? nearSlice = 0 : nearSlice > 1 && (nearSlice = 1);
        var se_dist_Len = Utils.GetVecDistance(startPoint, endPoint);
        var seVec = new cc.Vec2(endPoint.x - startPoint.x, endPoint.y - startPoint.y);
        var sn_dist_len = se_dist_Len * nearSlice;
        var sn_angle = 180 * Math.atan2(height, sn_dist_len) / Math.PI;
        var se_normalize = seVec.normalize();
        var se_angle = 180 * Math.atan2(se_normalize.y, se_normalize.x) / Math.PI;
        var sh_dist_len = Math.sqrt(Math.pow(sn_dist_len, 2) + Math.pow(height, 2));
        var heightPoint = Utils.GetCirclePoint(se_angle + sn_angle * endPoint.x / Math.abs(endPoint.x), sh_dist_len, startPoint);
        console.log(height, sn_dist_len, sn_angle, se_angle, heightPoint);
        return [ startPoint, heightPoint, endPoint ];
      };
      Utils.Base64Encode = function(input) {
        var keyStr;
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        while (i < input.length) {
          chr1 = input[i++];
          chr2 = input[i++];
          chr3 = input[i++];
          enc1 = chr1 >> 2;
          enc2 = (3 & chr1) << 4 | chr2 >> 4;
          enc3 = (15 & chr2) << 2 | chr3 >> 6;
          enc4 = 63 & chr3;
          isNaN(chr2) ? enc3 = enc4 = 64 : isNaN(chr3) && (enc4 = 64);
          output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
        }
        return output;
      };
      Utils._ChangeAllNodeGroup = function(node, targetGroup) {
        node.group = targetGroup;
        console.error(node.name, targetGroup);
        if (0 == node.childrenCount) return;
        for (var i = 0; i < node.children.length; ++i) Utils._ChangeAllNodeGroup(node.children[i], targetGroup);
      };
      Utils.SetSpriteFromUrl = function(spt, imageUrl, imageKey, groupKey) {
        void 0 === groupKey && (groupKey = 0);
        if (!spt || !cc.isValid(spt.node)) return;
        spt.node.active = false;
        var attrKey = imageKey + "_" + spt.node.uuid;
        spt.node.attr({
          attrKey: attrKey
        });
        var curID = attrKey;
        ResLoader_1.default.LoadFromUrl(imageUrl, {
          ext: ".png"
        }).then(function(asset) {
          if (!cc.isValid(spt.node)) {
            AppLog_1.default.Error("sptNode is not valid imageUrl:" + imageUrl);
            return;
          }
          if (curID == spt.node["attrKey"]) {
            ResLoader_1.default.TagAsset(asset, imageKey);
            ResLoader_1.default.GroupAsset(asset, groupKey);
            spt.spriteFrame = new cc.SpriteFrame(asset);
            spt.node.active = true;
          }
        }).catch(function(err) {
          AppLog_1.default.Error(err);
        });
      };
      Utils.TimeConvertToSencondStr = function(time) {
        if (time && "number" == typeof time) {
          time = Math.floor(time / 1e3);
          var hour = Math.floor(time / 3600);
          var min = Math.floor(Math.floor(time % 3600) / 60);
          var sec = Math.floor(Math.floor(time % 60));
          var strHour = hour.toString().padStart(2, "0");
          var strMin = min.toString().padStart(2, "0");
          var strSec = sec.toString().padStart(2, "0");
          return strHour + ":" + strMin + ":" + strSec;
        }
        return "";
      };
      Utils.NowTimeConvertToSencondStr = function(time) {
        if (time && "number" == typeof time) {
          var date = new Date(time);
          var hour = date.getHours();
          var min = date.getMinutes().toString().padStart(2, "0");
          var sec = date.getSeconds().toString().padStart(2, "0");
          return hour + ":" + min + ":" + sec;
        }
      };
      Utils.getOffsetDayBetweenTime = function(timeStart, timeEnd) {
        var offsetMs = timeEnd - timeStart;
        return Math.ceil(offsetMs / 864e5);
      };
      Utils.GetStrByCount = function(str, count) {
        if (!str) return "";
        if (!count) return "";
        var strArr = Array.from(str);
        return strArr.length > count ? strArr.splice(0, count).join("") + "..." : str;
      };
      Utils.GetStrByTotalCount = function(str, totalCount) {
        if (!str) return "";
        if (!totalCount) return "";
        if (totalCount < 2) return "";
        var strArr = Array.from(str);
        return strArr.length > totalCount ? strArr.splice(0, totalCount - 1).join("") + "..." : str;
      };
      Utils.findNodeByPath = function(node, uiNames) {
        if (!node || !(node instanceof cc.Node) || !uiNames || uiNames.length <= 0) return null;
        var retNode = node;
        for (var i = 0; i < uiNames.length; i++) {
          if ("" == uiNames[i]) return null;
          retNode = Utils.findNodeByName(retNode, uiNames[i]);
          if (!retNode) return null;
        }
        return retNode;
      };
      Utils.findNodeByName = function(node, uiName) {
        if (!node) return null;
        var arr = [ node ];
        for (var i = 0; i < arr.length; i++) {
          var tmpNode = arr[i];
          if (!tmpNode) continue;
          var findNode = tmpNode.getChildByName(uiName);
          if (findNode) return findNode;
          tmpNode.childrenCount > 0 && (arr = arr.concat(tmpNode.children));
        }
        return null;
      };
      return Utils;
    }();
    exports.default = Utils;
    cc._RF.pop();
  }, {
    "../BaseControl/ResLoader": "ResLoader",
    "../Log/AppLog": "AppLog"
  } ],
  connector: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd8b5sFF4pMNJVi3iV8lqpZ", "connector");
    "use strict";
    var $protobuf = protobuf;
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    $root.MessageType = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "Ping"] = 0;
      values[valuesById[1] = "SAUTH"] = 1;
      values[valuesById[2] = "COMMAND"] = 2;
      values[valuesById[3] = "NPET"] = 3;
      return values;
    }();
    $root.ClientType = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "APP"] = 0;
      values[valuesById[1] = "WEB"] = 1;
      return values;
    }();
    $root.BusinessType = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "UNDERCOVER"] = 0;
      values[valuesById[1] = "WEREWOLVESKill"] = 1;
      values[valuesById[2] = "GENERALGAME"] = 2;
      values[valuesById[3] = "NPET"] = 3;
      return values;
    }();
    $root.SauthMessage = function() {
      function SauthMessage(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      SauthMessage.prototype.userId = "";
      SauthMessage.prototype.sessionId = "";
      SauthMessage.prototype.clientType = 0;
      SauthMessage.prototype.businessType = 0;
      SauthMessage.prototype.clientVersion = "";
      SauthMessage.prototype.deviceId = "";
      SauthMessage.prototype.deviceVendor = "";
      SauthMessage.prototype.deviceModel = "";
      SauthMessage.prototype.deviceOsName = "";
      SauthMessage.prototype.deviceOsVersion = "";
      SauthMessage.create = function create(properties) {
        return new SauthMessage(properties);
      };
      SauthMessage.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.userId && message.hasOwnProperty("userId") && writer.uint32(10).string(message.userId);
        null != message.sessionId && message.hasOwnProperty("sessionId") && writer.uint32(18).string(message.sessionId);
        null != message.clientType && message.hasOwnProperty("clientType") && writer.uint32(24).int32(message.clientType);
        null != message.businessType && message.hasOwnProperty("businessType") && writer.uint32(32).int32(message.businessType);
        null != message.clientVersion && message.hasOwnProperty("clientVersion") && writer.uint32(42).string(message.clientVersion);
        null != message.deviceId && message.hasOwnProperty("deviceId") && writer.uint32(50).string(message.deviceId);
        null != message.deviceVendor && message.hasOwnProperty("deviceVendor") && writer.uint32(58).string(message.deviceVendor);
        null != message.deviceModel && message.hasOwnProperty("deviceModel") && writer.uint32(66).string(message.deviceModel);
        null != message.deviceOsName && message.hasOwnProperty("deviceOsName") && writer.uint32(74).string(message.deviceOsName);
        null != message.deviceOsVersion && message.hasOwnProperty("deviceOsVersion") && writer.uint32(82).string(message.deviceOsVersion);
        return writer;
      };
      SauthMessage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      SauthMessage.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.SauthMessage();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.string();
            break;

           case 2:
            message.sessionId = reader.string();
            break;

           case 3:
            message.clientType = reader.int32();
            break;

           case 4:
            message.businessType = reader.int32();
            break;

           case 5:
            message.clientVersion = reader.string();
            break;

           case 6:
            message.deviceId = reader.string();
            break;

           case 7:
            message.deviceVendor = reader.string();
            break;

           case 8:
            message.deviceModel = reader.string();
            break;

           case 9:
            message.deviceOsName = reader.string();
            break;

           case 10:
            message.deviceOsVersion = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      SauthMessage.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      SauthMessage.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userId && message.hasOwnProperty("userId") && !$util.isString(message.userId)) return "userId: string expected";
        if (null != message.sessionId && message.hasOwnProperty("sessionId") && !$util.isString(message.sessionId)) return "sessionId: string expected";
        if (null != message.clientType && message.hasOwnProperty("clientType")) switch (message.clientType) {
         default:
          return "clientType: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.businessType && message.hasOwnProperty("businessType")) switch (message.businessType) {
         default:
          return "businessType: enum value expected";

         case 0:
         case 1:
         case 2:
        }
        if (null != message.clientVersion && message.hasOwnProperty("clientVersion") && !$util.isString(message.clientVersion)) return "clientVersion: string expected";
        if (null != message.deviceId && message.hasOwnProperty("deviceId") && !$util.isString(message.deviceId)) return "deviceId: string expected";
        if (null != message.deviceVendor && message.hasOwnProperty("deviceVendor") && !$util.isString(message.deviceVendor)) return "deviceVendor: string expected";
        if (null != message.deviceModel && message.hasOwnProperty("deviceModel") && !$util.isString(message.deviceModel)) return "deviceModel: string expected";
        if (null != message.deviceOsName && message.hasOwnProperty("deviceOsName") && !$util.isString(message.deviceOsName)) return "deviceOsName: string expected";
        if (null != message.deviceOsVersion && message.hasOwnProperty("deviceOsVersion") && !$util.isString(message.deviceOsVersion)) return "deviceOsVersion: string expected";
        return null;
      };
      SauthMessage.fromObject = function fromObject(object) {
        if (object instanceof $root.SauthMessage) return object;
        var message = new $root.SauthMessage();
        null != object.userId && (message.userId = String(object.userId));
        null != object.sessionId && (message.sessionId = String(object.sessionId));
        switch (object.clientType) {
         case "APP":
         case 0:
          message.clientType = 0;
          break;

         case "WEB":
         case 1:
          message.clientType = 1;
        }
        switch (object.businessType) {
         case "UNDERCOVER":
         case 0:
          message.businessType = 0;
          break;

         case "WEREWOLVESKill":
         case 1:
          message.businessType = 1;
          break;

         case "GENERALGAME":
         case "NPET":
         case 2:
          message.businessType = 2;
        }
        null != object.clientVersion && (message.clientVersion = String(object.clientVersion));
        null != object.deviceId && (message.deviceId = String(object.deviceId));
        null != object.deviceVendor && (message.deviceVendor = String(object.deviceVendor));
        null != object.deviceModel && (message.deviceModel = String(object.deviceModel));
        null != object.deviceOsName && (message.deviceOsName = String(object.deviceOsName));
        null != object.deviceOsVersion && (message.deviceOsVersion = String(object.deviceOsVersion));
        return message;
      };
      SauthMessage.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.userId = "";
          object.sessionId = "";
          object.clientType = options.enums === String ? "APP" : 0;
          object.businessType = options.enums === String ? "UNDERCOVER" : 0;
          object.clientVersion = "";
          object.deviceId = "";
          object.deviceVendor = "";
          object.deviceModel = "";
          object.deviceOsName = "";
          object.deviceOsVersion = "";
        }
        null != message.userId && message.hasOwnProperty("userId") && (object.userId = message.userId);
        null != message.sessionId && message.hasOwnProperty("sessionId") && (object.sessionId = message.sessionId);
        null != message.clientType && message.hasOwnProperty("clientType") && (object.clientType = options.enums === String ? $root.ClientType[message.clientType] : message.clientType);
        null != message.businessType && message.hasOwnProperty("businessType") && (object.businessType = options.enums === String ? $root.BusinessType[message.businessType] : message.businessType);
        null != message.clientVersion && message.hasOwnProperty("clientVersion") && (object.clientVersion = message.clientVersion);
        null != message.deviceId && message.hasOwnProperty("deviceId") && (object.deviceId = message.deviceId);
        null != message.deviceVendor && message.hasOwnProperty("deviceVendor") && (object.deviceVendor = message.deviceVendor);
        null != message.deviceModel && message.hasOwnProperty("deviceModel") && (object.deviceModel = message.deviceModel);
        null != message.deviceOsName && message.hasOwnProperty("deviceOsName") && (object.deviceOsName = message.deviceOsName);
        null != message.deviceOsVersion && message.hasOwnProperty("deviceOsVersion") && (object.deviceOsVersion = message.deviceOsVersion);
        return object;
      };
      SauthMessage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return SauthMessage;
    }();
    $root.CommandMessage = function() {
      function CommandMessage(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      CommandMessage.prototype.soulId = "";
      CommandMessage.prototype.cmdId = "";
      CommandMessage.prototype.type = 0;
      CommandMessage.prototype.acceptedMsgId = "";
      CommandMessage.prototype.msgCommand = null;
      CommandMessage.prototype.respCommand = null;
      CommandMessage.prototype.ackCommand = null;
      CommandMessage.prototype.syncCommand = null;
      CommandMessage.prototype.notifyCommand = null;
      CommandMessage.prototype.syncFin = null;
      CommandMessage.prototype.msgFin = null;
      CommandMessage.prototype.reportCommand = null;
      CommandMessage.prototype.orderCommand = null;
      CommandMessage.prototype.clientType = 0;
      CommandMessage.prototype.businessType = 0;
      CommandMessage.prototype.crc = "";
      CommandMessage.prototype.encryptedUserId = "";
      CommandMessage.prototype.key = "";
      CommandMessage.prototype.appName = "";
      var $oneOfFields;
      Object.defineProperty(CommandMessage.prototype, "cmd", {
        get: $util.oneOfGetter($oneOfFields = [ "msgCommand", "respCommand", "ackCommand", "syncCommand", "notifyCommand", "syncFin", "msgFin", "reportCommand", "orderCommand" ]),
        set: $util.oneOfSetter($oneOfFields)
      });
      CommandMessage.create = function create(properties) {
        return new CommandMessage(properties);
      };
      CommandMessage.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.soulId && message.hasOwnProperty("soulId") && writer.uint32(10).string(message.soulId);
        null != message.cmdId && message.hasOwnProperty("cmdId") && writer.uint32(18).string(message.cmdId);
        null != message.type && message.hasOwnProperty("type") && writer.uint32(24).int32(message.type);
        null != message.acceptedMsgId && message.hasOwnProperty("acceptedMsgId") && writer.uint32(34).string(message.acceptedMsgId);
        null != message.msgCommand && message.hasOwnProperty("msgCommand") && $root.MsgCommand.encode(message.msgCommand, writer.uint32(42).fork()).ldelim();
        null != message.respCommand && message.hasOwnProperty("respCommand") && $root.RespCommand.encode(message.respCommand, writer.uint32(50).fork()).ldelim();
        null != message.ackCommand && message.hasOwnProperty("ackCommand") && $root.AckCommand.encode(message.ackCommand, writer.uint32(58).fork()).ldelim();
        null != message.syncCommand && message.hasOwnProperty("syncCommand") && $root.SyncCommand.encode(message.syncCommand, writer.uint32(66).fork()).ldelim();
        null != message.notifyCommand && message.hasOwnProperty("notifyCommand") && $root.NotifyCommand.encode(message.notifyCommand, writer.uint32(74).fork()).ldelim();
        null != message.syncFin && message.hasOwnProperty("syncFin") && $root.SyncFin.encode(message.syncFin, writer.uint32(82).fork()).ldelim();
        null != message.msgFin && message.hasOwnProperty("msgFin") && $root.MsgFin.encode(message.msgFin, writer.uint32(90).fork()).ldelim();
        null != message.reportCommand && message.hasOwnProperty("reportCommand") && $root.ReportCommand.encode(message.reportCommand, writer.uint32(98).fork()).ldelim();
        null != message.orderCommand && message.hasOwnProperty("orderCommand") && $root.OrderCommand.encode(message.orderCommand, writer.uint32(106).fork()).ldelim();
        null != message.clientType && message.hasOwnProperty("clientType") && writer.uint32(160).int32(message.clientType);
        null != message.businessType && message.hasOwnProperty("businessType") && writer.uint32(168).int32(message.businessType);
        null != message.crc && message.hasOwnProperty("crc") && writer.uint32(178).string(message.crc);
        null != message.encryptedUserId && message.hasOwnProperty("encryptedUserId") && writer.uint32(186).string(message.encryptedUserId);
        null != message.key && message.hasOwnProperty("key") && writer.uint32(194).string(message.key);
        null != message.appName && message.hasOwnProperty("appName") && writer.uint32(202).string(message.appName);
        return writer;
      };
      CommandMessage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      CommandMessage.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.CommandMessage();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.soulId = reader.string();
            break;

           case 2:
            message.cmdId = reader.string();
            break;

           case 3:
            message.type = reader.int32();
            break;

           case 4:
            message.acceptedMsgId = reader.string();
            break;

           case 5:
            message.msgCommand = $root.MsgCommand.decode(reader, reader.uint32());
            break;

           case 6:
            message.respCommand = $root.RespCommand.decode(reader, reader.uint32());
            break;

           case 7:
            message.ackCommand = $root.AckCommand.decode(reader, reader.uint32());
            break;

           case 8:
            message.syncCommand = $root.SyncCommand.decode(reader, reader.uint32());
            break;

           case 9:
            message.notifyCommand = $root.NotifyCommand.decode(reader, reader.uint32());
            break;

           case 10:
            message.syncFin = $root.SyncFin.decode(reader, reader.uint32());
            break;

           case 11:
            message.msgFin = $root.MsgFin.decode(reader, reader.uint32());
            break;

           case 12:
            message.reportCommand = $root.ReportCommand.decode(reader, reader.uint32());
            break;

           case 13:
            message.orderCommand = $root.OrderCommand.decode(reader, reader.uint32());
            break;

           case 20:
            message.clientType = reader.int32();
            break;

           case 21:
            message.businessType = reader.int32();
            break;

           case 22:
            message.crc = reader.string();
            break;

           case 23:
            message.encryptedUserId = reader.string();
            break;

           case 24:
            message.key = reader.string();
            break;

           case 25:
            message.appName = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      CommandMessage.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      CommandMessage.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var properties = {};
        if (null != message.soulId && message.hasOwnProperty("soulId") && !$util.isString(message.soulId)) return "soulId: string expected";
        if (null != message.cmdId && message.hasOwnProperty("cmdId") && !$util.isString(message.cmdId)) return "cmdId: string expected";
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 7:
         case 8:
         case 9:
        }
        if (null != message.acceptedMsgId && message.hasOwnProperty("acceptedMsgId") && !$util.isString(message.acceptedMsgId)) return "acceptedMsgId: string expected";
        if (null != message.msgCommand && message.hasOwnProperty("msgCommand")) {
          properties.cmd = 1;
          var error = $root.MsgCommand.verify(message.msgCommand);
          if (error) return "msgCommand." + error;
        }
        if (null != message.respCommand && message.hasOwnProperty("respCommand")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.RespCommand.verify(message.respCommand);
          if (error) return "respCommand." + error;
        }
        if (null != message.ackCommand && message.hasOwnProperty("ackCommand")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.AckCommand.verify(message.ackCommand);
          if (error) return "ackCommand." + error;
        }
        if (null != message.syncCommand && message.hasOwnProperty("syncCommand")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.SyncCommand.verify(message.syncCommand);
          if (error) return "syncCommand." + error;
        }
        if (null != message.notifyCommand && message.hasOwnProperty("notifyCommand")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.NotifyCommand.verify(message.notifyCommand);
          if (error) return "notifyCommand." + error;
        }
        if (null != message.syncFin && message.hasOwnProperty("syncFin")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.SyncFin.verify(message.syncFin);
          if (error) return "syncFin." + error;
        }
        if (null != message.msgFin && message.hasOwnProperty("msgFin")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.MsgFin.verify(message.msgFin);
          if (error) return "msgFin." + error;
        }
        if (null != message.reportCommand && message.hasOwnProperty("reportCommand")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.ReportCommand.verify(message.reportCommand);
          if (error) return "reportCommand." + error;
        }
        if (null != message.orderCommand && message.hasOwnProperty("orderCommand")) {
          if (1 === properties.cmd) return "cmd: multiple values";
          properties.cmd = 1;
          var error = $root.OrderCommand.verify(message.orderCommand);
          if (error) return "orderCommand." + error;
        }
        if (null != message.clientType && message.hasOwnProperty("clientType")) switch (message.clientType) {
         default:
          return "clientType: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.businessType && message.hasOwnProperty("businessType")) switch (message.businessType) {
         default:
          return "businessType: enum value expected";

         case 0:
         case 1:
         case 2:
        }
        if (null != message.crc && message.hasOwnProperty("crc") && !$util.isString(message.crc)) return "crc: string expected";
        if (null != message.encryptedUserId && message.hasOwnProperty("encryptedUserId") && !$util.isString(message.encryptedUserId)) return "encryptedUserId: string expected";
        if (null != message.key && message.hasOwnProperty("key") && !$util.isString(message.key)) return "key: string expected";
        if (null != message.appName && message.hasOwnProperty("appName") && !$util.isString(message.appName)) return "appName: string expected";
        return null;
      };
      CommandMessage.fromObject = function fromObject(object) {
        if (object instanceof $root.CommandMessage) return object;
        var message = new $root.CommandMessage();
        null != object.soulId && (message.soulId = String(object.soulId));
        null != object.cmdId && (message.cmdId = String(object.cmdId));
        switch (object.type) {
         case "MSG":
         case 0:
          message.type = 0;
          break;

         case "SYNC":
         case 1:
          message.type = 1;
          break;

         case "ACK":
         case 2:
          message.type = 2;
          break;

         case "RESP":
         case 3:
          message.type = 3;
          break;

         case "NOTIFY":
         case 4:
          message.type = 4;
          break;

         case "SYNC_FIN":
         case 5:
          message.type = 5;
          break;

         case "MSG_FIN":
         case 6:
          message.type = 6;
          break;

         case "FIRST_SYNC":
         case 7:
          message.type = 7;
          break;

         case "REPORT":
         case 8:
          message.type = 8;
          break;

         case "ORDER":
         case 9:
          message.type = 9;
        }
        null != object.acceptedMsgId && (message.acceptedMsgId = String(object.acceptedMsgId));
        if (null != object.msgCommand) {
          if ("object" !== typeof object.msgCommand) throw TypeError(".CommandMessage.msgCommand: object expected");
          message.msgCommand = $root.MsgCommand.fromObject(object.msgCommand);
        }
        if (null != object.respCommand) {
          if ("object" !== typeof object.respCommand) throw TypeError(".CommandMessage.respCommand: object expected");
          message.respCommand = $root.RespCommand.fromObject(object.respCommand);
        }
        if (null != object.ackCommand) {
          if ("object" !== typeof object.ackCommand) throw TypeError(".CommandMessage.ackCommand: object expected");
          message.ackCommand = $root.AckCommand.fromObject(object.ackCommand);
        }
        if (null != object.syncCommand) {
          if ("object" !== typeof object.syncCommand) throw TypeError(".CommandMessage.syncCommand: object expected");
          message.syncCommand = $root.SyncCommand.fromObject(object.syncCommand);
        }
        if (null != object.notifyCommand) {
          if ("object" !== typeof object.notifyCommand) throw TypeError(".CommandMessage.notifyCommand: object expected");
          message.notifyCommand = $root.NotifyCommand.fromObject(object.notifyCommand);
        }
        if (null != object.syncFin) {
          if ("object" !== typeof object.syncFin) throw TypeError(".CommandMessage.syncFin: object expected");
          message.syncFin = $root.SyncFin.fromObject(object.syncFin);
        }
        if (null != object.msgFin) {
          if ("object" !== typeof object.msgFin) throw TypeError(".CommandMessage.msgFin: object expected");
          message.msgFin = $root.MsgFin.fromObject(object.msgFin);
        }
        if (null != object.reportCommand) {
          if ("object" !== typeof object.reportCommand) throw TypeError(".CommandMessage.reportCommand: object expected");
          message.reportCommand = $root.ReportCommand.fromObject(object.reportCommand);
        }
        if (null != object.orderCommand) {
          if ("object" !== typeof object.orderCommand) throw TypeError(".CommandMessage.orderCommand: object expected");
          message.orderCommand = $root.OrderCommand.fromObject(object.orderCommand);
        }
        switch (object.clientType) {
         case "APP":
         case 0:
          message.clientType = 0;
          break;

         case "WEB":
         case 1:
          message.clientType = 1;
        }
        switch (object.businessType) {
         case "UNDERCOVER":
         case 0:
          message.businessType = 0;
          break;

         case "WEREWOLVESKill":
         case 1:
          message.businessType = 1;
          break;

         case "GENERALGAME":
         case "NPET":
         case 2:
          message.businessType = 2;
        }
        null != object.crc && (message.crc = String(object.crc));
        null != object.encryptedUserId && (message.encryptedUserId = String(object.encryptedUserId));
        null != object.key && (message.key = String(object.key));
        null != object.appName && (message.appName = String(object.appName));
        return message;
      };
      CommandMessage.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.soulId = "";
          object.cmdId = "";
          object.type = options.enums === String ? "MSG" : 0;
          object.acceptedMsgId = "";
          object.clientType = options.enums === String ? "APP" : 0;
          object.businessType = options.enums === String ? "UNDERCOVER" : 0;
          object.crc = "";
          object.encryptedUserId = "";
          object.key = "";
          object.appName = "";
        }
        null != message.soulId && message.hasOwnProperty("soulId") && (object.soulId = message.soulId);
        null != message.cmdId && message.hasOwnProperty("cmdId") && (object.cmdId = message.cmdId);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.CommandMessage.Type[message.type] : message.type);
        null != message.acceptedMsgId && message.hasOwnProperty("acceptedMsgId") && (object.acceptedMsgId = message.acceptedMsgId);
        if (null != message.msgCommand && message.hasOwnProperty("msgCommand")) {
          object.msgCommand = $root.MsgCommand.toObject(message.msgCommand, options);
          options.oneofs && (object.cmd = "msgCommand");
        }
        if (null != message.respCommand && message.hasOwnProperty("respCommand")) {
          object.respCommand = $root.RespCommand.toObject(message.respCommand, options);
          options.oneofs && (object.cmd = "respCommand");
        }
        if (null != message.ackCommand && message.hasOwnProperty("ackCommand")) {
          object.ackCommand = $root.AckCommand.toObject(message.ackCommand, options);
          options.oneofs && (object.cmd = "ackCommand");
        }
        if (null != message.syncCommand && message.hasOwnProperty("syncCommand")) {
          object.syncCommand = $root.SyncCommand.toObject(message.syncCommand, options);
          options.oneofs && (object.cmd = "syncCommand");
        }
        if (null != message.notifyCommand && message.hasOwnProperty("notifyCommand")) {
          object.notifyCommand = $root.NotifyCommand.toObject(message.notifyCommand, options);
          options.oneofs && (object.cmd = "notifyCommand");
        }
        if (null != message.syncFin && message.hasOwnProperty("syncFin")) {
          object.syncFin = $root.SyncFin.toObject(message.syncFin, options);
          options.oneofs && (object.cmd = "syncFin");
        }
        if (null != message.msgFin && message.hasOwnProperty("msgFin")) {
          object.msgFin = $root.MsgFin.toObject(message.msgFin, options);
          options.oneofs && (object.cmd = "msgFin");
        }
        if (null != message.reportCommand && message.hasOwnProperty("reportCommand")) {
          object.reportCommand = $root.ReportCommand.toObject(message.reportCommand, options);
          options.oneofs && (object.cmd = "reportCommand");
        }
        if (null != message.orderCommand && message.hasOwnProperty("orderCommand")) {
          object.orderCommand = $root.OrderCommand.toObject(message.orderCommand, options);
          options.oneofs && (object.cmd = "orderCommand");
        }
        null != message.clientType && message.hasOwnProperty("clientType") && (object.clientType = options.enums === String ? $root.ClientType[message.clientType] : message.clientType);
        null != message.businessType && message.hasOwnProperty("businessType") && (object.businessType = options.enums === String ? $root.BusinessType[message.businessType] : message.businessType);
        null != message.crc && message.hasOwnProperty("crc") && (object.crc = message.crc);
        null != message.encryptedUserId && message.hasOwnProperty("encryptedUserId") && (object.encryptedUserId = message.encryptedUserId);
        null != message.key && message.hasOwnProperty("key") && (object.key = message.key);
        null != message.appName && message.hasOwnProperty("appName") && (object.appName = message.appName);
        return object;
      };
      CommandMessage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      CommandMessage.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MSG"] = 0;
        values[valuesById[1] = "SYNC"] = 1;
        values[valuesById[2] = "ACK"] = 2;
        values[valuesById[3] = "RESP"] = 3;
        values[valuesById[4] = "NOTIFY"] = 4;
        values[valuesById[5] = "SYNC_FIN"] = 5;
        values[valuesById[6] = "MSG_FIN"] = 6;
        values[valuesById[7] = "FIRST_SYNC"] = 7;
        values[valuesById[8] = "REPORT"] = 8;
        values[valuesById[9] = "ORDER"] = 9;
        return values;
      }();
      return CommandMessage;
    }();
    $root.CommandGroup = function() {
      function CommandGroup(properties) {
        this.commands = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      CommandGroup.prototype.commands = $util.emptyArray;
      CommandGroup.create = function create(properties) {
        return new CommandGroup(properties);
      };
      CommandGroup.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.commands && message.commands.length) for (var i = 0; i < message.commands.length; ++i) $root.CommandMessage.encode(message.commands[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      CommandGroup.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      CommandGroup.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.CommandGroup();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.commands && message.commands.length || (message.commands = []);
            message.commands.push($root.CommandMessage.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      CommandGroup.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      CommandGroup.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.commands && message.hasOwnProperty("commands")) {
          if (!Array.isArray(message.commands)) return "commands: array expected";
          for (var i = 0; i < message.commands.length; ++i) {
            var error = $root.CommandMessage.verify(message.commands[i]);
            if (error) return "commands." + error;
          }
        }
        return null;
      };
      CommandGroup.fromObject = function fromObject(object) {
        if (object instanceof $root.CommandGroup) return object;
        var message = new $root.CommandGroup();
        if (object.commands) {
          if (!Array.isArray(object.commands)) throw TypeError(".CommandGroup.commands: array expected");
          message.commands = [];
          for (var i = 0; i < object.commands.length; ++i) {
            if ("object" !== typeof object.commands[i]) throw TypeError(".CommandGroup.commands: object expected");
            message.commands[i] = $root.CommandMessage.fromObject(object.commands[i]);
          }
        }
        return message;
      };
      CommandGroup.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.commands = []);
        if (message.commands && message.commands.length) {
          object.commands = [];
          for (var j = 0; j < message.commands.length; ++j) object.commands[j] = $root.CommandMessage.toObject(message.commands[j], options);
        }
        return object;
      };
      CommandGroup.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return CommandGroup;
    }();
    $root.OrderCommand = function() {
      function OrderCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      OrderCommand.prototype.type = 0;
      OrderCommand.prototype.kickoutOrderCommand = null;
      var $oneOfFields;
      Object.defineProperty(OrderCommand.prototype, "order", {
        get: $util.oneOfGetter($oneOfFields = [ "kickoutOrderCommand" ]),
        set: $util.oneOfSetter($oneOfFields)
      });
      OrderCommand.create = function create(properties) {
        return new OrderCommand(properties);
      };
      OrderCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).int32(message.type);
        null != message.kickoutOrderCommand && message.hasOwnProperty("kickoutOrderCommand") && $root.KickoutOrderCommand.encode(message.kickoutOrderCommand, writer.uint32(18).fork()).ldelim();
        return writer;
      };
      OrderCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      OrderCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.OrderCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.kickoutOrderCommand = $root.KickoutOrderCommand.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      OrderCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      OrderCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var properties = {};
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
        }
        if (null != message.kickoutOrderCommand && message.hasOwnProperty("kickoutOrderCommand")) {
          properties.order = 1;
          var error = $root.KickoutOrderCommand.verify(message.kickoutOrderCommand);
          if (error) return "kickoutOrderCommand." + error;
        }
        return null;
      };
      OrderCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.OrderCommand) return object;
        var message = new $root.OrderCommand();
        switch (object.type) {
         case "KICKOUT":
         case 0:
          message.type = 0;
        }
        if (null != object.kickoutOrderCommand) {
          if ("object" !== typeof object.kickoutOrderCommand) throw TypeError(".OrderCommand.kickoutOrderCommand: object expected");
          message.kickoutOrderCommand = $root.KickoutOrderCommand.fromObject(object.kickoutOrderCommand);
        }
        return message;
      };
      OrderCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.type = options.enums === String ? "KICKOUT" : 0);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.OrderCommand.Type[message.type] : message.type);
        if (null != message.kickoutOrderCommand && message.hasOwnProperty("kickoutOrderCommand")) {
          object.kickoutOrderCommand = $root.KickoutOrderCommand.toObject(message.kickoutOrderCommand, options);
          options.oneofs && (object.order = "kickoutOrderCommand");
        }
        return object;
      };
      OrderCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      OrderCommand.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "KICKOUT"] = 0;
        return values;
      }();
      return OrderCommand;
    }();
    $root.KickoutOrderCommand = function() {
      function KickoutOrderCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      KickoutOrderCommand.prototype.userId = "";
      KickoutOrderCommand.prototype.kicker = 0;
      KickoutOrderCommand.prototype.asser = 0;
      KickoutOrderCommand.prototype.timestamp = "";
      KickoutOrderCommand.create = function create(properties) {
        return new KickoutOrderCommand(properties);
      };
      KickoutOrderCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.userId && message.hasOwnProperty("userId") && writer.uint32(10).string(message.userId);
        null != message.kicker && message.hasOwnProperty("kicker") && writer.uint32(16).int32(message.kicker);
        null != message.asser && message.hasOwnProperty("asser") && writer.uint32(24).int32(message.asser);
        null != message.timestamp && message.hasOwnProperty("timestamp") && writer.uint32(34).string(message.timestamp);
        return writer;
      };
      KickoutOrderCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      KickoutOrderCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.KickoutOrderCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.string();
            break;

           case 2:
            message.kicker = reader.int32();
            break;

           case 3:
            message.asser = reader.int32();
            break;

           case 4:
            message.timestamp = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      KickoutOrderCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      KickoutOrderCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userId && message.hasOwnProperty("userId") && !$util.isString(message.userId)) return "userId: string expected";
        if (null != message.kicker && message.hasOwnProperty("kicker")) switch (message.kicker) {
         default:
          return "kicker: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.asser && message.hasOwnProperty("asser")) switch (message.asser) {
         default:
          return "asser: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.timestamp && message.hasOwnProperty("timestamp") && !$util.isString(message.timestamp)) return "timestamp: string expected";
        return null;
      };
      KickoutOrderCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.KickoutOrderCommand) return object;
        var message = new $root.KickoutOrderCommand();
        null != object.userId && (message.userId = String(object.userId));
        switch (object.kicker) {
         case "APP":
         case 0:
          message.kicker = 0;
          break;

         case "WEB":
         case 1:
          message.kicker = 1;
        }
        switch (object.asser) {
         case "APP":
         case 0:
          message.asser = 0;
          break;

         case "WEB":
         case 1:
          message.asser = 1;
        }
        null != object.timestamp && (message.timestamp = String(object.timestamp));
        return message;
      };
      KickoutOrderCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.userId = "";
          object.kicker = options.enums === String ? "APP" : 0;
          object.asser = options.enums === String ? "APP" : 0;
          object.timestamp = "";
        }
        null != message.userId && message.hasOwnProperty("userId") && (object.userId = message.userId);
        null != message.kicker && message.hasOwnProperty("kicker") && (object.kicker = options.enums === String ? $root.ClientType[message.kicker] : message.kicker);
        null != message.asser && message.hasOwnProperty("asser") && (object.asser = options.enums === String ? $root.ClientType[message.asser] : message.asser);
        null != message.timestamp && message.hasOwnProperty("timestamp") && (object.timestamp = message.timestamp);
        return object;
      };
      KickoutOrderCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return KickoutOrderCommand;
    }();
    $root.ReportCommand = function() {
      function ReportCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      ReportCommand.prototype.type = 0;
      ReportCommand.prototype.loginReportCommand = null;
      var $oneOfFields;
      Object.defineProperty(ReportCommand.prototype, "report", {
        get: $util.oneOfGetter($oneOfFields = [ "loginReportCommand" ]),
        set: $util.oneOfSetter($oneOfFields)
      });
      ReportCommand.create = function create(properties) {
        return new ReportCommand(properties);
      };
      ReportCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).int32(message.type);
        null != message.loginReportCommand && message.hasOwnProperty("loginReportCommand") && $root.LoginReportCommand.encode(message.loginReportCommand, writer.uint32(18).fork()).ldelim();
        return writer;
      };
      ReportCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      ReportCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.ReportCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.loginReportCommand = $root.LoginReportCommand.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      ReportCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      ReportCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var properties = {};
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
        }
        if (null != message.loginReportCommand && message.hasOwnProperty("loginReportCommand")) {
          properties.report = 1;
          var error = $root.LoginReportCommand.verify(message.loginReportCommand);
          if (error) return "loginReportCommand." + error;
        }
        return null;
      };
      ReportCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.ReportCommand) return object;
        var message = new $root.ReportCommand();
        switch (object.type) {
         case "LOGIN_REPORT":
         case 0:
          message.type = 0;
        }
        if (null != object.loginReportCommand) {
          if ("object" !== typeof object.loginReportCommand) throw TypeError(".ReportCommand.loginReportCommand: object expected");
          message.loginReportCommand = $root.LoginReportCommand.fromObject(object.loginReportCommand);
        }
        return message;
      };
      ReportCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.type = options.enums === String ? "LOGIN_REPORT" : 0);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.ReportCommand.Type[message.type] : message.type);
        if (null != message.loginReportCommand && message.hasOwnProperty("loginReportCommand")) {
          object.loginReportCommand = $root.LoginReportCommand.toObject(message.loginReportCommand, options);
          options.oneofs && (object.report = "loginReportCommand");
        }
        return object;
      };
      ReportCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      ReportCommand.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "LOGIN_REPORT"] = 0;
        return values;
      }();
      return ReportCommand;
    }();
    $root.LoginReportCommand = function() {
      function LoginReportCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      LoginReportCommand.prototype.loginType = 0;
      LoginReportCommand.prototype.clientType = 0;
      LoginReportCommand.prototype.from = "";
      LoginReportCommand.prototype.to = "";
      LoginReportCommand.prototype.timestamp = "";
      LoginReportCommand.prototype.deviceId = "";
      LoginReportCommand.create = function create(properties) {
        return new LoginReportCommand(properties);
      };
      LoginReportCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.loginType && message.hasOwnProperty("loginType") && writer.uint32(8).int32(message.loginType);
        null != message.clientType && message.hasOwnProperty("clientType") && writer.uint32(16).int32(message.clientType);
        null != message.from && message.hasOwnProperty("from") && writer.uint32(26).string(message.from);
        null != message.to && message.hasOwnProperty("to") && writer.uint32(34).string(message.to);
        null != message.timestamp && message.hasOwnProperty("timestamp") && writer.uint32(42).string(message.timestamp);
        null != message.deviceId && message.hasOwnProperty("deviceId") && writer.uint32(50).string(message.deviceId);
        return writer;
      };
      LoginReportCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      LoginReportCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.LoginReportCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.loginType = reader.int32();
            break;

           case 2:
            message.clientType = reader.int32();
            break;

           case 3:
            message.from = reader.string();
            break;

           case 4:
            message.to = reader.string();
            break;

           case 5:
            message.timestamp = reader.string();
            break;

           case 6:
            message.deviceId = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      LoginReportCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      LoginReportCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.loginType && message.hasOwnProperty("loginType")) switch (message.loginType) {
         default:
          return "loginType: enum value expected";

         case 0:
         case 1:
         case 2:
         case 3:
        }
        if (null != message.clientType && message.hasOwnProperty("clientType")) switch (message.clientType) {
         default:
          return "clientType: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.from && message.hasOwnProperty("from") && !$util.isString(message.from)) return "from: string expected";
        if (null != message.to && message.hasOwnProperty("to") && !$util.isString(message.to)) return "to: string expected";
        if (null != message.timestamp && message.hasOwnProperty("timestamp") && !$util.isString(message.timestamp)) return "timestamp: string expected";
        if (null != message.deviceId && message.hasOwnProperty("deviceId") && !$util.isString(message.deviceId)) return "deviceId: string expected";
        return null;
      };
      LoginReportCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.LoginReportCommand) return object;
        var message = new $root.LoginReportCommand();
        switch (object.loginType) {
         case "CONNECT":
         case 0:
          message.loginType = 0;
          break;

         case "DISCONNECT":
         case 1:
          message.loginType = 1;
          break;

         case "LOGIN":
         case 2:
          message.loginType = 2;
          break;

         case "LOGOUT":
         case 3:
          message.loginType = 3;
        }
        switch (object.clientType) {
         case "APP":
         case 0:
          message.clientType = 0;
          break;

         case "WEB":
         case 1:
          message.clientType = 1;
        }
        null != object.from && (message.from = String(object.from));
        null != object.to && (message.to = String(object.to));
        null != object.timestamp && (message.timestamp = String(object.timestamp));
        null != object.deviceId && (message.deviceId = String(object.deviceId));
        return message;
      };
      LoginReportCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.loginType = options.enums === String ? "CONNECT" : 0;
          object.clientType = options.enums === String ? "APP" : 0;
          object.from = "";
          object.to = "";
          object.timestamp = "";
          object.deviceId = "";
        }
        null != message.loginType && message.hasOwnProperty("loginType") && (object.loginType = options.enums === String ? $root.LoginReportCommand.LoginType[message.loginType] : message.loginType);
        null != message.clientType && message.hasOwnProperty("clientType") && (object.clientType = options.enums === String ? $root.ClientType[message.clientType] : message.clientType);
        null != message.from && message.hasOwnProperty("from") && (object.from = message.from);
        null != message.to && message.hasOwnProperty("to") && (object.to = message.to);
        null != message.timestamp && message.hasOwnProperty("timestamp") && (object.timestamp = message.timestamp);
        null != message.deviceId && message.hasOwnProperty("deviceId") && (object.deviceId = message.deviceId);
        return object;
      };
      LoginReportCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      LoginReportCommand.LoginType = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CONNECT"] = 0;
        values[valuesById[1] = "DISCONNECT"] = 1;
        values[valuesById[2] = "LOGIN"] = 2;
        values[valuesById[3] = "LOGOUT"] = 3;
        return values;
      }();
      return LoginReportCommand;
    }();
    $root.AckCommand = function() {
      function AckCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      AckCommand.prototype.remain = false;
      AckCommand.prototype.readLastMsgId = "";
      AckCommand.prototype.timestamp = "";
      AckCommand.prototype.type = 0;
      AckCommand.create = function create(properties) {
        return new AckCommand(properties);
      };
      AckCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.remain && message.hasOwnProperty("remain") && writer.uint32(8).bool(message.remain);
        null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && writer.uint32(18).string(message.readLastMsgId);
        null != message.timestamp && message.hasOwnProperty("timestamp") && writer.uint32(26).string(message.timestamp);
        null != message.type && message.hasOwnProperty("type") && writer.uint32(32).int32(message.type);
        return writer;
      };
      AckCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      AckCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.AckCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.remain = reader.bool();
            break;

           case 2:
            message.readLastMsgId = reader.string();
            break;

           case 3:
            message.timestamp = reader.string();
            break;

           case 4:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      AckCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      AckCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.remain && message.hasOwnProperty("remain") && "boolean" !== typeof message.remain) return "remain: boolean expected";
        if (null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && !$util.isString(message.readLastMsgId)) return "readLastMsgId: string expected";
        if (null != message.timestamp && message.hasOwnProperty("timestamp") && !$util.isString(message.timestamp)) return "timestamp: string expected";
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
        }
        return null;
      };
      AckCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.AckCommand) return object;
        var message = new $root.AckCommand();
        null != object.remain && (message.remain = Boolean(object.remain));
        null != object.readLastMsgId && (message.readLastMsgId = String(object.readLastMsgId));
        null != object.timestamp && (message.timestamp = String(object.timestamp));
        switch (object.type) {
         case "MSG":
         case 0:
          message.type = 0;
          break;

         case "SYNC":
         case 1:
          message.type = 1;
        }
        return message;
      };
      AckCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.remain = false;
          object.readLastMsgId = "";
          object.timestamp = "";
          object.type = options.enums === String ? "MSG" : 0;
        }
        null != message.remain && message.hasOwnProperty("remain") && (object.remain = message.remain);
        null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && (object.readLastMsgId = message.readLastMsgId);
        null != message.timestamp && message.hasOwnProperty("timestamp") && (object.timestamp = message.timestamp);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.AckCommand.Type[message.type] : message.type);
        return object;
      };
      AckCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      AckCommand.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MSG"] = 0;
        values[valuesById[1] = "SYNC"] = 1;
        return values;
      }();
      return AckCommand;
    }();
    $root.SyncCommand = function() {
      function SyncCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      SyncCommand.prototype.startMsgId = "";
      SyncCommand.prototype.endMsgId = "";
      SyncCommand.prototype.startTimestamp = "";
      SyncCommand.prototype.endTimestamp = "";
      SyncCommand.prototype.type = 0;
      SyncCommand.create = function create(properties) {
        return new SyncCommand(properties);
      };
      SyncCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.startMsgId && message.hasOwnProperty("startMsgId") && writer.uint32(10).string(message.startMsgId);
        null != message.endMsgId && message.hasOwnProperty("endMsgId") && writer.uint32(18).string(message.endMsgId);
        null != message.startTimestamp && message.hasOwnProperty("startTimestamp") && writer.uint32(26).string(message.startTimestamp);
        null != message.endTimestamp && message.hasOwnProperty("endTimestamp") && writer.uint32(34).string(message.endTimestamp);
        null != message.type && message.hasOwnProperty("type") && writer.uint32(40).int32(message.type);
        return writer;
      };
      SyncCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      SyncCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.SyncCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.startMsgId = reader.string();
            break;

           case 2:
            message.endMsgId = reader.string();
            break;

           case 3:
            message.startTimestamp = reader.string();
            break;

           case 4:
            message.endTimestamp = reader.string();
            break;

           case 5:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      SyncCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      SyncCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.startMsgId && message.hasOwnProperty("startMsgId") && !$util.isString(message.startMsgId)) return "startMsgId: string expected";
        if (null != message.endMsgId && message.hasOwnProperty("endMsgId") && !$util.isString(message.endMsgId)) return "endMsgId: string expected";
        if (null != message.startTimestamp && message.hasOwnProperty("startTimestamp") && !$util.isString(message.startTimestamp)) return "startTimestamp: string expected";
        if (null != message.endTimestamp && message.hasOwnProperty("endTimestamp") && !$util.isString(message.endTimestamp)) return "endTimestamp: string expected";
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
        }
        return null;
      };
      SyncCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.SyncCommand) return object;
        var message = new $root.SyncCommand();
        null != object.startMsgId && (message.startMsgId = String(object.startMsgId));
        null != object.endMsgId && (message.endMsgId = String(object.endMsgId));
        null != object.startTimestamp && (message.startTimestamp = String(object.startTimestamp));
        null != object.endTimestamp && (message.endTimestamp = String(object.endTimestamp));
        switch (object.type) {
         case "SINGLECHAT":
         case 0:
          message.type = 0;
        }
        return message;
      };
      SyncCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.startMsgId = "";
          object.endMsgId = "";
          object.startTimestamp = "";
          object.endTimestamp = "";
          object.type = options.enums === String ? "SINGLECHAT" : 0;
        }
        null != message.startMsgId && message.hasOwnProperty("startMsgId") && (object.startMsgId = message.startMsgId);
        null != message.endMsgId && message.hasOwnProperty("endMsgId") && (object.endMsgId = message.endMsgId);
        null != message.startTimestamp && message.hasOwnProperty("startTimestamp") && (object.startTimestamp = message.startTimestamp);
        null != message.endTimestamp && message.hasOwnProperty("endTimestamp") && (object.endTimestamp = message.endTimestamp);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.SyncCommand.Type[message.type] : message.type);
        return object;
      };
      SyncCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      SyncCommand.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SINGLECHAT"] = 0;
        return values;
      }();
      return SyncCommand;
    }();
    $root.SyncFin = function() {
      function SyncFin(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      SyncFin.prototype.readLastMsgId = "";
      SyncFin.prototype.timestamp = "";
      SyncFin.create = function create(properties) {
        return new SyncFin(properties);
      };
      SyncFin.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && writer.uint32(10).string(message.readLastMsgId);
        null != message.timestamp && message.hasOwnProperty("timestamp") && writer.uint32(18).string(message.timestamp);
        return writer;
      };
      SyncFin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      SyncFin.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.SyncFin();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.readLastMsgId = reader.string();
            break;

           case 2:
            message.timestamp = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      SyncFin.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      SyncFin.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && !$util.isString(message.readLastMsgId)) return "readLastMsgId: string expected";
        if (null != message.timestamp && message.hasOwnProperty("timestamp") && !$util.isString(message.timestamp)) return "timestamp: string expected";
        return null;
      };
      SyncFin.fromObject = function fromObject(object) {
        if (object instanceof $root.SyncFin) return object;
        var message = new $root.SyncFin();
        null != object.readLastMsgId && (message.readLastMsgId = String(object.readLastMsgId));
        null != object.timestamp && (message.timestamp = String(object.timestamp));
        return message;
      };
      SyncFin.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.readLastMsgId = "";
          object.timestamp = "";
        }
        null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && (object.readLastMsgId = message.readLastMsgId);
        null != message.timestamp && message.hasOwnProperty("timestamp") && (object.timestamp = message.timestamp);
        return object;
      };
      SyncFin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return SyncFin;
    }();
    $root.MsgFin = function() {
      function MsgFin(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      MsgFin.prototype.readLastMsgId = "";
      MsgFin.prototype.timestamp = "";
      MsgFin.prototype.status = 0;
      MsgFin.create = function create(properties) {
        return new MsgFin(properties);
      };
      MsgFin.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && writer.uint32(10).string(message.readLastMsgId);
        null != message.timestamp && message.hasOwnProperty("timestamp") && writer.uint32(18).string(message.timestamp);
        null != message.status && message.hasOwnProperty("status") && writer.uint32(24).int32(message.status);
        return writer;
      };
      MsgFin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      MsgFin.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.MsgFin();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.readLastMsgId = reader.string();
            break;

           case 2:
            message.timestamp = reader.string();
            break;

           case 3:
            message.status = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      MsgFin.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      MsgFin.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && !$util.isString(message.readLastMsgId)) return "readLastMsgId: string expected";
        if (null != message.timestamp && message.hasOwnProperty("timestamp") && !$util.isString(message.timestamp)) return "timestamp: string expected";
        if (null != message.status && message.hasOwnProperty("status")) switch (message.status) {
         default:
          return "status: enum value expected";

         case 0:
         case 1:
         case 2:
        }
        return null;
      };
      MsgFin.fromObject = function fromObject(object) {
        if (object instanceof $root.MsgFin) return object;
        var message = new $root.MsgFin();
        null != object.readLastMsgId && (message.readLastMsgId = String(object.readLastMsgId));
        null != object.timestamp && (message.timestamp = String(object.timestamp));
        switch (object.status) {
         case "TODO":
         case 0:
          message.status = 0;
          break;

         case "DOING":
         case 1:
          message.status = 1;
          break;

         case "DONE":
         case 2:
          message.status = 2;
        }
        return message;
      };
      MsgFin.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.readLastMsgId = "";
          object.timestamp = "";
          object.status = options.enums === String ? "TODO" : 0;
        }
        null != message.readLastMsgId && message.hasOwnProperty("readLastMsgId") && (object.readLastMsgId = message.readLastMsgId);
        null != message.timestamp && message.hasOwnProperty("timestamp") && (object.timestamp = message.timestamp);
        null != message.status && message.hasOwnProperty("status") && (object.status = options.enums === String ? $root.MsgFin.Status[message.status] : message.status);
        return object;
      };
      MsgFin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      MsgFin.Status = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TODO"] = 0;
        values[valuesById[1] = "DOING"] = 1;
        values[valuesById[2] = "DONE"] = 2;
        return values;
      }();
      return MsgFin;
    }();
    $root.MsgCommand = function() {
      function MsgCommand(properties) {
        this.extMap = {};
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      MsgCommand.prototype.from = "";
      MsgCommand.prototype.to = "";
      MsgCommand.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      MsgCommand.prototype.underCover = null;
      MsgCommand.prototype.generalMsg = null;
      MsgCommand.prototype.extMap = $util.emptyObject;
      var $oneOfFields;
      Object.defineProperty(MsgCommand.prototype, "msg", {
        get: $util.oneOfGetter($oneOfFields = [ "underCover", "generalMsg" ]),
        set: $util.oneOfSetter($oneOfFields)
      });
      MsgCommand.create = function create(properties) {
        return new MsgCommand(properties);
      };
      MsgCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.from && message.hasOwnProperty("from") && writer.uint32(10).string(message.from);
        null != message.to && message.hasOwnProperty("to") && writer.uint32(18).string(message.to);
        null != message.timestamp && message.hasOwnProperty("timestamp") && writer.uint32(24).int64(message.timestamp);
        null != message.underCover && message.hasOwnProperty("underCover") && $root.UnderCover.encode(message.underCover, writer.uint32(34).fork()).ldelim();
        null != message.generalMsg && message.hasOwnProperty("generalMsg") && $root.GeneralMsg.encode(message.generalMsg, writer.uint32(42).fork()).ldelim();
        if (null != message.extMap && message.hasOwnProperty("extMap")) for (var keys = Object.keys(message.extMap), i = 0; i < keys.length; ++i) writer.uint32(82).fork().uint32(10).string(keys[i]).uint32(18).string(message.extMap[keys[i]]).ldelim();
        return writer;
      };
      MsgCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      MsgCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.MsgCommand(), key;
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.from = reader.string();
            break;

           case 2:
            message.to = reader.string();
            break;

           case 3:
            message.timestamp = reader.int64();
            break;

           case 4:
            message.underCover = $root.UnderCover.decode(reader, reader.uint32());
            break;

           case 5:
            message.generalMsg = $root.GeneralMsg.decode(reader, reader.uint32());
            break;

           case 10:
            reader.skip().pos++;
            message.extMap === $util.emptyObject && (message.extMap = {});
            key = reader.string();
            reader.pos++;
            message.extMap[key] = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      MsgCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      MsgCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var properties = {};
        if (null != message.from && message.hasOwnProperty("from") && !$util.isString(message.from)) return "from: string expected";
        if (null != message.to && message.hasOwnProperty("to") && !$util.isString(message.to)) return "to: string expected";
        if (null != message.timestamp && message.hasOwnProperty("timestamp") && !$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high))) return "timestamp: integer|Long expected";
        if (null != message.underCover && message.hasOwnProperty("underCover")) {
          properties.msg = 1;
          var error = $root.UnderCover.verify(message.underCover);
          if (error) return "underCover." + error;
        }
        if (null != message.generalMsg && message.hasOwnProperty("generalMsg")) {
          if (1 === properties.msg) return "msg: multiple values";
          properties.msg = 1;
          var error = $root.GeneralMsg.verify(message.generalMsg);
          if (error) return "generalMsg." + error;
        }
        if (null != message.extMap && message.hasOwnProperty("extMap")) {
          if (!$util.isObject(message.extMap)) return "extMap: object expected";
          var key = Object.keys(message.extMap);
          for (var i = 0; i < key.length; ++i) if (!$util.isString(message.extMap[key[i]])) return "extMap: string{k:string} expected";
        }
        return null;
      };
      MsgCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.MsgCommand) return object;
        var message = new $root.MsgCommand();
        null != object.from && (message.from = String(object.from));
        null != object.to && (message.to = String(object.to));
        null != object.timestamp && ($util.Long ? (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false : "string" === typeof object.timestamp ? message.timestamp = parseInt(object.timestamp, 10) : "number" === typeof object.timestamp ? message.timestamp = object.timestamp : "object" === typeof object.timestamp && (message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber()));
        if (null != object.underCover) {
          if ("object" !== typeof object.underCover) throw TypeError(".MsgCommand.underCover: object expected");
          message.underCover = $root.UnderCover.fromObject(object.underCover);
        }
        if (null != object.generalMsg) {
          if ("object" !== typeof object.generalMsg) throw TypeError(".MsgCommand.generalMsg: object expected");
          message.generalMsg = $root.GeneralMsg.fromObject(object.generalMsg);
        }
        if (object.extMap) {
          if ("object" !== typeof object.extMap) throw TypeError(".MsgCommand.extMap: object expected");
          message.extMap = {};
          for (var keys = Object.keys(object.extMap), i = 0; i < keys.length; ++i) message.extMap[keys[i]] = String(object.extMap[keys[i]]);
        }
        return message;
      };
      MsgCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.objects || options.defaults) && (object.extMap = {});
        if (options.defaults) {
          object.from = "";
          object.to = "";
          if ($util.Long) {
            var _long = new $util.Long(0, 0, false);
            object.timestamp = options.longs === String ? _long.toString() : options.longs === Number ? _long.toNumber() : _long;
          } else object.timestamp = options.longs === String ? "0" : 0;
        }
        null != message.from && message.hasOwnProperty("from") && (object.from = message.from);
        null != message.to && message.hasOwnProperty("to") && (object.to = message.to);
        null != message.timestamp && message.hasOwnProperty("timestamp") && ("number" === typeof message.timestamp ? object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp : object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp);
        if (null != message.underCover && message.hasOwnProperty("underCover")) {
          object.underCover = $root.UnderCover.toObject(message.underCover, options);
          options.oneofs && (object.msg = "underCover");
        }
        if (null != message.generalMsg && message.hasOwnProperty("generalMsg")) {
          object.generalMsg = $root.GeneralMsg.toObject(message.generalMsg, options);
          options.oneofs && (object.msg = "generalMsg");
        }
        var keys2;
        if (message.extMap && (keys2 = Object.keys(message.extMap)).length) {
          object.extMap = {};
          for (var j = 0; j < keys2.length; ++j) object.extMap[keys2[j]] = message.extMap[keys2[j]];
        }
        return object;
      };
      MsgCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return MsgCommand;
    }();
    $root.UnderCover = function() {
      function UnderCover(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UnderCover.prototype.type = 0;
      UnderCover.prototype.msg = "";
      UnderCover.create = function create(properties) {
        return new UnderCover(properties);
      };
      UnderCover.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).int32(message.type);
        null != message.msg && message.hasOwnProperty("msg") && writer.uint32(18).string(message.msg);
        return writer;
      };
      UnderCover.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UnderCover.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UnderCover();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.msg = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      UnderCover.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UnderCover.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.msg && message.hasOwnProperty("msg") && !$util.isString(message.msg)) return "msg: string expected";
        return null;
      };
      UnderCover.fromObject = function fromObject(object) {
        if (object instanceof $root.UnderCover) return object;
        var message = new $root.UnderCover();
        switch (object.type) {
         case "TEXT":
         case 0:
          message.type = 0;
          break;

         case "PIC":
         case 1:
          message.type = 1;
        }
        null != object.msg && (message.msg = String(object.msg));
        return message;
      };
      UnderCover.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.type = options.enums === String ? "TEXT" : 0;
          object.msg = "";
        }
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.UnderCover.Type[message.type] : message.type);
        null != message.msg && message.hasOwnProperty("msg") && (object.msg = message.msg);
        return object;
      };
      UnderCover.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      UnderCover.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TEXT"] = 0;
        values[valuesById[1] = "PIC"] = 1;
        return values;
      }();
      return UnderCover;
    }();
    $root.GeneralMsg = function() {
      function GeneralMsg(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      GeneralMsg.prototype.type = 0;
      GeneralMsg.prototype.msg = "";
      GeneralMsg.create = function create(properties) {
        return new GeneralMsg(properties);
      };
      GeneralMsg.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).int32(message.type);
        null != message.msg && message.hasOwnProperty("msg") && writer.uint32(18).string(message.msg);
        return writer;
      };
      GeneralMsg.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      GeneralMsg.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.GeneralMsg();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.msg = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      GeneralMsg.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      GeneralMsg.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.msg && message.hasOwnProperty("msg") && !$util.isString(message.msg)) return "msg: string expected";
        return null;
      };
      GeneralMsg.fromObject = function fromObject(object) {
        if (object instanceof $root.GeneralMsg) return object;
        var message = new $root.GeneralMsg();
        switch (object.type) {
         case "TEXT":
         case 0:
          message.type = 0;
          break;

         case "PIC":
         case 1:
          message.type = 1;
        }
        null != object.msg && (message.msg = String(object.msg));
        return message;
      };
      GeneralMsg.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.type = options.enums === String ? "TEXT" : 0;
          object.msg = "";
        }
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.GeneralMsg.Type[message.type] : message.type);
        null != message.msg && message.hasOwnProperty("msg") && (object.msg = message.msg);
        return object;
      };
      GeneralMsg.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      GeneralMsg.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TEXT"] = 0;
        values[valuesById[1] = "PIC"] = 1;
        return values;
      }();
      return GeneralMsg;
    }();
    $root.RespCommand = function() {
      function RespCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RespCommand.prototype.type = 0;
      RespCommand.prototype.status = 0;
      RespCommand.prototype.errorMsg = "";
      RespCommand.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      RespCommand.create = function create(properties) {
        return new RespCommand(properties);
      };
      RespCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).int32(message.type);
        null != message.status && message.hasOwnProperty("status") && writer.uint32(16).int32(message.status);
        null != message.errorMsg && message.hasOwnProperty("errorMsg") && writer.uint32(26).string(message.errorMsg);
        null != message.timestamp && message.hasOwnProperty("timestamp") && writer.uint32(32).int64(message.timestamp);
        return writer;
      };
      RespCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RespCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RespCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.status = reader.int32();
            break;

           case 3:
            message.errorMsg = reader.string();
            break;

           case 4:
            message.timestamp = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RespCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RespCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
         case 2:
        }
        if (null != message.status && message.hasOwnProperty("status")) switch (message.status) {
         default:
          return "status: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.errorMsg && message.hasOwnProperty("errorMsg") && !$util.isString(message.errorMsg)) return "errorMsg: string expected";
        if (null != message.timestamp && message.hasOwnProperty("timestamp") && !$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high))) return "timestamp: integer|Long expected";
        return null;
      };
      RespCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.RespCommand) return object;
        var message = new $root.RespCommand();
        switch (object.type) {
         case "SAUTH":
         case 0:
          message.type = 0;
          break;

         case "MSG":
         case 1:
          message.type = 1;
          break;

         case "GENERAL":
         case 2:
          message.type = 2;
        }
        switch (object.status) {
         case "SUCCESS":
         case 0:
          message.status = 0;
          break;

         case "ERROR":
         case 1:
          message.status = 1;
        }
        null != object.errorMsg && (message.errorMsg = String(object.errorMsg));
        null != object.timestamp && ($util.Long ? (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false : "string" === typeof object.timestamp ? message.timestamp = parseInt(object.timestamp, 10) : "number" === typeof object.timestamp ? message.timestamp = object.timestamp : "object" === typeof object.timestamp && (message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber()));
        return message;
      };
      RespCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.type = options.enums === String ? "SAUTH" : 0;
          object.status = options.enums === String ? "SUCCESS" : 0;
          object.errorMsg = "";
          if ($util.Long) {
            var _long2 = new $util.Long(0, 0, false);
            object.timestamp = options.longs === String ? _long2.toString() : options.longs === Number ? _long2.toNumber() : _long2;
          } else object.timestamp = options.longs === String ? "0" : 0;
        }
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.RespCommand.Type[message.type] : message.type);
        null != message.status && message.hasOwnProperty("status") && (object.status = options.enums === String ? $root.RespCommand.Status[message.status] : message.status);
        null != message.errorMsg && message.hasOwnProperty("errorMsg") && (object.errorMsg = message.errorMsg);
        null != message.timestamp && message.hasOwnProperty("timestamp") && ("number" === typeof message.timestamp ? object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp : object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp);
        return object;
      };
      RespCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      RespCommand.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SAUTH"] = 0;
        values[valuesById[1] = "MSG"] = 1;
        values[valuesById[2] = "GENERAL"] = 2;
        return values;
      }();
      RespCommand.Status = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SUCCESS"] = 0;
        values[valuesById[1] = "ERROR"] = 1;
        return values;
      }();
      return RespCommand;
    }();
    $root.NotifyCommand = function() {
      function NotifyCommand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      NotifyCommand.prototype.content = "";
      NotifyCommand.prototype.type = 0;
      NotifyCommand.prototype.from = "";
      NotifyCommand.prototype.to = "";
      NotifyCommand.create = function create(properties) {
        return new NotifyCommand(properties);
      };
      NotifyCommand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.content && message.hasOwnProperty("content") && writer.uint32(10).string(message.content);
        null != message.type && message.hasOwnProperty("type") && writer.uint32(16).int32(message.type);
        null != message.from && message.hasOwnProperty("from") && writer.uint32(26).string(message.from);
        null != message.to && message.hasOwnProperty("to") && writer.uint32(34).string(message.to);
        return writer;
      };
      NotifyCommand.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      NotifyCommand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.NotifyCommand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.content = reader.string();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.from = reader.string();
            break;

           case 4:
            message.to = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      NotifyCommand.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      NotifyCommand.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.content && message.hasOwnProperty("content") && !$util.isString(message.content)) return "content: string expected";
        if (null != message.type && message.hasOwnProperty("type")) switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.from && message.hasOwnProperty("from") && !$util.isString(message.from)) return "from: string expected";
        if (null != message.to && message.hasOwnProperty("to") && !$util.isString(message.to)) return "to: string expected";
        return null;
      };
      NotifyCommand.fromObject = function fromObject(object) {
        if (object instanceof $root.NotifyCommand) return object;
        var message = new $root.NotifyCommand();
        null != object.content && (message.content = String(object.content));
        switch (object.type) {
         case "NORMAL":
         case 0:
          message.type = 0;
          break;

         case "BLOCK":
         case 1:
          message.type = 1;
        }
        null != object.from && (message.from = String(object.from));
        null != object.to && (message.to = String(object.to));
        return message;
      };
      NotifyCommand.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.content = "";
          object.type = options.enums === String ? "NORMAL" : 0;
          object.from = "";
          object.to = "";
        }
        null != message.content && message.hasOwnProperty("content") && (object.content = message.content);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.NotifyCommand.Type[message.type] : message.type);
        null != message.from && message.hasOwnProperty("from") && (object.from = message.from);
        null != message.to && message.hasOwnProperty("to") && (object.to = message.to);
        return object;
      };
      NotifyCommand.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      NotifyCommand.Type = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NORMAL"] = 0;
        values[valuesById[1] = "BLOCK"] = 1;
        return values;
      }();
      return NotifyCommand;
    }();
    module.exports = $root;
    cc._RF.pop();
  }, {} ],
  en: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cffe9Khgl5B24wxYtPZG7/s", "en");
    window.i18nConfig || (window.i18nConfig = {});
    window.i18nConfig.languages || (window.i18nConfig.languages = {});
    window.i18nConfig.languages.en = {
      mainUI: {
        load_text_content: "loading...",
        confirm_text: "confirm",
        cancel_text: "cancel"
      }
    };
    cc._RF.pop();
  }, {} ],
  module: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eeeb82omAdML7q2yAX73Aoj", "module");
    "use strict";
    var $protobuf = protobuf;
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    $root.REQ_BizRedPoint = function() {
      function REQ_BizRedPoint(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_BizRedPoint.create = function create(properties) {
        return new REQ_BizRedPoint(properties);
      };
      REQ_BizRedPoint.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      REQ_BizRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_BizRedPoint.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_BizRedPoint();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      REQ_BizRedPoint.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_BizRedPoint.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      REQ_BizRedPoint.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_BizRedPoint) return object;
        return new $root.REQ_BizRedPoint();
      };
      REQ_BizRedPoint.toObject = function toObject() {
        return {};
      };
      REQ_BizRedPoint.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_BizRedPoint;
    }();
    $root.RESP_BizRedPoint = function() {
      function RESP_BizRedPoint(properties) {
        this.bizRedPointData = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_BizRedPoint.prototype.bizRedPointData = $util.emptyArray;
      RESP_BizRedPoint.create = function create(properties) {
        return new RESP_BizRedPoint(properties);
      };
      RESP_BizRedPoint.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bizRedPointData && message.bizRedPointData.length) for (var i = 0; i < message.bizRedPointData.length; ++i) $root.BizRedPointData.encode(message.bizRedPointData[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_BizRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_BizRedPoint.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_BizRedPoint();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bizRedPointData && message.bizRedPointData.length || (message.bizRedPointData = []);
            message.bizRedPointData.push($root.BizRedPointData.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_BizRedPoint.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_BizRedPoint.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.bizRedPointData && message.hasOwnProperty("bizRedPointData")) {
          if (!Array.isArray(message.bizRedPointData)) return "bizRedPointData: array expected";
          for (var i = 0; i < message.bizRedPointData.length; ++i) {
            var error = $root.BizRedPointData.verify(message.bizRedPointData[i]);
            if (error) return "bizRedPointData." + error;
          }
        }
        return null;
      };
      RESP_BizRedPoint.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_BizRedPoint) return object;
        var message = new $root.RESP_BizRedPoint();
        if (object.bizRedPointData) {
          if (!Array.isArray(object.bizRedPointData)) throw TypeError(".RESP_BizRedPoint.bizRedPointData: array expected");
          message.bizRedPointData = [];
          for (var i = 0; i < object.bizRedPointData.length; ++i) {
            if ("object" !== typeof object.bizRedPointData[i]) throw TypeError(".RESP_BizRedPoint.bizRedPointData: object expected");
            message.bizRedPointData[i] = $root.BizRedPointData.fromObject(object.bizRedPointData[i]);
          }
        }
        return message;
      };
      RESP_BizRedPoint.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.bizRedPointData = []);
        if (message.bizRedPointData && message.bizRedPointData.length) {
          object.bizRedPointData = [];
          for (var j = 0; j < message.bizRedPointData.length; ++j) object.bizRedPointData[j] = $root.BizRedPointData.toObject(message.bizRedPointData[j], options);
        }
        return object;
      };
      RESP_BizRedPoint.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_BizRedPoint;
    }();
    $root.PUSH_BizRedPointModify = function() {
      function PUSH_BizRedPointModify(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_BizRedPointModify.prototype.bizRedPointData = null;
      PUSH_BizRedPointModify.create = function create(properties) {
        return new PUSH_BizRedPointModify(properties);
      };
      PUSH_BizRedPointModify.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.BizRedPointData.encode(message.bizRedPointData, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      PUSH_BizRedPointModify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_BizRedPointModify.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_BizRedPointModify();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bizRedPointData = $root.BizRedPointData.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bizRedPointData")) throw $util.ProtocolError("missing required 'bizRedPointData'", {
          instance: message
        });
        return message;
      };
      PUSH_BizRedPointModify.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_BizRedPointModify.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var error = $root.BizRedPointData.verify(message.bizRedPointData);
        if (error) return "bizRedPointData." + error;
        return null;
      };
      PUSH_BizRedPointModify.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_BizRedPointModify) return object;
        var message = new $root.PUSH_BizRedPointModify();
        if (null != object.bizRedPointData) {
          if ("object" !== typeof object.bizRedPointData) throw TypeError(".PUSH_BizRedPointModify.bizRedPointData: object expected");
          message.bizRedPointData = $root.BizRedPointData.fromObject(object.bizRedPointData);
        }
        return message;
      };
      PUSH_BizRedPointModify.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.bizRedPointData = null);
        null != message.bizRedPointData && message.hasOwnProperty("bizRedPointData") && (object.bizRedPointData = $root.BizRedPointData.toObject(message.bizRedPointData, options));
        return object;
      };
      PUSH_BizRedPointModify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_BizRedPointModify;
    }();
    $root.REQ_RemoveBizRedPoint = function() {
      function REQ_RemoveBizRedPoint(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_RemoveBizRedPoint.prototype.bizType = 0;
      REQ_RemoveBizRedPoint.create = function create(properties) {
        return new REQ_RemoveBizRedPoint(properties);
      };
      REQ_RemoveBizRedPoint.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bizType);
        return writer;
      };
      REQ_RemoveBizRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_RemoveBizRedPoint.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_RemoveBizRedPoint();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bizType = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bizType")) throw $util.ProtocolError("missing required 'bizType'", {
          instance: message
        });
        return message;
      };
      REQ_RemoveBizRedPoint.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_RemoveBizRedPoint.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bizType)) return "bizType: integer expected";
        return null;
      };
      REQ_RemoveBizRedPoint.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_RemoveBizRedPoint) return object;
        var message = new $root.REQ_RemoveBizRedPoint();
        null != object.bizType && (message.bizType = 0 | object.bizType);
        return message;
      };
      REQ_RemoveBizRedPoint.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.bizType = 0);
        null != message.bizType && message.hasOwnProperty("bizType") && (object.bizType = message.bizType);
        return object;
      };
      REQ_RemoveBizRedPoint.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_RemoveBizRedPoint;
    }();
    $root.RESP_RemoveBizRedPoint = function() {
      function RESP_RemoveBizRedPoint(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_RemoveBizRedPoint.create = function create(properties) {
        return new RESP_RemoveBizRedPoint(properties);
      };
      RESP_RemoveBizRedPoint.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      RESP_RemoveBizRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_RemoveBizRedPoint.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_RemoveBizRedPoint();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      RESP_RemoveBizRedPoint.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_RemoveBizRedPoint.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      RESP_RemoveBizRedPoint.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_RemoveBizRedPoint) return object;
        return new $root.RESP_RemoveBizRedPoint();
      };
      RESP_RemoveBizRedPoint.toObject = function toObject() {
        return {};
      };
      RESP_RemoveBizRedPoint.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_RemoveBizRedPoint;
    }();
    $root.BizRedPointData = function() {
      function BizRedPointData(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      BizRedPointData.prototype.bizType = 0;
      BizRedPointData.prototype.lightEnable = false;
      BizRedPointData.prototype.showContent = "";
      BizRedPointData.create = function create(properties) {
        return new BizRedPointData(properties);
      };
      BizRedPointData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bizType);
        writer.uint32(16).bool(message.lightEnable);
        null != message.showContent && message.hasOwnProperty("showContent") && writer.uint32(26).string(message.showContent);
        return writer;
      };
      BizRedPointData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      BizRedPointData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.BizRedPointData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bizType = reader.int32();
            break;

           case 2:
            message.lightEnable = reader.bool();
            break;

           case 3:
            message.showContent = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bizType")) throw $util.ProtocolError("missing required 'bizType'", {
          instance: message
        });
        if (!message.hasOwnProperty("lightEnable")) throw $util.ProtocolError("missing required 'lightEnable'", {
          instance: message
        });
        return message;
      };
      BizRedPointData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      BizRedPointData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bizType)) return "bizType: integer expected";
        if ("boolean" !== typeof message.lightEnable) return "lightEnable: boolean expected";
        if (null != message.showContent && message.hasOwnProperty("showContent") && !$util.isString(message.showContent)) return "showContent: string expected";
        return null;
      };
      BizRedPointData.fromObject = function fromObject(object) {
        if (object instanceof $root.BizRedPointData) return object;
        var message = new $root.BizRedPointData();
        null != object.bizType && (message.bizType = 0 | object.bizType);
        null != object.lightEnable && (message.lightEnable = Boolean(object.lightEnable));
        null != object.showContent && (message.showContent = String(object.showContent));
        return message;
      };
      BizRedPointData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.bizType = 0;
          object.lightEnable = false;
          object.showContent = "";
        }
        null != message.bizType && message.hasOwnProperty("bizType") && (object.bizType = message.bizType);
        null != message.lightEnable && message.hasOwnProperty("lightEnable") && (object.lightEnable = message.lightEnable);
        null != message.showContent && message.hasOwnProperty("showContent") && (object.showContent = message.showContent);
        return object;
      };
      BizRedPointData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return BizRedPointData;
    }();
    $root.REQ_PrickBubble = function() {
      function REQ_PrickBubble(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_PrickBubble.prototype.bubbleUniqueId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_PrickBubble.create = function create(properties) {
        return new REQ_PrickBubble(properties);
      };
      REQ_PrickBubble.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.bubbleUniqueId);
        return writer;
      };
      REQ_PrickBubble.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_PrickBubble.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_PrickBubble();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bubbleUniqueId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bubbleUniqueId")) throw $util.ProtocolError("missing required 'bubbleUniqueId'", {
          instance: message
        });
        return message;
      };
      REQ_PrickBubble.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_PrickBubble.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bubbleUniqueId) && !(message.bubbleUniqueId && $util.isInteger(message.bubbleUniqueId.low) && $util.isInteger(message.bubbleUniqueId.high))) return "bubbleUniqueId: integer|Long expected";
        return null;
      };
      REQ_PrickBubble.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_PrickBubble) return object;
        var message = new $root.REQ_PrickBubble();
        null != object.bubbleUniqueId && ($util.Long ? (message.bubbleUniqueId = $util.Long.fromValue(object.bubbleUniqueId)).unsigned = false : "string" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = parseInt(object.bubbleUniqueId, 10) : "number" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = object.bubbleUniqueId : "object" === typeof object.bubbleUniqueId && (message.bubbleUniqueId = new $util.LongBits(object.bubbleUniqueId.low >>> 0, object.bubbleUniqueId.high >>> 0).toNumber()));
        return message;
      };
      REQ_PrickBubble.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) if ($util.Long) {
          var _long = new $util.Long(0, 0, false);
          object.bubbleUniqueId = options.longs === String ? _long.toString() : options.longs === Number ? _long.toNumber() : _long;
        } else object.bubbleUniqueId = options.longs === String ? "0" : 0;
        null != message.bubbleUniqueId && message.hasOwnProperty("bubbleUniqueId") && ("number" === typeof message.bubbleUniqueId ? object.bubbleUniqueId = options.longs === String ? String(message.bubbleUniqueId) : message.bubbleUniqueId : object.bubbleUniqueId = options.longs === String ? $util.Long.prototype.toString.call(message.bubbleUniqueId) : options.longs === Number ? new $util.LongBits(message.bubbleUniqueId.low >>> 0, message.bubbleUniqueId.high >>> 0).toNumber() : message.bubbleUniqueId);
        return object;
      };
      REQ_PrickBubble.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_PrickBubble;
    }();
    $root.RESP_PrickBubble = function() {
      function RESP_PrickBubble(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_PrickBubble.prototype.bubbleUniqueId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      RESP_PrickBubble.prototype.overheadPetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      RESP_PrickBubble.create = function create(properties) {
        return new RESP_PrickBubble(properties);
      };
      RESP_PrickBubble.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.bubbleUniqueId);
        writer.uint32(16).int64(message.overheadPetId);
        return writer;
      };
      RESP_PrickBubble.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_PrickBubble.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_PrickBubble();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bubbleUniqueId = reader.int64();
            break;

           case 2:
            message.overheadPetId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bubbleUniqueId")) throw $util.ProtocolError("missing required 'bubbleUniqueId'", {
          instance: message
        });
        if (!message.hasOwnProperty("overheadPetId")) throw $util.ProtocolError("missing required 'overheadPetId'", {
          instance: message
        });
        return message;
      };
      RESP_PrickBubble.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_PrickBubble.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bubbleUniqueId) && !(message.bubbleUniqueId && $util.isInteger(message.bubbleUniqueId.low) && $util.isInteger(message.bubbleUniqueId.high))) return "bubbleUniqueId: integer|Long expected";
        if (!$util.isInteger(message.overheadPetId) && !(message.overheadPetId && $util.isInteger(message.overheadPetId.low) && $util.isInteger(message.overheadPetId.high))) return "overheadPetId: integer|Long expected";
        return null;
      };
      RESP_PrickBubble.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_PrickBubble) return object;
        var message = new $root.RESP_PrickBubble();
        null != object.bubbleUniqueId && ($util.Long ? (message.bubbleUniqueId = $util.Long.fromValue(object.bubbleUniqueId)).unsigned = false : "string" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = parseInt(object.bubbleUniqueId, 10) : "number" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = object.bubbleUniqueId : "object" === typeof object.bubbleUniqueId && (message.bubbleUniqueId = new $util.LongBits(object.bubbleUniqueId.low >>> 0, object.bubbleUniqueId.high >>> 0).toNumber()));
        null != object.overheadPetId && ($util.Long ? (message.overheadPetId = $util.Long.fromValue(object.overheadPetId)).unsigned = false : "string" === typeof object.overheadPetId ? message.overheadPetId = parseInt(object.overheadPetId, 10) : "number" === typeof object.overheadPetId ? message.overheadPetId = object.overheadPetId : "object" === typeof object.overheadPetId && (message.overheadPetId = new $util.LongBits(object.overheadPetId.low >>> 0, object.overheadPetId.high >>> 0).toNumber()));
        return message;
      };
      RESP_PrickBubble.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long2 = new $util.Long(0, 0, false);
            object.bubbleUniqueId = options.longs === String ? _long2.toString() : options.longs === Number ? _long2.toNumber() : _long2;
          } else object.bubbleUniqueId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long2 = new $util.Long(0, 0, false);
            object.overheadPetId = options.longs === String ? _long2.toString() : options.longs === Number ? _long2.toNumber() : _long2;
          } else object.overheadPetId = options.longs === String ? "0" : 0;
        }
        null != message.bubbleUniqueId && message.hasOwnProperty("bubbleUniqueId") && ("number" === typeof message.bubbleUniqueId ? object.bubbleUniqueId = options.longs === String ? String(message.bubbleUniqueId) : message.bubbleUniqueId : object.bubbleUniqueId = options.longs === String ? $util.Long.prototype.toString.call(message.bubbleUniqueId) : options.longs === Number ? new $util.LongBits(message.bubbleUniqueId.low >>> 0, message.bubbleUniqueId.high >>> 0).toNumber() : message.bubbleUniqueId);
        null != message.overheadPetId && message.hasOwnProperty("overheadPetId") && ("number" === typeof message.overheadPetId ? object.overheadPetId = options.longs === String ? String(message.overheadPetId) : message.overheadPetId : object.overheadPetId = options.longs === String ? $util.Long.prototype.toString.call(message.overheadPetId) : options.longs === Number ? new $util.LongBits(message.overheadPetId.low >>> 0, message.overheadPetId.high >>> 0).toNumber() : message.overheadPetId);
        return object;
      };
      RESP_PrickBubble.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_PrickBubble;
    }();
    $root.PUSH_UpdateBubble = function() {
      function PUSH_UpdateBubble(properties) {
        this.userBubbleList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_UpdateBubble.prototype.userBubbleList = $util.emptyArray;
      PUSH_UpdateBubble.create = function create(properties) {
        return new PUSH_UpdateBubble(properties);
      };
      PUSH_UpdateBubble.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.userBubbleList && message.userBubbleList.length) for (var i = 0; i < message.userBubbleList.length; ++i) $root.UserBubble.encode(message.userBubbleList[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      PUSH_UpdateBubble.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_UpdateBubble.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_UpdateBubble();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userBubbleList && message.userBubbleList.length || (message.userBubbleList = []);
            message.userBubbleList.push($root.UserBubble.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      PUSH_UpdateBubble.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_UpdateBubble.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userBubbleList && message.hasOwnProperty("userBubbleList")) {
          if (!Array.isArray(message.userBubbleList)) return "userBubbleList: array expected";
          for (var i = 0; i < message.userBubbleList.length; ++i) {
            var error = $root.UserBubble.verify(message.userBubbleList[i]);
            if (error) return "userBubbleList." + error;
          }
        }
        return null;
      };
      PUSH_UpdateBubble.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_UpdateBubble) return object;
        var message = new $root.PUSH_UpdateBubble();
        if (object.userBubbleList) {
          if (!Array.isArray(object.userBubbleList)) throw TypeError(".PUSH_UpdateBubble.userBubbleList: array expected");
          message.userBubbleList = [];
          for (var i = 0; i < object.userBubbleList.length; ++i) {
            if ("object" !== typeof object.userBubbleList[i]) throw TypeError(".PUSH_UpdateBubble.userBubbleList: object expected");
            message.userBubbleList[i] = $root.UserBubble.fromObject(object.userBubbleList[i]);
          }
        }
        return message;
      };
      PUSH_UpdateBubble.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.userBubbleList = []);
        if (message.userBubbleList && message.userBubbleList.length) {
          object.userBubbleList = [];
          for (var j = 0; j < message.userBubbleList.length; ++j) object.userBubbleList[j] = $root.UserBubble.toObject(message.userBubbleList[j], options);
        }
        return object;
      };
      PUSH_UpdateBubble.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_UpdateBubble;
    }();
    $root.UserBubble = function() {
      function UserBubble(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserBubble.prototype.bubbleUniqueId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.overheadPetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.pastTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.innerPropType = 0;
      UserBubble.prototype.innerPropId = 0;
      UserBubble.prototype.innerPropNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.helpFeedEachOther = false;
      UserBubble.create = function create(properties) {
        return new UserBubble(properties);
      };
      UserBubble.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.bubbleUniqueId);
        writer.uint32(24).int64(message.overheadPetId);
        writer.uint32(32).int64(message.pastTime);
        writer.uint32(40).int32(message.innerPropType);
        writer.uint32(48).int32(message.innerPropId);
        writer.uint32(56).int64(message.innerPropNum);
        writer.uint32(64).bool(message.helpFeedEachOther);
        return writer;
      };
      UserBubble.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserBubble.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserBubble();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bubbleUniqueId = reader.int64();
            break;

           case 3:
            message.overheadPetId = reader.int64();
            break;

           case 4:
            message.pastTime = reader.int64();
            break;

           case 5:
            message.innerPropType = reader.int32();
            break;

           case 6:
            message.innerPropId = reader.int32();
            break;

           case 7:
            message.innerPropNum = reader.int64();
            break;

           case 8:
            message.helpFeedEachOther = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bubbleUniqueId")) throw $util.ProtocolError("missing required 'bubbleUniqueId'", {
          instance: message
        });
        if (!message.hasOwnProperty("overheadPetId")) throw $util.ProtocolError("missing required 'overheadPetId'", {
          instance: message
        });
        if (!message.hasOwnProperty("pastTime")) throw $util.ProtocolError("missing required 'pastTime'", {
          instance: message
        });
        if (!message.hasOwnProperty("innerPropType")) throw $util.ProtocolError("missing required 'innerPropType'", {
          instance: message
        });
        if (!message.hasOwnProperty("innerPropId")) throw $util.ProtocolError("missing required 'innerPropId'", {
          instance: message
        });
        if (!message.hasOwnProperty("innerPropNum")) throw $util.ProtocolError("missing required 'innerPropNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("helpFeedEachOther")) throw $util.ProtocolError("missing required 'helpFeedEachOther'", {
          instance: message
        });
        return message;
      };
      UserBubble.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserBubble.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bubbleUniqueId) && !(message.bubbleUniqueId && $util.isInteger(message.bubbleUniqueId.low) && $util.isInteger(message.bubbleUniqueId.high))) return "bubbleUniqueId: integer|Long expected";
        if (!$util.isInteger(message.overheadPetId) && !(message.overheadPetId && $util.isInteger(message.overheadPetId.low) && $util.isInteger(message.overheadPetId.high))) return "overheadPetId: integer|Long expected";
        if (!$util.isInteger(message.pastTime) && !(message.pastTime && $util.isInteger(message.pastTime.low) && $util.isInteger(message.pastTime.high))) return "pastTime: integer|Long expected";
        if (!$util.isInteger(message.innerPropType)) return "innerPropType: integer expected";
        if (!$util.isInteger(message.innerPropId)) return "innerPropId: integer expected";
        if (!$util.isInteger(message.innerPropNum) && !(message.innerPropNum && $util.isInteger(message.innerPropNum.low) && $util.isInteger(message.innerPropNum.high))) return "innerPropNum: integer|Long expected";
        if ("boolean" !== typeof message.helpFeedEachOther) return "helpFeedEachOther: boolean expected";
        return null;
      };
      UserBubble.fromObject = function fromObject(object) {
        if (object instanceof $root.UserBubble) return object;
        var message = new $root.UserBubble();
        null != object.bubbleUniqueId && ($util.Long ? (message.bubbleUniqueId = $util.Long.fromValue(object.bubbleUniqueId)).unsigned = false : "string" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = parseInt(object.bubbleUniqueId, 10) : "number" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = object.bubbleUniqueId : "object" === typeof object.bubbleUniqueId && (message.bubbleUniqueId = new $util.LongBits(object.bubbleUniqueId.low >>> 0, object.bubbleUniqueId.high >>> 0).toNumber()));
        null != object.overheadPetId && ($util.Long ? (message.overheadPetId = $util.Long.fromValue(object.overheadPetId)).unsigned = false : "string" === typeof object.overheadPetId ? message.overheadPetId = parseInt(object.overheadPetId, 10) : "number" === typeof object.overheadPetId ? message.overheadPetId = object.overheadPetId : "object" === typeof object.overheadPetId && (message.overheadPetId = new $util.LongBits(object.overheadPetId.low >>> 0, object.overheadPetId.high >>> 0).toNumber()));
        null != object.pastTime && ($util.Long ? (message.pastTime = $util.Long.fromValue(object.pastTime)).unsigned = false : "string" === typeof object.pastTime ? message.pastTime = parseInt(object.pastTime, 10) : "number" === typeof object.pastTime ? message.pastTime = object.pastTime : "object" === typeof object.pastTime && (message.pastTime = new $util.LongBits(object.pastTime.low >>> 0, object.pastTime.high >>> 0).toNumber()));
        null != object.innerPropType && (message.innerPropType = 0 | object.innerPropType);
        null != object.innerPropId && (message.innerPropId = 0 | object.innerPropId);
        null != object.innerPropNum && ($util.Long ? (message.innerPropNum = $util.Long.fromValue(object.innerPropNum)).unsigned = false : "string" === typeof object.innerPropNum ? message.innerPropNum = parseInt(object.innerPropNum, 10) : "number" === typeof object.innerPropNum ? message.innerPropNum = object.innerPropNum : "object" === typeof object.innerPropNum && (message.innerPropNum = new $util.LongBits(object.innerPropNum.low >>> 0, object.innerPropNum.high >>> 0).toNumber()));
        null != object.helpFeedEachOther && (message.helpFeedEachOther = Boolean(object.helpFeedEachOther));
        return message;
      };
      UserBubble.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long3 = new $util.Long(0, 0, false);
            object.bubbleUniqueId = options.longs === String ? _long3.toString() : options.longs === Number ? _long3.toNumber() : _long3;
          } else object.bubbleUniqueId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long3 = new $util.Long(0, 0, false);
            object.overheadPetId = options.longs === String ? _long3.toString() : options.longs === Number ? _long3.toNumber() : _long3;
          } else object.overheadPetId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long3 = new $util.Long(0, 0, false);
            object.pastTime = options.longs === String ? _long3.toString() : options.longs === Number ? _long3.toNumber() : _long3;
          } else object.pastTime = options.longs === String ? "0" : 0;
          object.innerPropType = 0;
          object.innerPropId = 0;
          if ($util.Long) {
            var _long3 = new $util.Long(0, 0, false);
            object.innerPropNum = options.longs === String ? _long3.toString() : options.longs === Number ? _long3.toNumber() : _long3;
          } else object.innerPropNum = options.longs === String ? "0" : 0;
          object.helpFeedEachOther = false;
        }
        null != message.bubbleUniqueId && message.hasOwnProperty("bubbleUniqueId") && ("number" === typeof message.bubbleUniqueId ? object.bubbleUniqueId = options.longs === String ? String(message.bubbleUniqueId) : message.bubbleUniqueId : object.bubbleUniqueId = options.longs === String ? $util.Long.prototype.toString.call(message.bubbleUniqueId) : options.longs === Number ? new $util.LongBits(message.bubbleUniqueId.low >>> 0, message.bubbleUniqueId.high >>> 0).toNumber() : message.bubbleUniqueId);
        null != message.overheadPetId && message.hasOwnProperty("overheadPetId") && ("number" === typeof message.overheadPetId ? object.overheadPetId = options.longs === String ? String(message.overheadPetId) : message.overheadPetId : object.overheadPetId = options.longs === String ? $util.Long.prototype.toString.call(message.overheadPetId) : options.longs === Number ? new $util.LongBits(message.overheadPetId.low >>> 0, message.overheadPetId.high >>> 0).toNumber() : message.overheadPetId);
        null != message.pastTime && message.hasOwnProperty("pastTime") && ("number" === typeof message.pastTime ? object.pastTime = options.longs === String ? String(message.pastTime) : message.pastTime : object.pastTime = options.longs === String ? $util.Long.prototype.toString.call(message.pastTime) : options.longs === Number ? new $util.LongBits(message.pastTime.low >>> 0, message.pastTime.high >>> 0).toNumber() : message.pastTime);
        null != message.innerPropType && message.hasOwnProperty("innerPropType") && (object.innerPropType = message.innerPropType);
        null != message.innerPropId && message.hasOwnProperty("innerPropId") && (object.innerPropId = message.innerPropId);
        null != message.innerPropNum && message.hasOwnProperty("innerPropNum") && ("number" === typeof message.innerPropNum ? object.innerPropNum = options.longs === String ? String(message.innerPropNum) : message.innerPropNum : object.innerPropNum = options.longs === String ? $util.Long.prototype.toString.call(message.innerPropNum) : options.longs === Number ? new $util.LongBits(message.innerPropNum.low >>> 0, message.innerPropNum.high >>> 0).toNumber() : message.innerPropNum);
        null != message.helpFeedEachOther && message.hasOwnProperty("helpFeedEachOther") && (object.helpFeedEachOther = message.helpFeedEachOther);
        return object;
      };
      UserBubble.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserBubble;
    }();
    $root.REQ_CollectStarCoin = function() {
      function REQ_CollectStarCoin(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_CollectStarCoin.prototype.bubblePropId = 0;
      REQ_CollectStarCoin.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_CollectStarCoin.create = function create(properties) {
        return new REQ_CollectStarCoin(properties);
      };
      REQ_CollectStarCoin.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bubblePropId);
        writer.uint32(16).int64(message.petId);
        return writer;
      };
      REQ_CollectStarCoin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_CollectStarCoin.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_CollectStarCoin();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bubblePropId = reader.int32();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bubblePropId")) throw $util.ProtocolError("missing required 'bubblePropId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      REQ_CollectStarCoin.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_CollectStarCoin.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bubblePropId)) return "bubblePropId: integer expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      REQ_CollectStarCoin.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_CollectStarCoin) return object;
        var message = new $root.REQ_CollectStarCoin();
        null != object.bubblePropId && (message.bubblePropId = 0 | object.bubblePropId);
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      REQ_CollectStarCoin.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.bubblePropId = 0;
          if ($util.Long) {
            var _long4 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long4.toString() : options.longs === Number ? _long4.toNumber() : _long4;
          } else object.petId = options.longs === String ? "0" : 0;
        }
        null != message.bubblePropId && message.hasOwnProperty("bubblePropId") && (object.bubblePropId = message.bubblePropId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      REQ_CollectStarCoin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_CollectStarCoin;
    }();
    $root.RESP_CollectStarCoin = function() {
      function RESP_CollectStarCoin(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_CollectStarCoin.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      RESP_CollectStarCoin.create = function create(properties) {
        return new RESP_CollectStarCoin(properties);
      };
      RESP_CollectStarCoin.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.petId);
        return writer;
      };
      RESP_CollectStarCoin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_CollectStarCoin.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_CollectStarCoin();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      RESP_CollectStarCoin.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_CollectStarCoin.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      RESP_CollectStarCoin.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_CollectStarCoin) return object;
        var message = new $root.RESP_CollectStarCoin();
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      RESP_CollectStarCoin.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) if ($util.Long) {
          var _long5 = new $util.Long(0, 0, false);
          object.petId = options.longs === String ? _long5.toString() : options.longs === Number ? _long5.toNumber() : _long5;
        } else object.petId = options.longs === String ? "0" : 0;
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      RESP_CollectStarCoin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_CollectStarCoin;
    }();
    $root.REQ_CreatePet = function() {
      function REQ_CreatePet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_CreatePet.prototype.petType = 0;
      REQ_CreatePet.prototype.name = "";
      REQ_CreatePet.prototype.useDefaultName = false;
      REQ_CreatePet.create = function create(properties) {
        return new REQ_CreatePet(properties);
      };
      REQ_CreatePet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.petType);
        writer.uint32(18).string(message.name);
        null != message.useDefaultName && message.hasOwnProperty("useDefaultName") && writer.uint32(24).bool(message.useDefaultName);
        return writer;
      };
      REQ_CreatePet.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_CreatePet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_CreatePet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petType = reader.int32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.useDefaultName = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petType")) throw $util.ProtocolError("missing required 'petType'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        return message;
      };
      REQ_CreatePet.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_CreatePet.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petType)) return "petType: integer expected";
        if (!$util.isString(message.name)) return "name: string expected";
        if (null != message.useDefaultName && message.hasOwnProperty("useDefaultName") && "boolean" !== typeof message.useDefaultName) return "useDefaultName: boolean expected";
        return null;
      };
      REQ_CreatePet.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_CreatePet) return object;
        var message = new $root.REQ_CreatePet();
        null != object.petType && (message.petType = 0 | object.petType);
        null != object.name && (message.name = String(object.name));
        null != object.useDefaultName && (message.useDefaultName = Boolean(object.useDefaultName));
        return message;
      };
      REQ_CreatePet.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.petType = 0;
          object.name = "";
          object.useDefaultName = false;
        }
        null != message.petType && message.hasOwnProperty("petType") && (object.petType = message.petType);
        null != message.name && message.hasOwnProperty("name") && (object.name = message.name);
        null != message.useDefaultName && message.hasOwnProperty("useDefaultName") && (object.useDefaultName = message.useDefaultName);
        return object;
      };
      REQ_CreatePet.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_CreatePet;
    }();
    $root.RESP_CreatePet = function() {
      function RESP_CreatePet(properties) {
        this.petData = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_CreatePet.prototype.petData = $util.emptyArray;
      RESP_CreatePet.create = function create(properties) {
        return new RESP_CreatePet(properties);
      };
      RESP_CreatePet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.petData && message.petData.length) for (var i = 0; i < message.petData.length; ++i) $root.PetData.encode(message.petData[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_CreatePet.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_CreatePet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_CreatePet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petData && message.petData.length || (message.petData = []);
            message.petData.push($root.PetData.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_CreatePet.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_CreatePet.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.petData && message.hasOwnProperty("petData")) {
          if (!Array.isArray(message.petData)) return "petData: array expected";
          for (var i = 0; i < message.petData.length; ++i) {
            var error = $root.PetData.verify(message.petData[i]);
            if (error) return "petData." + error;
          }
        }
        return null;
      };
      RESP_CreatePet.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_CreatePet) return object;
        var message = new $root.RESP_CreatePet();
        if (object.petData) {
          if (!Array.isArray(object.petData)) throw TypeError(".RESP_CreatePet.petData: array expected");
          message.petData = [];
          for (var i = 0; i < object.petData.length; ++i) {
            if ("object" !== typeof object.petData[i]) throw TypeError(".RESP_CreatePet.petData: object expected");
            message.petData[i] = $root.PetData.fromObject(object.petData[i]);
          }
        }
        return message;
      };
      RESP_CreatePet.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.petData = []);
        if (message.petData && message.petData.length) {
          object.petData = [];
          for (var j = 0; j < message.petData.length; ++j) object.petData[j] = $root.PetData.toObject(message.petData[j], options);
        }
        return object;
      };
      RESP_CreatePet.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_CreatePet;
    }();
    $root.PetData = function() {
      function PetData(properties) {
        this.dress = [];
        this.skillIdList = [];
        this.furniture = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PetData.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.petType = 0;
      PetData.prototype.exp = 0;
      PetData.prototype.name = "";
      PetData.prototype.gender = false;
      PetData.prototype.fruitTree = null;
      PetData.prototype.locatedUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.locatedPetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.inHome = false;
      PetData.prototype.selfDigestion = null;
      PetData.prototype.otherDigestion = null;
      PetData.prototype.ownerName = "";
      PetData.prototype.dress = $util.emptyArray;
      PetData.prototype.skillIdList = $util.emptyArray;
      PetData.prototype.furniture = $util.emptyArray;
      PetData.prototype.userProfile = null;
      PetData.create = function create(properties) {
        return new PetData(properties);
      };
      PetData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        writer.uint32(16).int64(message.petId);
        writer.uint32(24).int32(message.petType);
        writer.uint32(32).int32(message.exp);
        writer.uint32(42).string(message.name);
        writer.uint32(48).bool(message.gender);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && $root.FruitTree.encode(message.fruitTree, writer.uint32(58).fork()).ldelim();
        null != message.locatedUserId && message.hasOwnProperty("locatedUserId") && writer.uint32(64).int64(message.locatedUserId);
        null != message.locatedPetId && message.hasOwnProperty("locatedPetId") && writer.uint32(72).int64(message.locatedPetId);
        writer.uint32(80).bool(message.inHome);
        $root.Digestion.encode(message.selfDigestion, writer.uint32(90).fork()).ldelim();
        $root.Digestion.encode(message.otherDigestion, writer.uint32(98).fork()).ldelim();
        writer.uint32(106).string(message.ownerName);
        if (null != message.dress && message.dress.length) for (var i = 0; i < message.dress.length; ++i) $root.Dress.encode(message.dress[i], writer.uint32(114).fork()).ldelim();
        if (null != message.skillIdList && message.skillIdList.length) for (var i = 0; i < message.skillIdList.length; ++i) writer.uint32(120).int32(message.skillIdList[i]);
        if (null != message.furniture && message.furniture.length) for (var i = 0; i < message.furniture.length; ++i) $root.Furniture.encode(message.furniture[i], writer.uint32(130).fork()).ldelim();
        null != message.userProfile && message.hasOwnProperty("userProfile") && $root.UserProfile.encode(message.userProfile, writer.uint32(138).fork()).ldelim();
        return writer;
      };
      PetData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PetData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PetData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           case 3:
            message.petType = reader.int32();
            break;

           case 4:
            message.exp = reader.int32();
            break;

           case 5:
            message.name = reader.string();
            break;

           case 6:
            message.gender = reader.bool();
            break;

           case 7:
            message.fruitTree = $root.FruitTree.decode(reader, reader.uint32());
            break;

           case 8:
            message.locatedUserId = reader.int64();
            break;

           case 9:
            message.locatedPetId = reader.int64();
            break;

           case 10:
            message.inHome = reader.bool();
            break;

           case 11:
            message.selfDigestion = $root.Digestion.decode(reader, reader.uint32());
            break;

           case 12:
            message.otherDigestion = $root.Digestion.decode(reader, reader.uint32());
            break;

           case 13:
            message.ownerName = reader.string();
            break;

           case 14:
            message.dress && message.dress.length || (message.dress = []);
            message.dress.push($root.Dress.decode(reader, reader.uint32()));
            break;

           case 15:
            message.skillIdList && message.skillIdList.length || (message.skillIdList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.skillIdList.push(reader.int32());
            } else message.skillIdList.push(reader.int32());
            break;

           case 16:
            message.furniture && message.furniture.length || (message.furniture = []);
            message.furniture.push($root.Furniture.decode(reader, reader.uint32()));
            break;

           case 17:
            message.userProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petType")) throw $util.ProtocolError("missing required 'petType'", {
          instance: message
        });
        if (!message.hasOwnProperty("exp")) throw $util.ProtocolError("missing required 'exp'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("gender")) throw $util.ProtocolError("missing required 'gender'", {
          instance: message
        });
        if (!message.hasOwnProperty("inHome")) throw $util.ProtocolError("missing required 'inHome'", {
          instance: message
        });
        if (!message.hasOwnProperty("selfDigestion")) throw $util.ProtocolError("missing required 'selfDigestion'", {
          instance: message
        });
        if (!message.hasOwnProperty("otherDigestion")) throw $util.ProtocolError("missing required 'otherDigestion'", {
          instance: message
        });
        if (!message.hasOwnProperty("ownerName")) throw $util.ProtocolError("missing required 'ownerName'", {
          instance: message
        });
        return message;
      };
      PetData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PetData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isInteger(message.petType)) return "petType: integer expected";
        if (!$util.isInteger(message.exp)) return "exp: integer expected";
        if (!$util.isString(message.name)) return "name: string expected";
        if ("boolean" !== typeof message.gender) return "gender: boolean expected";
        if (null != message.fruitTree && message.hasOwnProperty("fruitTree")) {
          var error = $root.FruitTree.verify(message.fruitTree);
          if (error) return "fruitTree." + error;
        }
        if (null != message.locatedUserId && message.hasOwnProperty("locatedUserId") && !$util.isInteger(message.locatedUserId) && !(message.locatedUserId && $util.isInteger(message.locatedUserId.low) && $util.isInteger(message.locatedUserId.high))) return "locatedUserId: integer|Long expected";
        if (null != message.locatedPetId && message.hasOwnProperty("locatedPetId") && !$util.isInteger(message.locatedPetId) && !(message.locatedPetId && $util.isInteger(message.locatedPetId.low) && $util.isInteger(message.locatedPetId.high))) return "locatedPetId: integer|Long expected";
        if ("boolean" !== typeof message.inHome) return "inHome: boolean expected";
        var error = $root.Digestion.verify(message.selfDigestion);
        if (error) return "selfDigestion." + error;
        var error = $root.Digestion.verify(message.otherDigestion);
        if (error) return "otherDigestion." + error;
        if (!$util.isString(message.ownerName)) return "ownerName: string expected";
        if (null != message.dress && message.hasOwnProperty("dress")) {
          if (!Array.isArray(message.dress)) return "dress: array expected";
          for (var i = 0; i < message.dress.length; ++i) {
            var error = $root.Dress.verify(message.dress[i]);
            if (error) return "dress." + error;
          }
        }
        if (null != message.skillIdList && message.hasOwnProperty("skillIdList")) {
          if (!Array.isArray(message.skillIdList)) return "skillIdList: array expected";
          for (var i = 0; i < message.skillIdList.length; ++i) if (!$util.isInteger(message.skillIdList[i])) return "skillIdList: integer[] expected";
        }
        if (null != message.furniture && message.hasOwnProperty("furniture")) {
          if (!Array.isArray(message.furniture)) return "furniture: array expected";
          for (var i = 0; i < message.furniture.length; ++i) {
            var error = $root.Furniture.verify(message.furniture[i]);
            if (error) return "furniture." + error;
          }
        }
        if (null != message.userProfile && message.hasOwnProperty("userProfile")) {
          var error = $root.UserProfile.verify(message.userProfile);
          if (error) return "userProfile." + error;
        }
        return null;
      };
      PetData.fromObject = function fromObject(object) {
        if (object instanceof $root.PetData) return object;
        var message = new $root.PetData();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.petType && (message.petType = 0 | object.petType);
        null != object.exp && (message.exp = 0 | object.exp);
        null != object.name && (message.name = String(object.name));
        null != object.gender && (message.gender = Boolean(object.gender));
        if (null != object.fruitTree) {
          if ("object" !== typeof object.fruitTree) throw TypeError(".PetData.fruitTree: object expected");
          message.fruitTree = $root.FruitTree.fromObject(object.fruitTree);
        }
        null != object.locatedUserId && ($util.Long ? (message.locatedUserId = $util.Long.fromValue(object.locatedUserId)).unsigned = false : "string" === typeof object.locatedUserId ? message.locatedUserId = parseInt(object.locatedUserId, 10) : "number" === typeof object.locatedUserId ? message.locatedUserId = object.locatedUserId : "object" === typeof object.locatedUserId && (message.locatedUserId = new $util.LongBits(object.locatedUserId.low >>> 0, object.locatedUserId.high >>> 0).toNumber()));
        null != object.locatedPetId && ($util.Long ? (message.locatedPetId = $util.Long.fromValue(object.locatedPetId)).unsigned = false : "string" === typeof object.locatedPetId ? message.locatedPetId = parseInt(object.locatedPetId, 10) : "number" === typeof object.locatedPetId ? message.locatedPetId = object.locatedPetId : "object" === typeof object.locatedPetId && (message.locatedPetId = new $util.LongBits(object.locatedPetId.low >>> 0, object.locatedPetId.high >>> 0).toNumber()));
        null != object.inHome && (message.inHome = Boolean(object.inHome));
        if (null != object.selfDigestion) {
          if ("object" !== typeof object.selfDigestion) throw TypeError(".PetData.selfDigestion: object expected");
          message.selfDigestion = $root.Digestion.fromObject(object.selfDigestion);
        }
        if (null != object.otherDigestion) {
          if ("object" !== typeof object.otherDigestion) throw TypeError(".PetData.otherDigestion: object expected");
          message.otherDigestion = $root.Digestion.fromObject(object.otherDigestion);
        }
        null != object.ownerName && (message.ownerName = String(object.ownerName));
        if (object.dress) {
          if (!Array.isArray(object.dress)) throw TypeError(".PetData.dress: array expected");
          message.dress = [];
          for (var i = 0; i < object.dress.length; ++i) {
            if ("object" !== typeof object.dress[i]) throw TypeError(".PetData.dress: object expected");
            message.dress[i] = $root.Dress.fromObject(object.dress[i]);
          }
        }
        if (object.skillIdList) {
          if (!Array.isArray(object.skillIdList)) throw TypeError(".PetData.skillIdList: array expected");
          message.skillIdList = [];
          for (var i = 0; i < object.skillIdList.length; ++i) message.skillIdList[i] = 0 | object.skillIdList[i];
        }
        if (object.furniture) {
          if (!Array.isArray(object.furniture)) throw TypeError(".PetData.furniture: array expected");
          message.furniture = [];
          for (var i = 0; i < object.furniture.length; ++i) {
            if ("object" !== typeof object.furniture[i]) throw TypeError(".PetData.furniture: object expected");
            message.furniture[i] = $root.Furniture.fromObject(object.furniture[i]);
          }
        }
        if (null != object.userProfile) {
          if ("object" !== typeof object.userProfile) throw TypeError(".PetData.userProfile: object expected");
          message.userProfile = $root.UserProfile.fromObject(object.userProfile);
        }
        return message;
      };
      PetData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.arrays || options.defaults) {
          object.dress = [];
          object.skillIdList = [];
          object.furniture = [];
        }
        if (options.defaults) {
          if ($util.Long) {
            var _long6 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long6.toString() : options.longs === Number ? _long6.toNumber() : _long6;
          } else object.userId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long6 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long6.toString() : options.longs === Number ? _long6.toNumber() : _long6;
          } else object.petId = options.longs === String ? "0" : 0;
          object.petType = 0;
          object.exp = 0;
          object.name = "";
          object.gender = false;
          object.fruitTree = null;
          if ($util.Long) {
            var _long6 = new $util.Long(0, 0, false);
            object.locatedUserId = options.longs === String ? _long6.toString() : options.longs === Number ? _long6.toNumber() : _long6;
          } else object.locatedUserId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long6 = new $util.Long(0, 0, false);
            object.locatedPetId = options.longs === String ? _long6.toString() : options.longs === Number ? _long6.toNumber() : _long6;
          } else object.locatedPetId = options.longs === String ? "0" : 0;
          object.inHome = false;
          object.selfDigestion = null;
          object.otherDigestion = null;
          object.ownerName = "";
          object.userProfile = null;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.petType && message.hasOwnProperty("petType") && (object.petType = message.petType);
        null != message.exp && message.hasOwnProperty("exp") && (object.exp = message.exp);
        null != message.name && message.hasOwnProperty("name") && (object.name = message.name);
        null != message.gender && message.hasOwnProperty("gender") && (object.gender = message.gender);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && (object.fruitTree = $root.FruitTree.toObject(message.fruitTree, options));
        null != message.locatedUserId && message.hasOwnProperty("locatedUserId") && ("number" === typeof message.locatedUserId ? object.locatedUserId = options.longs === String ? String(message.locatedUserId) : message.locatedUserId : object.locatedUserId = options.longs === String ? $util.Long.prototype.toString.call(message.locatedUserId) : options.longs === Number ? new $util.LongBits(message.locatedUserId.low >>> 0, message.locatedUserId.high >>> 0).toNumber() : message.locatedUserId);
        null != message.locatedPetId && message.hasOwnProperty("locatedPetId") && ("number" === typeof message.locatedPetId ? object.locatedPetId = options.longs === String ? String(message.locatedPetId) : message.locatedPetId : object.locatedPetId = options.longs === String ? $util.Long.prototype.toString.call(message.locatedPetId) : options.longs === Number ? new $util.LongBits(message.locatedPetId.low >>> 0, message.locatedPetId.high >>> 0).toNumber() : message.locatedPetId);
        null != message.inHome && message.hasOwnProperty("inHome") && (object.inHome = message.inHome);
        null != message.selfDigestion && message.hasOwnProperty("selfDigestion") && (object.selfDigestion = $root.Digestion.toObject(message.selfDigestion, options));
        null != message.otherDigestion && message.hasOwnProperty("otherDigestion") && (object.otherDigestion = $root.Digestion.toObject(message.otherDigestion, options));
        null != message.ownerName && message.hasOwnProperty("ownerName") && (object.ownerName = message.ownerName);
        if (message.dress && message.dress.length) {
          object.dress = [];
          for (var j = 0; j < message.dress.length; ++j) object.dress[j] = $root.Dress.toObject(message.dress[j], options);
        }
        if (message.skillIdList && message.skillIdList.length) {
          object.skillIdList = [];
          for (var j = 0; j < message.skillIdList.length; ++j) object.skillIdList[j] = message.skillIdList[j];
        }
        if (message.furniture && message.furniture.length) {
          object.furniture = [];
          for (var j = 0; j < message.furniture.length; ++j) object.furniture[j] = $root.Furniture.toObject(message.furniture[j], options);
        }
        null != message.userProfile && message.hasOwnProperty("userProfile") && (object.userProfile = $root.UserProfile.toObject(message.userProfile, options));
        return object;
      };
      PetData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PetData;
    }();
    $root.FruitTree = function() {
      function FruitTree(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      FruitTree.prototype.treeType = 0;
      FruitTree.prototype.pickEnable = false;
      FruitTree.prototype.grownNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FruitTree.prototype.nextGrownNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FruitTree.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FruitTree.create = function create(properties) {
        return new FruitTree(properties);
      };
      FruitTree.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.treeType);
        writer.uint32(16).bool(message.pickEnable);
        writer.uint32(24).int64(message.grownNum);
        writer.uint32(32).int64(message.nextGrownNum);
        null != message.petId && message.hasOwnProperty("petId") && writer.uint32(40).int64(message.petId);
        return writer;
      };
      FruitTree.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      FruitTree.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.FruitTree();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.treeType = reader.int32();
            break;

           case 2:
            message.pickEnable = reader.bool();
            break;

           case 3:
            message.grownNum = reader.int64();
            break;

           case 4:
            message.nextGrownNum = reader.int64();
            break;

           case 5:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("treeType")) throw $util.ProtocolError("missing required 'treeType'", {
          instance: message
        });
        if (!message.hasOwnProperty("pickEnable")) throw $util.ProtocolError("missing required 'pickEnable'", {
          instance: message
        });
        if (!message.hasOwnProperty("grownNum")) throw $util.ProtocolError("missing required 'grownNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("nextGrownNum")) throw $util.ProtocolError("missing required 'nextGrownNum'", {
          instance: message
        });
        return message;
      };
      FruitTree.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      FruitTree.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.treeType)) return "treeType: integer expected";
        if ("boolean" !== typeof message.pickEnable) return "pickEnable: boolean expected";
        if (!$util.isInteger(message.grownNum) && !(message.grownNum && $util.isInteger(message.grownNum.low) && $util.isInteger(message.grownNum.high))) return "grownNum: integer|Long expected";
        if (!$util.isInteger(message.nextGrownNum) && !(message.nextGrownNum && $util.isInteger(message.nextGrownNum.low) && $util.isInteger(message.nextGrownNum.high))) return "nextGrownNum: integer|Long expected";
        if (null != message.petId && message.hasOwnProperty("petId") && !$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      FruitTree.fromObject = function fromObject(object) {
        if (object instanceof $root.FruitTree) return object;
        var message = new $root.FruitTree();
        null != object.treeType && (message.treeType = 0 | object.treeType);
        null != object.pickEnable && (message.pickEnable = Boolean(object.pickEnable));
        null != object.grownNum && ($util.Long ? (message.grownNum = $util.Long.fromValue(object.grownNum)).unsigned = false : "string" === typeof object.grownNum ? message.grownNum = parseInt(object.grownNum, 10) : "number" === typeof object.grownNum ? message.grownNum = object.grownNum : "object" === typeof object.grownNum && (message.grownNum = new $util.LongBits(object.grownNum.low >>> 0, object.grownNum.high >>> 0).toNumber()));
        null != object.nextGrownNum && ($util.Long ? (message.nextGrownNum = $util.Long.fromValue(object.nextGrownNum)).unsigned = false : "string" === typeof object.nextGrownNum ? message.nextGrownNum = parseInt(object.nextGrownNum, 10) : "number" === typeof object.nextGrownNum ? message.nextGrownNum = object.nextGrownNum : "object" === typeof object.nextGrownNum && (message.nextGrownNum = new $util.LongBits(object.nextGrownNum.low >>> 0, object.nextGrownNum.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      FruitTree.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.treeType = 0;
          object.pickEnable = false;
          if ($util.Long) {
            var _long7 = new $util.Long(0, 0, false);
            object.grownNum = options.longs === String ? _long7.toString() : options.longs === Number ? _long7.toNumber() : _long7;
          } else object.grownNum = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long7 = new $util.Long(0, 0, false);
            object.nextGrownNum = options.longs === String ? _long7.toString() : options.longs === Number ? _long7.toNumber() : _long7;
          } else object.nextGrownNum = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long7 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long7.toString() : options.longs === Number ? _long7.toNumber() : _long7;
          } else object.petId = options.longs === String ? "0" : 0;
        }
        null != message.treeType && message.hasOwnProperty("treeType") && (object.treeType = message.treeType);
        null != message.pickEnable && message.hasOwnProperty("pickEnable") && (object.pickEnable = message.pickEnable);
        null != message.grownNum && message.hasOwnProperty("grownNum") && ("number" === typeof message.grownNum ? object.grownNum = options.longs === String ? String(message.grownNum) : message.grownNum : object.grownNum = options.longs === String ? $util.Long.prototype.toString.call(message.grownNum) : options.longs === Number ? new $util.LongBits(message.grownNum.low >>> 0, message.grownNum.high >>> 0).toNumber() : message.grownNum);
        null != message.nextGrownNum && message.hasOwnProperty("nextGrownNum") && ("number" === typeof message.nextGrownNum ? object.nextGrownNum = options.longs === String ? String(message.nextGrownNum) : message.nextGrownNum : object.nextGrownNum = options.longs === String ? $util.Long.prototype.toString.call(message.nextGrownNum) : options.longs === Number ? new $util.LongBits(message.nextGrownNum.low >>> 0, message.nextGrownNum.high >>> 0).toNumber() : message.nextGrownNum);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      FruitTree.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return FruitTree;
    }();
    $root.Digestion = function() {
      function Digestion(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Digestion.prototype.maxFeedNum = 0;
      Digestion.prototype.nowFeedNum = 0;
      Digestion.prototype.digestedTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      Digestion.create = function create(properties) {
        return new Digestion(properties);
      };
      Digestion.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.maxFeedNum);
        writer.uint32(16).int32(message.nowFeedNum);
        null != message.digestedTime && message.hasOwnProperty("digestedTime") && writer.uint32(24).int64(message.digestedTime);
        return writer;
      };
      Digestion.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Digestion.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Digestion();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.maxFeedNum = reader.int32();
            break;

           case 2:
            message.nowFeedNum = reader.int32();
            break;

           case 3:
            message.digestedTime = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("maxFeedNum")) throw $util.ProtocolError("missing required 'maxFeedNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("nowFeedNum")) throw $util.ProtocolError("missing required 'nowFeedNum'", {
          instance: message
        });
        return message;
      };
      Digestion.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Digestion.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.maxFeedNum)) return "maxFeedNum: integer expected";
        if (!$util.isInteger(message.nowFeedNum)) return "nowFeedNum: integer expected";
        if (null != message.digestedTime && message.hasOwnProperty("digestedTime") && !$util.isInteger(message.digestedTime) && !(message.digestedTime && $util.isInteger(message.digestedTime.low) && $util.isInteger(message.digestedTime.high))) return "digestedTime: integer|Long expected";
        return null;
      };
      Digestion.fromObject = function fromObject(object) {
        if (object instanceof $root.Digestion) return object;
        var message = new $root.Digestion();
        null != object.maxFeedNum && (message.maxFeedNum = 0 | object.maxFeedNum);
        null != object.nowFeedNum && (message.nowFeedNum = 0 | object.nowFeedNum);
        null != object.digestedTime && ($util.Long ? (message.digestedTime = $util.Long.fromValue(object.digestedTime)).unsigned = false : "string" === typeof object.digestedTime ? message.digestedTime = parseInt(object.digestedTime, 10) : "number" === typeof object.digestedTime ? message.digestedTime = object.digestedTime : "object" === typeof object.digestedTime && (message.digestedTime = new $util.LongBits(object.digestedTime.low >>> 0, object.digestedTime.high >>> 0).toNumber()));
        return message;
      };
      Digestion.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.maxFeedNum = 0;
          object.nowFeedNum = 0;
          if ($util.Long) {
            var _long8 = new $util.Long(0, 0, false);
            object.digestedTime = options.longs === String ? _long8.toString() : options.longs === Number ? _long8.toNumber() : _long8;
          } else object.digestedTime = options.longs === String ? "0" : 0;
        }
        null != message.maxFeedNum && message.hasOwnProperty("maxFeedNum") && (object.maxFeedNum = message.maxFeedNum);
        null != message.nowFeedNum && message.hasOwnProperty("nowFeedNum") && (object.nowFeedNum = message.nowFeedNum);
        null != message.digestedTime && message.hasOwnProperty("digestedTime") && ("number" === typeof message.digestedTime ? object.digestedTime = options.longs === String ? String(message.digestedTime) : message.digestedTime : object.digestedTime = options.longs === String ? $util.Long.prototype.toString.call(message.digestedTime) : options.longs === Number ? new $util.LongBits(message.digestedTime.low >>> 0, message.digestedTime.high >>> 0).toNumber() : message.digestedTime);
        return object;
      };
      Digestion.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Digestion;
    }();
    $root.Dress = function() {
      function Dress(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Dress.prototype.propRecognizeId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      Dress.prototype.propId = 0;
      Dress.create = function create(properties) {
        return new Dress(properties);
      };
      Dress.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.propRecognizeId);
        writer.uint32(16).int32(message.propId);
        return writer;
      };
      Dress.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Dress.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Dress();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.propRecognizeId = reader.int64();
            break;

           case 2:
            message.propId = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("propRecognizeId")) throw $util.ProtocolError("missing required 'propRecognizeId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        return message;
      };
      Dress.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Dress.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.propRecognizeId) && !(message.propRecognizeId && $util.isInteger(message.propRecognizeId.low) && $util.isInteger(message.propRecognizeId.high))) return "propRecognizeId: integer|Long expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        return null;
      };
      Dress.fromObject = function fromObject(object) {
        if (object instanceof $root.Dress) return object;
        var message = new $root.Dress();
        null != object.propRecognizeId && ($util.Long ? (message.propRecognizeId = $util.Long.fromValue(object.propRecognizeId)).unsigned = false : "string" === typeof object.propRecognizeId ? message.propRecognizeId = parseInt(object.propRecognizeId, 10) : "number" === typeof object.propRecognizeId ? message.propRecognizeId = object.propRecognizeId : "object" === typeof object.propRecognizeId && (message.propRecognizeId = new $util.LongBits(object.propRecognizeId.low >>> 0, object.propRecognizeId.high >>> 0).toNumber()));
        null != object.propId && (message.propId = 0 | object.propId);
        return message;
      };
      Dress.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long9 = new $util.Long(0, 0, false);
            object.propRecognizeId = options.longs === String ? _long9.toString() : options.longs === Number ? _long9.toNumber() : _long9;
          } else object.propRecognizeId = options.longs === String ? "0" : 0;
          object.propId = 0;
        }
        null != message.propRecognizeId && message.hasOwnProperty("propRecognizeId") && ("number" === typeof message.propRecognizeId ? object.propRecognizeId = options.longs === String ? String(message.propRecognizeId) : message.propRecognizeId : object.propRecognizeId = options.longs === String ? $util.Long.prototype.toString.call(message.propRecognizeId) : options.longs === Number ? new $util.LongBits(message.propRecognizeId.low >>> 0, message.propRecognizeId.high >>> 0).toNumber() : message.propRecognizeId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        return object;
      };
      Dress.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Dress;
    }();
    $root.Furniture = function() {
      function Furniture(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Furniture.prototype.propRecognizeId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      Furniture.prototype.propId = 0;
      Furniture.prototype.location = "";
      Furniture.create = function create(properties) {
        return new Furniture(properties);
      };
      Furniture.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.propRecognizeId);
        writer.uint32(16).int32(message.propId);
        writer.uint32(26).string(message.location);
        return writer;
      };
      Furniture.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Furniture.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Furniture();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.propRecognizeId = reader.int64();
            break;

           case 2:
            message.propId = reader.int32();
            break;

           case 3:
            message.location = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("propRecognizeId")) throw $util.ProtocolError("missing required 'propRecognizeId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        if (!message.hasOwnProperty("location")) throw $util.ProtocolError("missing required 'location'", {
          instance: message
        });
        return message;
      };
      Furniture.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Furniture.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.propRecognizeId) && !(message.propRecognizeId && $util.isInteger(message.propRecognizeId.low) && $util.isInteger(message.propRecognizeId.high))) return "propRecognizeId: integer|Long expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        if (!$util.isString(message.location)) return "location: string expected";
        return null;
      };
      Furniture.fromObject = function fromObject(object) {
        if (object instanceof $root.Furniture) return object;
        var message = new $root.Furniture();
        null != object.propRecognizeId && ($util.Long ? (message.propRecognizeId = $util.Long.fromValue(object.propRecognizeId)).unsigned = false : "string" === typeof object.propRecognizeId ? message.propRecognizeId = parseInt(object.propRecognizeId, 10) : "number" === typeof object.propRecognizeId ? message.propRecognizeId = object.propRecognizeId : "object" === typeof object.propRecognizeId && (message.propRecognizeId = new $util.LongBits(object.propRecognizeId.low >>> 0, object.propRecognizeId.high >>> 0).toNumber()));
        null != object.propId && (message.propId = 0 | object.propId);
        null != object.location && (message.location = String(object.location));
        return message;
      };
      Furniture.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long10 = new $util.Long(0, 0, false);
            object.propRecognizeId = options.longs === String ? _long10.toString() : options.longs === Number ? _long10.toNumber() : _long10;
          } else object.propRecognizeId = options.longs === String ? "0" : 0;
          object.propId = 0;
          object.location = "";
        }
        null != message.propRecognizeId && message.hasOwnProperty("propRecognizeId") && ("number" === typeof message.propRecognizeId ? object.propRecognizeId = options.longs === String ? String(message.propRecognizeId) : message.propRecognizeId : object.propRecognizeId = options.longs === String ? $util.Long.prototype.toString.call(message.propRecognizeId) : options.longs === Number ? new $util.LongBits(message.propRecognizeId.low >>> 0, message.propRecognizeId.high >>> 0).toNumber() : message.propRecognizeId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        null != message.location && message.hasOwnProperty("location") && (object.location = message.location);
        return object;
      };
      Furniture.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Furniture;
    }();
    $root.UserProfile = function() {
      function UserProfile(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserProfile.prototype.signature = "";
      UserProfile.prototype.avatarName = "";
      UserProfile.prototype.avatarColor = "";
      UserProfile.prototype.soulCoin = 0;
      UserProfile.prototype.gender = 0;
      UserProfile.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProfile.prototype.userIdEcpt = "";
      UserProfile.create = function create(properties) {
        return new UserProfile(properties);
      };
      UserProfile.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.signature && message.hasOwnProperty("signature") && writer.uint32(10).string(message.signature);
        null != message.avatarName && message.hasOwnProperty("avatarName") && writer.uint32(18).string(message.avatarName);
        null != message.avatarColor && message.hasOwnProperty("avatarColor") && writer.uint32(26).string(message.avatarColor);
        null != message.soulCoin && message.hasOwnProperty("soulCoin") && writer.uint32(33)["double"](message.soulCoin);
        null != message.gender && message.hasOwnProperty("gender") && writer.uint32(40).int32(message.gender);
        null != message.userId && message.hasOwnProperty("userId") && writer.uint32(48).int64(message.userId);
        null != message.userIdEcpt && message.hasOwnProperty("userIdEcpt") && writer.uint32(58).string(message.userIdEcpt);
        return writer;
      };
      UserProfile.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserProfile.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserProfile();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.signature = reader.string();
            break;

           case 2:
            message.avatarName = reader.string();
            break;

           case 3:
            message.avatarColor = reader.string();
            break;

           case 4:
            message.soulCoin = reader["double"]();
            break;

           case 5:
            message.gender = reader.int32();
            break;

           case 6:
            message.userId = reader.int64();
            break;

           case 7:
            message.userIdEcpt = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      UserProfile.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserProfile.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.signature && message.hasOwnProperty("signature") && !$util.isString(message.signature)) return "signature: string expected";
        if (null != message.avatarName && message.hasOwnProperty("avatarName") && !$util.isString(message.avatarName)) return "avatarName: string expected";
        if (null != message.avatarColor && message.hasOwnProperty("avatarColor") && !$util.isString(message.avatarColor)) return "avatarColor: string expected";
        if (null != message.soulCoin && message.hasOwnProperty("soulCoin") && "number" !== typeof message.soulCoin) return "soulCoin: number expected";
        if (null != message.gender && message.hasOwnProperty("gender") && !$util.isInteger(message.gender)) return "gender: integer expected";
        if (null != message.userId && message.hasOwnProperty("userId") && !$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (null != message.userIdEcpt && message.hasOwnProperty("userIdEcpt") && !$util.isString(message.userIdEcpt)) return "userIdEcpt: string expected";
        return null;
      };
      UserProfile.fromObject = function fromObject(object) {
        if (object instanceof $root.UserProfile) return object;
        var message = new $root.UserProfile();
        null != object.signature && (message.signature = String(object.signature));
        null != object.avatarName && (message.avatarName = String(object.avatarName));
        null != object.avatarColor && (message.avatarColor = String(object.avatarColor));
        null != object.soulCoin && (message.soulCoin = Number(object.soulCoin));
        null != object.gender && (message.gender = 0 | object.gender);
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.userIdEcpt && (message.userIdEcpt = String(object.userIdEcpt));
        return message;
      };
      UserProfile.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.signature = "";
          object.avatarName = "";
          object.avatarColor = "";
          object.soulCoin = 0;
          object.gender = 0;
          if ($util.Long) {
            var _long11 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long11.toString() : options.longs === Number ? _long11.toNumber() : _long11;
          } else object.userId = options.longs === String ? "0" : 0;
          object.userIdEcpt = "";
        }
        null != message.signature && message.hasOwnProperty("signature") && (object.signature = message.signature);
        null != message.avatarName && message.hasOwnProperty("avatarName") && (object.avatarName = message.avatarName);
        null != message.avatarColor && message.hasOwnProperty("avatarColor") && (object.avatarColor = message.avatarColor);
        null != message.soulCoin && message.hasOwnProperty("soulCoin") && (object.soulCoin = options.json && !isFinite(message.soulCoin) ? String(message.soulCoin) : message.soulCoin);
        null != message.gender && message.hasOwnProperty("gender") && (object.gender = message.gender);
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.userIdEcpt && message.hasOwnProperty("userIdEcpt") && (object.userIdEcpt = message.userIdEcpt);
        return object;
      };
      UserProfile.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserProfile;
    }();
    $root.REQ_DressUp = function() {
      function REQ_DressUp(properties) {
        this.dress = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_DressUp.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_DressUp.prototype.dress = $util.emptyArray;
      REQ_DressUp.create = function create(properties) {
        return new REQ_DressUp(properties);
      };
      REQ_DressUp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.petId);
        if (null != message.dress && message.dress.length) for (var i = 0; i < message.dress.length; ++i) $root.Dress.encode(message.dress[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      REQ_DressUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_DressUp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_DressUp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petId = reader.int64();
            break;

           case 2:
            message.dress && message.dress.length || (message.dress = []);
            message.dress.push($root.Dress.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      REQ_DressUp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_DressUp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (null != message.dress && message.hasOwnProperty("dress")) {
          if (!Array.isArray(message.dress)) return "dress: array expected";
          for (var i = 0; i < message.dress.length; ++i) {
            var error = $root.Dress.verify(message.dress[i]);
            if (error) return "dress." + error;
          }
        }
        return null;
      };
      REQ_DressUp.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_DressUp) return object;
        var message = new $root.REQ_DressUp();
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        if (object.dress) {
          if (!Array.isArray(object.dress)) throw TypeError(".REQ_DressUp.dress: array expected");
          message.dress = [];
          for (var i = 0; i < object.dress.length; ++i) {
            if ("object" !== typeof object.dress[i]) throw TypeError(".REQ_DressUp.dress: object expected");
            message.dress[i] = $root.Dress.fromObject(object.dress[i]);
          }
        }
        return message;
      };
      REQ_DressUp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.dress = []);
        if (options.defaults) if ($util.Long) {
          var _long12 = new $util.Long(0, 0, false);
          object.petId = options.longs === String ? _long12.toString() : options.longs === Number ? _long12.toNumber() : _long12;
        } else object.petId = options.longs === String ? "0" : 0;
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        if (message.dress && message.dress.length) {
          object.dress = [];
          for (var j = 0; j < message.dress.length; ++j) object.dress[j] = $root.Dress.toObject(message.dress[j], options);
        }
        return object;
      };
      REQ_DressUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_DressUp;
    }();
    $root.RESP_DressUp = function() {
      function RESP_DressUp(properties) {
        this.dress = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_DressUp.prototype.dress = $util.emptyArray;
      RESP_DressUp.create = function create(properties) {
        return new RESP_DressUp(properties);
      };
      RESP_DressUp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.dress && message.dress.length) for (var i = 0; i < message.dress.length; ++i) $root.Dress.encode(message.dress[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_DressUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_DressUp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_DressUp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.dress && message.dress.length || (message.dress = []);
            message.dress.push($root.Dress.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_DressUp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_DressUp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.dress && message.hasOwnProperty("dress")) {
          if (!Array.isArray(message.dress)) return "dress: array expected";
          for (var i = 0; i < message.dress.length; ++i) {
            var error = $root.Dress.verify(message.dress[i]);
            if (error) return "dress." + error;
          }
        }
        return null;
      };
      RESP_DressUp.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_DressUp) return object;
        var message = new $root.RESP_DressUp();
        if (object.dress) {
          if (!Array.isArray(object.dress)) throw TypeError(".RESP_DressUp.dress: array expected");
          message.dress = [];
          for (var i = 0; i < object.dress.length; ++i) {
            if ("object" !== typeof object.dress[i]) throw TypeError(".RESP_DressUp.dress: object expected");
            message.dress[i] = $root.Dress.fromObject(object.dress[i]);
          }
        }
        return message;
      };
      RESP_DressUp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.dress = []);
        if (message.dress && message.dress.length) {
          object.dress = [];
          for (var j = 0; j < message.dress.length; ++j) object.dress[j] = $root.Dress.toObject(message.dress[j], options);
        }
        return object;
      };
      RESP_DressUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_DressUp;
    }();
    $root.PUSH_DressModify = function() {
      function PUSH_DressModify(properties) {
        this.dress = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_DressModify.prototype.dress = $util.emptyArray;
      PUSH_DressModify.create = function create(properties) {
        return new PUSH_DressModify(properties);
      };
      PUSH_DressModify.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.dress && message.dress.length) for (var i = 0; i < message.dress.length; ++i) $root.Dress.encode(message.dress[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      PUSH_DressModify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_DressModify.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_DressModify();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.dress && message.dress.length || (message.dress = []);
            message.dress.push($root.Dress.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      PUSH_DressModify.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_DressModify.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.dress && message.hasOwnProperty("dress")) {
          if (!Array.isArray(message.dress)) return "dress: array expected";
          for (var i = 0; i < message.dress.length; ++i) {
            var error = $root.Dress.verify(message.dress[i]);
            if (error) return "dress." + error;
          }
        }
        return null;
      };
      PUSH_DressModify.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_DressModify) return object;
        var message = new $root.PUSH_DressModify();
        if (object.dress) {
          if (!Array.isArray(object.dress)) throw TypeError(".PUSH_DressModify.dress: array expected");
          message.dress = [];
          for (var i = 0; i < object.dress.length; ++i) {
            if ("object" !== typeof object.dress[i]) throw TypeError(".PUSH_DressModify.dress: object expected");
            message.dress[i] = $root.Dress.fromObject(object.dress[i]);
          }
        }
        return message;
      };
      PUSH_DressModify.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.dress = []);
        if (message.dress && message.dress.length) {
          object.dress = [];
          for (var j = 0; j < message.dress.length; ++j) object.dress[j] = $root.Dress.toObject(message.dress[j], options);
        }
        return object;
      };
      PUSH_DressModify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_DressModify;
    }();
    $root.REQ_Feed = function() {
      function REQ_Feed(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_Feed.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_Feed.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_Feed.prototype.propId = 0;
      REQ_Feed.create = function create(properties) {
        return new REQ_Feed(properties);
      };
      REQ_Feed.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        writer.uint32(16).int64(message.petId);
        writer.uint32(24).int32(message.propId);
        return writer;
      };
      REQ_Feed.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_Feed.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_Feed();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           case 3:
            message.propId = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        return message;
      };
      REQ_Feed.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_Feed.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        return null;
      };
      REQ_Feed.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_Feed) return object;
        var message = new $root.REQ_Feed();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.propId && (message.propId = 0 | object.propId);
        return message;
      };
      REQ_Feed.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long13 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long13.toString() : options.longs === Number ? _long13.toNumber() : _long13;
          } else object.userId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long13 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long13.toString() : options.longs === Number ? _long13.toNumber() : _long13;
          } else object.petId = options.longs === String ? "0" : 0;
          object.propId = 0;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        return object;
      };
      REQ_Feed.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_Feed;
    }();
    $root.RESP_Feed = function() {
      function RESP_Feed(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_Feed.prototype.digestion = null;
      RESP_Feed.prototype.exp = 0;
      RESP_Feed.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      RESP_Feed.prototype.propId = 0;
      RESP_Feed.create = function create(properties) {
        return new RESP_Feed(properties);
      };
      RESP_Feed.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.Digestion.encode(message.digestion, writer.uint32(10).fork()).ldelim();
        writer.uint32(16).int32(message.exp);
        writer.uint32(24).int64(message.petId);
        writer.uint32(32).int32(message.propId);
        return writer;
      };
      RESP_Feed.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_Feed.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_Feed();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.digestion = $root.Digestion.decode(reader, reader.uint32());
            break;

           case 2:
            message.exp = reader.int32();
            break;

           case 3:
            message.petId = reader.int64();
            break;

           case 4:
            message.propId = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("digestion")) throw $util.ProtocolError("missing required 'digestion'", {
          instance: message
        });
        if (!message.hasOwnProperty("exp")) throw $util.ProtocolError("missing required 'exp'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        return message;
      };
      RESP_Feed.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_Feed.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var error = $root.Digestion.verify(message.digestion);
        if (error) return "digestion." + error;
        if (!$util.isInteger(message.exp)) return "exp: integer expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        return null;
      };
      RESP_Feed.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_Feed) return object;
        var message = new $root.RESP_Feed();
        if (null != object.digestion) {
          if ("object" !== typeof object.digestion) throw TypeError(".RESP_Feed.digestion: object expected");
          message.digestion = $root.Digestion.fromObject(object.digestion);
        }
        null != object.exp && (message.exp = 0 | object.exp);
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.propId && (message.propId = 0 | object.propId);
        return message;
      };
      RESP_Feed.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.digestion = null;
          object.exp = 0;
          if ($util.Long) {
            var _long14 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long14.toString() : options.longs === Number ? _long14.toNumber() : _long14;
          } else object.petId = options.longs === String ? "0" : 0;
          object.propId = 0;
        }
        null != message.digestion && message.hasOwnProperty("digestion") && (object.digestion = $root.Digestion.toObject(message.digestion, options));
        null != message.exp && message.hasOwnProperty("exp") && (object.exp = message.exp);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        return object;
      };
      RESP_Feed.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_Feed;
    }();
    $root.REQ_FingerHeart = function() {
      function REQ_FingerHeart(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_FingerHeart.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_FingerHeart.create = function create(properties) {
        return new REQ_FingerHeart(properties);
      };
      REQ_FingerHeart.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.id);
        return writer;
      };
      REQ_FingerHeart.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_FingerHeart.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_FingerHeart();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      REQ_FingerHeart.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_FingerHeart.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high))) return "id: integer|Long expected";
        return null;
      };
      REQ_FingerHeart.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_FingerHeart) return object;
        var message = new $root.REQ_FingerHeart();
        null != object.id && ($util.Long ? (message.id = $util.Long.fromValue(object.id)).unsigned = false : "string" === typeof object.id ? message.id = parseInt(object.id, 10) : "number" === typeof object.id ? message.id = object.id : "object" === typeof object.id && (message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber()));
        return message;
      };
      REQ_FingerHeart.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) if ($util.Long) {
          var _long15 = new $util.Long(0, 0, false);
          object.id = options.longs === String ? _long15.toString() : options.longs === Number ? _long15.toNumber() : _long15;
        } else object.id = options.longs === String ? "0" : 0;
        null != message.id && message.hasOwnProperty("id") && ("number" === typeof message.id ? object.id = options.longs === String ? String(message.id) : message.id : object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id);
        return object;
      };
      REQ_FingerHeart.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_FingerHeart;
    }();
    $root.RESP_FingerHeart = function() {
      function RESP_FingerHeart(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_FingerHeart.create = function create(properties) {
        return new RESP_FingerHeart(properties);
      };
      RESP_FingerHeart.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      RESP_FingerHeart.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_FingerHeart.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_FingerHeart();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      RESP_FingerHeart.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_FingerHeart.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      RESP_FingerHeart.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_FingerHeart) return object;
        return new $root.RESP_FingerHeart();
      };
      RESP_FingerHeart.toObject = function toObject() {
        return {};
      };
      RESP_FingerHeart.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_FingerHeart;
    }();
    $root.REQ_FriendShortcutInfo = function() {
      function REQ_FriendShortcutInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_FriendShortcutInfo.prototype.pageNum = 0;
      REQ_FriendShortcutInfo.prototype.pageSize = 0;
      REQ_FriendShortcutInfo.prototype.isInit = false;
      REQ_FriendShortcutInfo.create = function create(properties) {
        return new REQ_FriendShortcutInfo(properties);
      };
      REQ_FriendShortcutInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.pageNum);
        writer.uint32(16).int32(message.pageSize);
        writer.uint32(24).bool(message.isInit);
        return writer;
      };
      REQ_FriendShortcutInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_FriendShortcutInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_FriendShortcutInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pageNum = reader.int32();
            break;

           case 2:
            message.pageSize = reader.int32();
            break;

           case 3:
            message.isInit = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("pageNum")) throw $util.ProtocolError("missing required 'pageNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("pageSize")) throw $util.ProtocolError("missing required 'pageSize'", {
          instance: message
        });
        if (!message.hasOwnProperty("isInit")) throw $util.ProtocolError("missing required 'isInit'", {
          instance: message
        });
        return message;
      };
      REQ_FriendShortcutInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_FriendShortcutInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.pageNum)) return "pageNum: integer expected";
        if (!$util.isInteger(message.pageSize)) return "pageSize: integer expected";
        if ("boolean" !== typeof message.isInit) return "isInit: boolean expected";
        return null;
      };
      REQ_FriendShortcutInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_FriendShortcutInfo) return object;
        var message = new $root.REQ_FriendShortcutInfo();
        null != object.pageNum && (message.pageNum = 0 | object.pageNum);
        null != object.pageSize && (message.pageSize = 0 | object.pageSize);
        null != object.isInit && (message.isInit = Boolean(object.isInit));
        return message;
      };
      REQ_FriendShortcutInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.pageNum = 0;
          object.pageSize = 0;
          object.isInit = false;
        }
        null != message.pageNum && message.hasOwnProperty("pageNum") && (object.pageNum = message.pageNum);
        null != message.pageSize && message.hasOwnProperty("pageSize") && (object.pageSize = message.pageSize);
        null != message.isInit && message.hasOwnProperty("isInit") && (object.isInit = message.isInit);
        return object;
      };
      REQ_FriendShortcutInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_FriendShortcutInfo;
    }();
    $root.RESP_FriendShortcutInfo = function() {
      function RESP_FriendShortcutInfo(properties) {
        this.friendShortcutInfo = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_FriendShortcutInfo.prototype.pages = 0;
      RESP_FriendShortcutInfo.prototype.pageCurrentNo = 0;
      RESP_FriendShortcutInfo.prototype.total = 0;
      RESP_FriendShortcutInfo.prototype.friendShortcutInfo = $util.emptyArray;
      RESP_FriendShortcutInfo.create = function create(properties) {
        return new RESP_FriendShortcutInfo(properties);
      };
      RESP_FriendShortcutInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.pages && message.hasOwnProperty("pages") && writer.uint32(8).int32(message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && writer.uint32(16).int32(message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && writer.uint32(24).int32(message.total);
        if (null != message.friendShortcutInfo && message.friendShortcutInfo.length) for (var i = 0; i < message.friendShortcutInfo.length; ++i) $root.FriendShortcutInfo.encode(message.friendShortcutInfo[i], writer.uint32(34).fork()).ldelim();
        return writer;
      };
      RESP_FriendShortcutInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_FriendShortcutInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_FriendShortcutInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pages = reader.int32();
            break;

           case 2:
            message.pageCurrentNo = reader.int32();
            break;

           case 3:
            message.total = reader.int32();
            break;

           case 4:
            message.friendShortcutInfo && message.friendShortcutInfo.length || (message.friendShortcutInfo = []);
            message.friendShortcutInfo.push($root.FriendShortcutInfo.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_FriendShortcutInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_FriendShortcutInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.pages && message.hasOwnProperty("pages") && !$util.isInteger(message.pages)) return "pages: integer expected";
        if (null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && !$util.isInteger(message.pageCurrentNo)) return "pageCurrentNo: integer expected";
        if (null != message.total && message.hasOwnProperty("total") && !$util.isInteger(message.total)) return "total: integer expected";
        if (null != message.friendShortcutInfo && message.hasOwnProperty("friendShortcutInfo")) {
          if (!Array.isArray(message.friendShortcutInfo)) return "friendShortcutInfo: array expected";
          for (var i = 0; i < message.friendShortcutInfo.length; ++i) {
            var error = $root.FriendShortcutInfo.verify(message.friendShortcutInfo[i]);
            if (error) return "friendShortcutInfo." + error;
          }
        }
        return null;
      };
      RESP_FriendShortcutInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_FriendShortcutInfo) return object;
        var message = new $root.RESP_FriendShortcutInfo();
        null != object.pages && (message.pages = 0 | object.pages);
        null != object.pageCurrentNo && (message.pageCurrentNo = 0 | object.pageCurrentNo);
        null != object.total && (message.total = 0 | object.total);
        if (object.friendShortcutInfo) {
          if (!Array.isArray(object.friendShortcutInfo)) throw TypeError(".RESP_FriendShortcutInfo.friendShortcutInfo: array expected");
          message.friendShortcutInfo = [];
          for (var i = 0; i < object.friendShortcutInfo.length; ++i) {
            if ("object" !== typeof object.friendShortcutInfo[i]) throw TypeError(".RESP_FriendShortcutInfo.friendShortcutInfo: object expected");
            message.friendShortcutInfo[i] = $root.FriendShortcutInfo.fromObject(object.friendShortcutInfo[i]);
          }
        }
        return message;
      };
      RESP_FriendShortcutInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.friendShortcutInfo = []);
        if (options.defaults) {
          object.pages = 0;
          object.pageCurrentNo = 0;
          object.total = 0;
        }
        null != message.pages && message.hasOwnProperty("pages") && (object.pages = message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && (object.pageCurrentNo = message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && (object.total = message.total);
        if (message.friendShortcutInfo && message.friendShortcutInfo.length) {
          object.friendShortcutInfo = [];
          for (var j = 0; j < message.friendShortcutInfo.length; ++j) object.friendShortcutInfo[j] = $root.FriendShortcutInfo.toObject(message.friendShortcutInfo[j], options);
        }
        return object;
      };
      RESP_FriendShortcutInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_FriendShortcutInfo;
    }();
    $root.FriendShortcutInfo = function() {
      function FriendShortcutInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      FriendShortcutInfo.prototype.friendUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FriendShortcutInfo.prototype.friendPetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FriendShortcutInfo.prototype.friendPetLevel = 0;
      FriendShortcutInfo.prototype.friendPetExp = 0;
      FriendShortcutInfo.prototype.interactUserProfile = null;
      FriendShortcutInfo.prototype.userSourceTagType = 0;
      FriendShortcutInfo.prototype.userInteractTagType = 0;
      FriendShortcutInfo.create = function create(properties) {
        return new FriendShortcutInfo(properties);
      };
      FriendShortcutInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.friendUserId);
        writer.uint32(16).int64(message.friendPetId);
        writer.uint32(24).int32(message.friendPetLevel);
        writer.uint32(32).int32(message.friendPetExp);
        $root.UserProfile.encode(message.interactUserProfile, writer.uint32(42).fork()).ldelim();
        writer.uint32(48).int32(message.userSourceTagType);
        null != message.userInteractTagType && message.hasOwnProperty("userInteractTagType") && writer.uint32(56).int32(message.userInteractTagType);
        return writer;
      };
      FriendShortcutInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      FriendShortcutInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.FriendShortcutInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.friendUserId = reader.int64();
            break;

           case 2:
            message.friendPetId = reader.int64();
            break;

           case 3:
            message.friendPetLevel = reader.int32();
            break;

           case 4:
            message.friendPetExp = reader.int32();
            break;

           case 5:
            message.interactUserProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 6:
            message.userSourceTagType = reader.int32();
            break;

           case 7:
            message.userInteractTagType = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("friendUserId")) throw $util.ProtocolError("missing required 'friendUserId'", {
          instance: message
        });
        if (!message.hasOwnProperty("friendPetId")) throw $util.ProtocolError("missing required 'friendPetId'", {
          instance: message
        });
        if (!message.hasOwnProperty("friendPetLevel")) throw $util.ProtocolError("missing required 'friendPetLevel'", {
          instance: message
        });
        if (!message.hasOwnProperty("friendPetExp")) throw $util.ProtocolError("missing required 'friendPetExp'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserProfile")) throw $util.ProtocolError("missing required 'interactUserProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("userSourceTagType")) throw $util.ProtocolError("missing required 'userSourceTagType'", {
          instance: message
        });
        return message;
      };
      FriendShortcutInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      FriendShortcutInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.friendUserId) && !(message.friendUserId && $util.isInteger(message.friendUserId.low) && $util.isInteger(message.friendUserId.high))) return "friendUserId: integer|Long expected";
        if (!$util.isInteger(message.friendPetId) && !(message.friendPetId && $util.isInteger(message.friendPetId.low) && $util.isInteger(message.friendPetId.high))) return "friendPetId: integer|Long expected";
        if (!$util.isInteger(message.friendPetLevel)) return "friendPetLevel: integer expected";
        if (!$util.isInteger(message.friendPetExp)) return "friendPetExp: integer expected";
        var error = $root.UserProfile.verify(message.interactUserProfile);
        if (error) return "interactUserProfile." + error;
        if (!$util.isInteger(message.userSourceTagType)) return "userSourceTagType: integer expected";
        if (null != message.userInteractTagType && message.hasOwnProperty("userInteractTagType") && !$util.isInteger(message.userInteractTagType)) return "userInteractTagType: integer expected";
        return null;
      };
      FriendShortcutInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FriendShortcutInfo) return object;
        var message = new $root.FriendShortcutInfo();
        null != object.friendUserId && ($util.Long ? (message.friendUserId = $util.Long.fromValue(object.friendUserId)).unsigned = false : "string" === typeof object.friendUserId ? message.friendUserId = parseInt(object.friendUserId, 10) : "number" === typeof object.friendUserId ? message.friendUserId = object.friendUserId : "object" === typeof object.friendUserId && (message.friendUserId = new $util.LongBits(object.friendUserId.low >>> 0, object.friendUserId.high >>> 0).toNumber()));
        null != object.friendPetId && ($util.Long ? (message.friendPetId = $util.Long.fromValue(object.friendPetId)).unsigned = false : "string" === typeof object.friendPetId ? message.friendPetId = parseInt(object.friendPetId, 10) : "number" === typeof object.friendPetId ? message.friendPetId = object.friendPetId : "object" === typeof object.friendPetId && (message.friendPetId = new $util.LongBits(object.friendPetId.low >>> 0, object.friendPetId.high >>> 0).toNumber()));
        null != object.friendPetLevel && (message.friendPetLevel = 0 | object.friendPetLevel);
        null != object.friendPetExp && (message.friendPetExp = 0 | object.friendPetExp);
        if (null != object.interactUserProfile) {
          if ("object" !== typeof object.interactUserProfile) throw TypeError(".FriendShortcutInfo.interactUserProfile: object expected");
          message.interactUserProfile = $root.UserProfile.fromObject(object.interactUserProfile);
        }
        null != object.userSourceTagType && (message.userSourceTagType = 0 | object.userSourceTagType);
        null != object.userInteractTagType && (message.userInteractTagType = 0 | object.userInteractTagType);
        return message;
      };
      FriendShortcutInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long16 = new $util.Long(0, 0, false);
            object.friendUserId = options.longs === String ? _long16.toString() : options.longs === Number ? _long16.toNumber() : _long16;
          } else object.friendUserId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long16 = new $util.Long(0, 0, false);
            object.friendPetId = options.longs === String ? _long16.toString() : options.longs === Number ? _long16.toNumber() : _long16;
          } else object.friendPetId = options.longs === String ? "0" : 0;
          object.friendPetLevel = 0;
          object.friendPetExp = 0;
          object.interactUserProfile = null;
          object.userSourceTagType = 0;
          object.userInteractTagType = 0;
        }
        null != message.friendUserId && message.hasOwnProperty("friendUserId") && ("number" === typeof message.friendUserId ? object.friendUserId = options.longs === String ? String(message.friendUserId) : message.friendUserId : object.friendUserId = options.longs === String ? $util.Long.prototype.toString.call(message.friendUserId) : options.longs === Number ? new $util.LongBits(message.friendUserId.low >>> 0, message.friendUserId.high >>> 0).toNumber() : message.friendUserId);
        null != message.friendPetId && message.hasOwnProperty("friendPetId") && ("number" === typeof message.friendPetId ? object.friendPetId = options.longs === String ? String(message.friendPetId) : message.friendPetId : object.friendPetId = options.longs === String ? $util.Long.prototype.toString.call(message.friendPetId) : options.longs === Number ? new $util.LongBits(message.friendPetId.low >>> 0, message.friendPetId.high >>> 0).toNumber() : message.friendPetId);
        null != message.friendPetLevel && message.hasOwnProperty("friendPetLevel") && (object.friendPetLevel = message.friendPetLevel);
        null != message.friendPetExp && message.hasOwnProperty("friendPetExp") && (object.friendPetExp = message.friendPetExp);
        null != message.interactUserProfile && message.hasOwnProperty("interactUserProfile") && (object.interactUserProfile = $root.UserProfile.toObject(message.interactUserProfile, options));
        null != message.userSourceTagType && message.hasOwnProperty("userSourceTagType") && (object.userSourceTagType = message.userSourceTagType);
        null != message.userInteractTagType && message.hasOwnProperty("userInteractTagType") && (object.userInteractTagType = message.userInteractTagType);
        return object;
      };
      FriendShortcutInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return FriendShortcutInfo;
    }();
    $root.REQ_PickFruit = function() {
      function REQ_PickFruit(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_PickFruit.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_PickFruit.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_PickFruit.create = function create(properties) {
        return new REQ_PickFruit(properties);
      };
      REQ_PickFruit.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        writer.uint32(16).int64(message.petId);
        return writer;
      };
      REQ_PickFruit.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_PickFruit.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_PickFruit();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      REQ_PickFruit.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_PickFruit.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      REQ_PickFruit.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_PickFruit) return object;
        var message = new $root.REQ_PickFruit();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      REQ_PickFruit.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long17 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long17.toString() : options.longs === Number ? _long17.toNumber() : _long17;
          } else object.userId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long17 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long17.toString() : options.longs === Number ? _long17.toNumber() : _long17;
          } else object.petId = options.longs === String ? "0" : 0;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      REQ_PickFruit.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_PickFruit;
    }();
    $root.RESP_PickFruit = function() {
      function RESP_PickFruit(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_PickFruit.prototype.fruitTree = null;
      RESP_PickFruit.create = function create(properties) {
        return new RESP_PickFruit(properties);
      };
      RESP_PickFruit.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.FruitTree.encode(message.fruitTree, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_PickFruit.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_PickFruit.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_PickFruit();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.fruitTree = $root.FruitTree.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("fruitTree")) throw $util.ProtocolError("missing required 'fruitTree'", {
          instance: message
        });
        return message;
      };
      RESP_PickFruit.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_PickFruit.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var error = $root.FruitTree.verify(message.fruitTree);
        if (error) return "fruitTree." + error;
        return null;
      };
      RESP_PickFruit.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_PickFruit) return object;
        var message = new $root.RESP_PickFruit();
        if (null != object.fruitTree) {
          if ("object" !== typeof object.fruitTree) throw TypeError(".RESP_PickFruit.fruitTree: object expected");
          message.fruitTree = $root.FruitTree.fromObject(object.fruitTree);
        }
        return message;
      };
      RESP_PickFruit.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.fruitTree = null);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && (object.fruitTree = $root.FruitTree.toObject(message.fruitTree, options));
        return object;
      };
      RESP_PickFruit.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_PickFruit;
    }();
    $root.PUSH_StealFruit = function() {
      function PUSH_StealFruit(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_StealFruit.prototype.fruitTree = null;
      PUSH_StealFruit.create = function create(properties) {
        return new PUSH_StealFruit(properties);
      };
      PUSH_StealFruit.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.FruitTree.encode(message.fruitTree, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      PUSH_StealFruit.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_StealFruit.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_StealFruit();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.fruitTree = $root.FruitTree.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("fruitTree")) throw $util.ProtocolError("missing required 'fruitTree'", {
          instance: message
        });
        return message;
      };
      PUSH_StealFruit.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_StealFruit.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var error = $root.FruitTree.verify(message.fruitTree);
        if (error) return "fruitTree." + error;
        return null;
      };
      PUSH_StealFruit.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_StealFruit) return object;
        var message = new $root.PUSH_StealFruit();
        if (null != object.fruitTree) {
          if ("object" !== typeof object.fruitTree) throw TypeError(".PUSH_StealFruit.fruitTree: object expected");
          message.fruitTree = $root.FruitTree.fromObject(object.fruitTree);
        }
        return message;
      };
      PUSH_StealFruit.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.fruitTree = null);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && (object.fruitTree = $root.FruitTree.toObject(message.fruitTree, options));
        return object;
      };
      PUSH_StealFruit.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_StealFruit;
    }();
    $root.REQ_GetFruitTree = function() {
      function REQ_GetFruitTree(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_GetFruitTree.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_GetFruitTree.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_GetFruitTree.create = function create(properties) {
        return new REQ_GetFruitTree(properties);
      };
      REQ_GetFruitTree.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        writer.uint32(16).int64(message.petId);
        return writer;
      };
      REQ_GetFruitTree.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_GetFruitTree.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_GetFruitTree();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      REQ_GetFruitTree.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_GetFruitTree.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      REQ_GetFruitTree.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_GetFruitTree) return object;
        var message = new $root.REQ_GetFruitTree();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      REQ_GetFruitTree.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long18 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long18.toString() : options.longs === Number ? _long18.toNumber() : _long18;
          } else object.userId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long18 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long18.toString() : options.longs === Number ? _long18.toNumber() : _long18;
          } else object.petId = options.longs === String ? "0" : 0;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      REQ_GetFruitTree.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_GetFruitTree;
    }();
    $root.RESP_GetFruitTree = function() {
      function RESP_GetFruitTree(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_GetFruitTree.prototype.fruitTree = null;
      RESP_GetFruitTree.create = function create(properties) {
        return new RESP_GetFruitTree(properties);
      };
      RESP_GetFruitTree.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.FruitTree.encode(message.fruitTree, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_GetFruitTree.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_GetFruitTree.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_GetFruitTree();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.fruitTree = $root.FruitTree.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("fruitTree")) throw $util.ProtocolError("missing required 'fruitTree'", {
          instance: message
        });
        return message;
      };
      RESP_GetFruitTree.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_GetFruitTree.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        var error = $root.FruitTree.verify(message.fruitTree);
        if (error) return "fruitTree." + error;
        return null;
      };
      RESP_GetFruitTree.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_GetFruitTree) return object;
        var message = new $root.RESP_GetFruitTree();
        if (null != object.fruitTree) {
          if ("object" !== typeof object.fruitTree) throw TypeError(".RESP_GetFruitTree.fruitTree: object expected");
          message.fruitTree = $root.FruitTree.fromObject(object.fruitTree);
        }
        return message;
      };
      RESP_GetFruitTree.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.fruitTree = null);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && (object.fruitTree = $root.FruitTree.toObject(message.fruitTree, options));
        return object;
      };
      RESP_GetFruitTree.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_GetFruitTree;
    }();
    $root.REQ_FurnitureReplace = function() {
      function REQ_FurnitureReplace(properties) {
        this.furniture = [];
        this.addFurniture = [];
        this.postPropRecognizedId = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_FurnitureReplace.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_FurnitureReplace.prototype.furniture = $util.emptyArray;
      REQ_FurnitureReplace.prototype.addFurniture = $util.emptyArray;
      REQ_FurnitureReplace.prototype.postPropRecognizedId = $util.emptyArray;
      REQ_FurnitureReplace.create = function create(properties) {
        return new REQ_FurnitureReplace(properties);
      };
      REQ_FurnitureReplace.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.petId);
        if (null != message.furniture && message.furniture.length) for (var i = 0; i < message.furniture.length; ++i) $root.Furniture.encode(message.furniture[i], writer.uint32(18).fork()).ldelim();
        if (null != message.addFurniture && message.addFurniture.length) for (var i = 0; i < message.addFurniture.length; ++i) $root.Furniture.encode(message.addFurniture[i], writer.uint32(26).fork()).ldelim();
        if (null != message.postPropRecognizedId && message.postPropRecognizedId.length) for (var i = 0; i < message.postPropRecognizedId.length; ++i) writer.uint32(32).int64(message.postPropRecognizedId[i]);
        return writer;
      };
      REQ_FurnitureReplace.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_FurnitureReplace.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_FurnitureReplace();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petId = reader.int64();
            break;

           case 2:
            message.furniture && message.furniture.length || (message.furniture = []);
            message.furniture.push($root.Furniture.decode(reader, reader.uint32()));
            break;

           case 3:
            message.addFurniture && message.addFurniture.length || (message.addFurniture = []);
            message.addFurniture.push($root.Furniture.decode(reader, reader.uint32()));
            break;

           case 4:
            message.postPropRecognizedId && message.postPropRecognizedId.length || (message.postPropRecognizedId = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.postPropRecognizedId.push(reader.int64());
            } else message.postPropRecognizedId.push(reader.int64());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      REQ_FurnitureReplace.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_FurnitureReplace.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (null != message.furniture && message.hasOwnProperty("furniture")) {
          if (!Array.isArray(message.furniture)) return "furniture: array expected";
          for (var i = 0; i < message.furniture.length; ++i) {
            var error = $root.Furniture.verify(message.furniture[i]);
            if (error) return "furniture." + error;
          }
        }
        if (null != message.addFurniture && message.hasOwnProperty("addFurniture")) {
          if (!Array.isArray(message.addFurniture)) return "addFurniture: array expected";
          for (var i = 0; i < message.addFurniture.length; ++i) {
            var error = $root.Furniture.verify(message.addFurniture[i]);
            if (error) return "addFurniture." + error;
          }
        }
        if (null != message.postPropRecognizedId && message.hasOwnProperty("postPropRecognizedId")) {
          if (!Array.isArray(message.postPropRecognizedId)) return "postPropRecognizedId: array expected";
          for (var i = 0; i < message.postPropRecognizedId.length; ++i) if (!$util.isInteger(message.postPropRecognizedId[i]) && !(message.postPropRecognizedId[i] && $util.isInteger(message.postPropRecognizedId[i].low) && $util.isInteger(message.postPropRecognizedId[i].high))) return "postPropRecognizedId: integer|Long[] expected";
        }
        return null;
      };
      REQ_FurnitureReplace.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_FurnitureReplace) return object;
        var message = new $root.REQ_FurnitureReplace();
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        if (object.furniture) {
          if (!Array.isArray(object.furniture)) throw TypeError(".REQ_FurnitureReplace.furniture: array expected");
          message.furniture = [];
          for (var i = 0; i < object.furniture.length; ++i) {
            if ("object" !== typeof object.furniture[i]) throw TypeError(".REQ_FurnitureReplace.furniture: object expected");
            message.furniture[i] = $root.Furniture.fromObject(object.furniture[i]);
          }
        }
        if (object.addFurniture) {
          if (!Array.isArray(object.addFurniture)) throw TypeError(".REQ_FurnitureReplace.addFurniture: array expected");
          message.addFurniture = [];
          for (var i = 0; i < object.addFurniture.length; ++i) {
            if ("object" !== typeof object.addFurniture[i]) throw TypeError(".REQ_FurnitureReplace.addFurniture: object expected");
            message.addFurniture[i] = $root.Furniture.fromObject(object.addFurniture[i]);
          }
        }
        if (object.postPropRecognizedId) {
          if (!Array.isArray(object.postPropRecognizedId)) throw TypeError(".REQ_FurnitureReplace.postPropRecognizedId: array expected");
          message.postPropRecognizedId = [];
          for (var i = 0; i < object.postPropRecognizedId.length; ++i) $util.Long ? (message.postPropRecognizedId[i] = $util.Long.fromValue(object.postPropRecognizedId[i])).unsigned = false : "string" === typeof object.postPropRecognizedId[i] ? message.postPropRecognizedId[i] = parseInt(object.postPropRecognizedId[i], 10) : "number" === typeof object.postPropRecognizedId[i] ? message.postPropRecognizedId[i] = object.postPropRecognizedId[i] : "object" === typeof object.postPropRecognizedId[i] && (message.postPropRecognizedId[i] = new $util.LongBits(object.postPropRecognizedId[i].low >>> 0, object.postPropRecognizedId[i].high >>> 0).toNumber());
        }
        return message;
      };
      REQ_FurnitureReplace.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.arrays || options.defaults) {
          object.furniture = [];
          object.addFurniture = [];
          object.postPropRecognizedId = [];
        }
        if (options.defaults) if ($util.Long) {
          var _long19 = new $util.Long(0, 0, false);
          object.petId = options.longs === String ? _long19.toString() : options.longs === Number ? _long19.toNumber() : _long19;
        } else object.petId = options.longs === String ? "0" : 0;
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        if (message.furniture && message.furniture.length) {
          object.furniture = [];
          for (var j = 0; j < message.furniture.length; ++j) object.furniture[j] = $root.Furniture.toObject(message.furniture[j], options);
        }
        if (message.addFurniture && message.addFurniture.length) {
          object.addFurniture = [];
          for (var j = 0; j < message.addFurniture.length; ++j) object.addFurniture[j] = $root.Furniture.toObject(message.addFurniture[j], options);
        }
        if (message.postPropRecognizedId && message.postPropRecognizedId.length) {
          object.postPropRecognizedId = [];
          for (var j = 0; j < message.postPropRecognizedId.length; ++j) "number" === typeof message.postPropRecognizedId[j] ? object.postPropRecognizedId[j] = options.longs === String ? String(message.postPropRecognizedId[j]) : message.postPropRecognizedId[j] : object.postPropRecognizedId[j] = options.longs === String ? $util.Long.prototype.toString.call(message.postPropRecognizedId[j]) : options.longs === Number ? new $util.LongBits(message.postPropRecognizedId[j].low >>> 0, message.postPropRecognizedId[j].high >>> 0).toNumber() : message.postPropRecognizedId[j];
        }
        return object;
      };
      REQ_FurnitureReplace.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_FurnitureReplace;
    }();
    $root.RESP_FurnitureReplace = function() {
      function RESP_FurnitureReplace(properties) {
        this.addFurniture = [];
        this.postPropRecognizedId = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_FurnitureReplace.prototype.fruitTree = null;
      RESP_FurnitureReplace.prototype.addFurniture = $util.emptyArray;
      RESP_FurnitureReplace.prototype.postPropRecognizedId = $util.emptyArray;
      RESP_FurnitureReplace.create = function create(properties) {
        return new RESP_FurnitureReplace(properties);
      };
      RESP_FurnitureReplace.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && $root.FruitTree.encode(message.fruitTree, writer.uint32(10).fork()).ldelim();
        if (null != message.addFurniture && message.addFurniture.length) for (var i = 0; i < message.addFurniture.length; ++i) $root.Furniture.encode(message.addFurniture[i], writer.uint32(18).fork()).ldelim();
        if (null != message.postPropRecognizedId && message.postPropRecognizedId.length) for (var i = 0; i < message.postPropRecognizedId.length; ++i) writer.uint32(24).int64(message.postPropRecognizedId[i]);
        return writer;
      };
      RESP_FurnitureReplace.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_FurnitureReplace.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_FurnitureReplace();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.fruitTree = $root.FruitTree.decode(reader, reader.uint32());
            break;

           case 2:
            message.addFurniture && message.addFurniture.length || (message.addFurniture = []);
            message.addFurniture.push($root.Furniture.decode(reader, reader.uint32()));
            break;

           case 3:
            message.postPropRecognizedId && message.postPropRecognizedId.length || (message.postPropRecognizedId = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.postPropRecognizedId.push(reader.int64());
            } else message.postPropRecognizedId.push(reader.int64());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_FurnitureReplace.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_FurnitureReplace.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.fruitTree && message.hasOwnProperty("fruitTree")) {
          var error = $root.FruitTree.verify(message.fruitTree);
          if (error) return "fruitTree." + error;
        }
        if (null != message.addFurniture && message.hasOwnProperty("addFurniture")) {
          if (!Array.isArray(message.addFurniture)) return "addFurniture: array expected";
          for (var i = 0; i < message.addFurniture.length; ++i) {
            var error = $root.Furniture.verify(message.addFurniture[i]);
            if (error) return "addFurniture." + error;
          }
        }
        if (null != message.postPropRecognizedId && message.hasOwnProperty("postPropRecognizedId")) {
          if (!Array.isArray(message.postPropRecognizedId)) return "postPropRecognizedId: array expected";
          for (var i = 0; i < message.postPropRecognizedId.length; ++i) if (!$util.isInteger(message.postPropRecognizedId[i]) && !(message.postPropRecognizedId[i] && $util.isInteger(message.postPropRecognizedId[i].low) && $util.isInteger(message.postPropRecognizedId[i].high))) return "postPropRecognizedId: integer|Long[] expected";
        }
        return null;
      };
      RESP_FurnitureReplace.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_FurnitureReplace) return object;
        var message = new $root.RESP_FurnitureReplace();
        if (null != object.fruitTree) {
          if ("object" !== typeof object.fruitTree) throw TypeError(".RESP_FurnitureReplace.fruitTree: object expected");
          message.fruitTree = $root.FruitTree.fromObject(object.fruitTree);
        }
        if (object.addFurniture) {
          if (!Array.isArray(object.addFurniture)) throw TypeError(".RESP_FurnitureReplace.addFurniture: array expected");
          message.addFurniture = [];
          for (var i = 0; i < object.addFurniture.length; ++i) {
            if ("object" !== typeof object.addFurniture[i]) throw TypeError(".RESP_FurnitureReplace.addFurniture: object expected");
            message.addFurniture[i] = $root.Furniture.fromObject(object.addFurniture[i]);
          }
        }
        if (object.postPropRecognizedId) {
          if (!Array.isArray(object.postPropRecognizedId)) throw TypeError(".RESP_FurnitureReplace.postPropRecognizedId: array expected");
          message.postPropRecognizedId = [];
          for (var i = 0; i < object.postPropRecognizedId.length; ++i) $util.Long ? (message.postPropRecognizedId[i] = $util.Long.fromValue(object.postPropRecognizedId[i])).unsigned = false : "string" === typeof object.postPropRecognizedId[i] ? message.postPropRecognizedId[i] = parseInt(object.postPropRecognizedId[i], 10) : "number" === typeof object.postPropRecognizedId[i] ? message.postPropRecognizedId[i] = object.postPropRecognizedId[i] : "object" === typeof object.postPropRecognizedId[i] && (message.postPropRecognizedId[i] = new $util.LongBits(object.postPropRecognizedId[i].low >>> 0, object.postPropRecognizedId[i].high >>> 0).toNumber());
        }
        return message;
      };
      RESP_FurnitureReplace.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.arrays || options.defaults) {
          object.addFurniture = [];
          object.postPropRecognizedId = [];
        }
        options.defaults && (object.fruitTree = null);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && (object.fruitTree = $root.FruitTree.toObject(message.fruitTree, options));
        if (message.addFurniture && message.addFurniture.length) {
          object.addFurniture = [];
          for (var j = 0; j < message.addFurniture.length; ++j) object.addFurniture[j] = $root.Furniture.toObject(message.addFurniture[j], options);
        }
        if (message.postPropRecognizedId && message.postPropRecognizedId.length) {
          object.postPropRecognizedId = [];
          for (var j = 0; j < message.postPropRecognizedId.length; ++j) "number" === typeof message.postPropRecognizedId[j] ? object.postPropRecognizedId[j] = options.longs === String ? String(message.postPropRecognizedId[j]) : message.postPropRecognizedId[j] : object.postPropRecognizedId[j] = options.longs === String ? $util.Long.prototype.toString.call(message.postPropRecognizedId[j]) : options.longs === Number ? new $util.LongBits(message.postPropRecognizedId[j].low >>> 0, message.postPropRecognizedId[j].high >>> 0).toNumber() : message.postPropRecognizedId[j];
        }
        return object;
      };
      RESP_FurnitureReplace.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_FurnitureReplace;
    }();
    $root.REQ_GameData = function() {
      function REQ_GameData(properties) {
        this.userId = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_GameData.prototype.userId = $util.emptyArray;
      REQ_GameData.create = function create(properties) {
        return new REQ_GameData(properties);
      };
      REQ_GameData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.userId && message.userId.length) for (var i = 0; i < message.userId.length; ++i) writer.uint32(8).int64(message.userId[i]);
        return writer;
      };
      REQ_GameData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_GameData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_GameData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId && message.userId.length || (message.userId = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.userId.push(reader.int64());
            } else message.userId.push(reader.int64());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      REQ_GameData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_GameData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userId && message.hasOwnProperty("userId")) {
          if (!Array.isArray(message.userId)) return "userId: array expected";
          for (var i = 0; i < message.userId.length; ++i) if (!$util.isInteger(message.userId[i]) && !(message.userId[i] && $util.isInteger(message.userId[i].low) && $util.isInteger(message.userId[i].high))) return "userId: integer|Long[] expected";
        }
        return null;
      };
      REQ_GameData.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_GameData) return object;
        var message = new $root.REQ_GameData();
        if (object.userId) {
          if (!Array.isArray(object.userId)) throw TypeError(".REQ_GameData.userId: array expected");
          message.userId = [];
          for (var i = 0; i < object.userId.length; ++i) $util.Long ? (message.userId[i] = $util.Long.fromValue(object.userId[i])).unsigned = false : "string" === typeof object.userId[i] ? message.userId[i] = parseInt(object.userId[i], 10) : "number" === typeof object.userId[i] ? message.userId[i] = object.userId[i] : "object" === typeof object.userId[i] && (message.userId[i] = new $util.LongBits(object.userId[i].low >>> 0, object.userId[i].high >>> 0).toNumber());
        }
        return message;
      };
      REQ_GameData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.userId = []);
        if (message.userId && message.userId.length) {
          object.userId = [];
          for (var j = 0; j < message.userId.length; ++j) "number" === typeof message.userId[j] ? object.userId[j] = options.longs === String ? String(message.userId[j]) : message.userId[j] : object.userId[j] = options.longs === String ? $util.Long.prototype.toString.call(message.userId[j]) : options.longs === Number ? new $util.LongBits(message.userId[j].low >>> 0, message.userId[j].high >>> 0).toNumber() : message.userId[j];
        }
        return object;
      };
      REQ_GameData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_GameData;
    }();
    $root.RESP_GameData = function() {
      function RESP_GameData(properties) {
        this.userGameDataList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_GameData.prototype.userGameDataList = $util.emptyArray;
      RESP_GameData.create = function create(properties) {
        return new RESP_GameData(properties);
      };
      RESP_GameData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.userGameDataList && message.userGameDataList.length) for (var i = 0; i < message.userGameDataList.length; ++i) $root.UserGameData.encode(message.userGameDataList[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_GameData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_GameData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_GameData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userGameDataList && message.userGameDataList.length || (message.userGameDataList = []);
            message.userGameDataList.push($root.UserGameData.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_GameData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_GameData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userGameDataList && message.hasOwnProperty("userGameDataList")) {
          if (!Array.isArray(message.userGameDataList)) return "userGameDataList: array expected";
          for (var i = 0; i < message.userGameDataList.length; ++i) {
            var error = $root.UserGameData.verify(message.userGameDataList[i]);
            if (error) return "userGameDataList." + error;
          }
        }
        return null;
      };
      RESP_GameData.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_GameData) return object;
        var message = new $root.RESP_GameData();
        if (object.userGameDataList) {
          if (!Array.isArray(object.userGameDataList)) throw TypeError(".RESP_GameData.userGameDataList: array expected");
          message.userGameDataList = [];
          for (var i = 0; i < object.userGameDataList.length; ++i) {
            if ("object" !== typeof object.userGameDataList[i]) throw TypeError(".RESP_GameData.userGameDataList: object expected");
            message.userGameDataList[i] = $root.UserGameData.fromObject(object.userGameDataList[i]);
          }
        }
        return message;
      };
      RESP_GameData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.userGameDataList = []);
        if (message.userGameDataList && message.userGameDataList.length) {
          object.userGameDataList = [];
          for (var j = 0; j < message.userGameDataList.length; ++j) object.userGameDataList[j] = $root.UserGameData.toObject(message.userGameDataList[j], options);
        }
        return object;
      };
      RESP_GameData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_GameData;
    }();
    $root.UserGameData = function() {
      function UserGameData(properties) {
        this.petDataList = [];
        this.userPropList = [];
        this.helpFeedingList = [];
        this.userBubbleList = [];
        this.noticeList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserGameData.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserGameData.prototype.petDataList = $util.emptyArray;
      UserGameData.prototype.helpFeedingNum = 0;
      UserGameData.prototype.userPropList = $util.emptyArray;
      UserGameData.prototype.userProfile = null;
      UserGameData.prototype.helpFeedingList = $util.emptyArray;
      UserGameData.prototype.userBubbleList = $util.emptyArray;
      UserGameData.prototype.noticeList = $util.emptyArray;
      UserGameData.prototype.guidance = "";
      UserGameData.create = function create(properties) {
        return new UserGameData(properties);
      };
      UserGameData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        if (null != message.petDataList && message.petDataList.length) for (var i = 0; i < message.petDataList.length; ++i) $root.PetData.encode(message.petDataList[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).int32(message.helpFeedingNum);
        if (null != message.userPropList && message.userPropList.length) for (var i = 0; i < message.userPropList.length; ++i) $root.UserProp.encode(message.userPropList[i], writer.uint32(34).fork()).ldelim();
        $root.UserProfile.encode(message.userProfile, writer.uint32(42).fork()).ldelim();
        if (null != message.helpFeedingList && message.helpFeedingList.length) for (var i = 0; i < message.helpFeedingList.length; ++i) writer.uint32(48).int64(message.helpFeedingList[i]);
        if (null != message.userBubbleList && message.userBubbleList.length) for (var i = 0; i < message.userBubbleList.length; ++i) $root.UserBubble.encode(message.userBubbleList[i], writer.uint32(58).fork()).ldelim();
        if (null != message.noticeList && message.noticeList.length) for (var i = 0; i < message.noticeList.length; ++i) $root.Notice.encode(message.noticeList[i], writer.uint32(66).fork()).ldelim();
        null != message.guidance && message.hasOwnProperty("guidance") && writer.uint32(74).string(message.guidance);
        return writer;
      };
      UserGameData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserGameData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserGameData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petDataList && message.petDataList.length || (message.petDataList = []);
            message.petDataList.push($root.PetData.decode(reader, reader.uint32()));
            break;

           case 3:
            message.helpFeedingNum = reader.int32();
            break;

           case 4:
            message.userPropList && message.userPropList.length || (message.userPropList = []);
            message.userPropList.push($root.UserProp.decode(reader, reader.uint32()));
            break;

           case 5:
            message.userProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 6:
            message.helpFeedingList && message.helpFeedingList.length || (message.helpFeedingList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.helpFeedingList.push(reader.int64());
            } else message.helpFeedingList.push(reader.int64());
            break;

           case 7:
            message.userBubbleList && message.userBubbleList.length || (message.userBubbleList = []);
            message.userBubbleList.push($root.UserBubble.decode(reader, reader.uint32()));
            break;

           case 8:
            message.noticeList && message.noticeList.length || (message.noticeList = []);
            message.noticeList.push($root.Notice.decode(reader, reader.uint32()));
            break;

           case 9:
            message.guidance = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("helpFeedingNum")) throw $util.ProtocolError("missing required 'helpFeedingNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("userProfile")) throw $util.ProtocolError("missing required 'userProfile'", {
          instance: message
        });
        return message;
      };
      UserGameData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserGameData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (null != message.petDataList && message.hasOwnProperty("petDataList")) {
          if (!Array.isArray(message.petDataList)) return "petDataList: array expected";
          for (var i = 0; i < message.petDataList.length; ++i) {
            var error = $root.PetData.verify(message.petDataList[i]);
            if (error) return "petDataList." + error;
          }
        }
        if (!$util.isInteger(message.helpFeedingNum)) return "helpFeedingNum: integer expected";
        if (null != message.userPropList && message.hasOwnProperty("userPropList")) {
          if (!Array.isArray(message.userPropList)) return "userPropList: array expected";
          for (var i = 0; i < message.userPropList.length; ++i) {
            var error = $root.UserProp.verify(message.userPropList[i]);
            if (error) return "userPropList." + error;
          }
        }
        var error = $root.UserProfile.verify(message.userProfile);
        if (error) return "userProfile." + error;
        if (null != message.helpFeedingList && message.hasOwnProperty("helpFeedingList")) {
          if (!Array.isArray(message.helpFeedingList)) return "helpFeedingList: array expected";
          for (var i = 0; i < message.helpFeedingList.length; ++i) if (!$util.isInteger(message.helpFeedingList[i]) && !(message.helpFeedingList[i] && $util.isInteger(message.helpFeedingList[i].low) && $util.isInteger(message.helpFeedingList[i].high))) return "helpFeedingList: integer|Long[] expected";
        }
        if (null != message.userBubbleList && message.hasOwnProperty("userBubbleList")) {
          if (!Array.isArray(message.userBubbleList)) return "userBubbleList: array expected";
          for (var i = 0; i < message.userBubbleList.length; ++i) {
            var error = $root.UserBubble.verify(message.userBubbleList[i]);
            if (error) return "userBubbleList." + error;
          }
        }
        if (null != message.noticeList && message.hasOwnProperty("noticeList")) {
          if (!Array.isArray(message.noticeList)) return "noticeList: array expected";
          for (var i = 0; i < message.noticeList.length; ++i) {
            var error = $root.Notice.verify(message.noticeList[i]);
            if (error) return "noticeList." + error;
          }
        }
        if (null != message.guidance && message.hasOwnProperty("guidance") && !$util.isString(message.guidance)) return "guidance: string expected";
        return null;
      };
      UserGameData.fromObject = function fromObject(object) {
        if (object instanceof $root.UserGameData) return object;
        var message = new $root.UserGameData();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        if (object.petDataList) {
          if (!Array.isArray(object.petDataList)) throw TypeError(".UserGameData.petDataList: array expected");
          message.petDataList = [];
          for (var i = 0; i < object.petDataList.length; ++i) {
            if ("object" !== typeof object.petDataList[i]) throw TypeError(".UserGameData.petDataList: object expected");
            message.petDataList[i] = $root.PetData.fromObject(object.petDataList[i]);
          }
        }
        null != object.helpFeedingNum && (message.helpFeedingNum = 0 | object.helpFeedingNum);
        if (object.userPropList) {
          if (!Array.isArray(object.userPropList)) throw TypeError(".UserGameData.userPropList: array expected");
          message.userPropList = [];
          for (var i = 0; i < object.userPropList.length; ++i) {
            if ("object" !== typeof object.userPropList[i]) throw TypeError(".UserGameData.userPropList: object expected");
            message.userPropList[i] = $root.UserProp.fromObject(object.userPropList[i]);
          }
        }
        if (null != object.userProfile) {
          if ("object" !== typeof object.userProfile) throw TypeError(".UserGameData.userProfile: object expected");
          message.userProfile = $root.UserProfile.fromObject(object.userProfile);
        }
        if (object.helpFeedingList) {
          if (!Array.isArray(object.helpFeedingList)) throw TypeError(".UserGameData.helpFeedingList: array expected");
          message.helpFeedingList = [];
          for (var i = 0; i < object.helpFeedingList.length; ++i) $util.Long ? (message.helpFeedingList[i] = $util.Long.fromValue(object.helpFeedingList[i])).unsigned = false : "string" === typeof object.helpFeedingList[i] ? message.helpFeedingList[i] = parseInt(object.helpFeedingList[i], 10) : "number" === typeof object.helpFeedingList[i] ? message.helpFeedingList[i] = object.helpFeedingList[i] : "object" === typeof object.helpFeedingList[i] && (message.helpFeedingList[i] = new $util.LongBits(object.helpFeedingList[i].low >>> 0, object.helpFeedingList[i].high >>> 0).toNumber());
        }
        if (object.userBubbleList) {
          if (!Array.isArray(object.userBubbleList)) throw TypeError(".UserGameData.userBubbleList: array expected");
          message.userBubbleList = [];
          for (var i = 0; i < object.userBubbleList.length; ++i) {
            if ("object" !== typeof object.userBubbleList[i]) throw TypeError(".UserGameData.userBubbleList: object expected");
            message.userBubbleList[i] = $root.UserBubble.fromObject(object.userBubbleList[i]);
          }
        }
        if (object.noticeList) {
          if (!Array.isArray(object.noticeList)) throw TypeError(".UserGameData.noticeList: array expected");
          message.noticeList = [];
          for (var i = 0; i < object.noticeList.length; ++i) {
            if ("object" !== typeof object.noticeList[i]) throw TypeError(".UserGameData.noticeList: object expected");
            message.noticeList[i] = $root.Notice.fromObject(object.noticeList[i]);
          }
        }
        null != object.guidance && (message.guidance = String(object.guidance));
        return message;
      };
      UserGameData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.arrays || options.defaults) {
          object.petDataList = [];
          object.userPropList = [];
          object.helpFeedingList = [];
          object.userBubbleList = [];
          object.noticeList = [];
        }
        if (options.defaults) {
          if ($util.Long) {
            var _long20 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long20.toString() : options.longs === Number ? _long20.toNumber() : _long20;
          } else object.userId = options.longs === String ? "0" : 0;
          object.helpFeedingNum = 0;
          object.userProfile = null;
          object.guidance = "";
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        if (message.petDataList && message.petDataList.length) {
          object.petDataList = [];
          for (var j = 0; j < message.petDataList.length; ++j) object.petDataList[j] = $root.PetData.toObject(message.petDataList[j], options);
        }
        null != message.helpFeedingNum && message.hasOwnProperty("helpFeedingNum") && (object.helpFeedingNum = message.helpFeedingNum);
        if (message.userPropList && message.userPropList.length) {
          object.userPropList = [];
          for (var j = 0; j < message.userPropList.length; ++j) object.userPropList[j] = $root.UserProp.toObject(message.userPropList[j], options);
        }
        null != message.userProfile && message.hasOwnProperty("userProfile") && (object.userProfile = $root.UserProfile.toObject(message.userProfile, options));
        if (message.helpFeedingList && message.helpFeedingList.length) {
          object.helpFeedingList = [];
          for (var j = 0; j < message.helpFeedingList.length; ++j) "number" === typeof message.helpFeedingList[j] ? object.helpFeedingList[j] = options.longs === String ? String(message.helpFeedingList[j]) : message.helpFeedingList[j] : object.helpFeedingList[j] = options.longs === String ? $util.Long.prototype.toString.call(message.helpFeedingList[j]) : options.longs === Number ? new $util.LongBits(message.helpFeedingList[j].low >>> 0, message.helpFeedingList[j].high >>> 0).toNumber() : message.helpFeedingList[j];
        }
        if (message.userBubbleList && message.userBubbleList.length) {
          object.userBubbleList = [];
          for (var j = 0; j < message.userBubbleList.length; ++j) object.userBubbleList[j] = $root.UserBubble.toObject(message.userBubbleList[j], options);
        }
        if (message.noticeList && message.noticeList.length) {
          object.noticeList = [];
          for (var j = 0; j < message.noticeList.length; ++j) object.noticeList[j] = $root.Notice.toObject(message.noticeList[j], options);
        }
        null != message.guidance && message.hasOwnProperty("guidance") && (object.guidance = message.guidance);
        return object;
      };
      UserGameData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserGameData;
    }();
    $root.UserProp = function() {
      function UserProp(properties) {
        this.propDeleteTime = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserProp.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProp.prototype.propType = 0;
      UserProp.prototype.propId = 0;
      UserProp.prototype.propNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProp.prototype.propData = "";
      UserProp.prototype.propDeleteTime = $util.emptyArray;
      UserProp.prototype.redPointCount = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProp.prototype.status = false;
      UserProp.create = function create(properties) {
        return new UserProp(properties);
      };
      UserProp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.userId && message.hasOwnProperty("userId") && writer.uint32(16).int64(message.userId);
        writer.uint32(24).int32(message.propType);
        writer.uint32(32).int32(message.propId);
        writer.uint32(40).int64(message.propNum);
        null != message.propData && message.hasOwnProperty("propData") && writer.uint32(50).string(message.propData);
        if (null != message.propDeleteTime && message.propDeleteTime.length) for (var i = 0; i < message.propDeleteTime.length; ++i) writer.uint32(56).int64(message.propDeleteTime[i]);
        null != message.redPointCount && message.hasOwnProperty("redPointCount") && writer.uint32(64).int64(message.redPointCount);
        null != message.status && message.hasOwnProperty("status") && writer.uint32(72).bool(message.status);
        return writer;
      };
      UserProp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserProp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserProp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.userId = reader.int64();
            break;

           case 3:
            message.propType = reader.int32();
            break;

           case 4:
            message.propId = reader.int32();
            break;

           case 5:
            message.propNum = reader.int64();
            break;

           case 6:
            message.propData = reader.string();
            break;

           case 7:
            message.propDeleteTime && message.propDeleteTime.length || (message.propDeleteTime = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.propDeleteTime.push(reader.int64());
            } else message.propDeleteTime.push(reader.int64());
            break;

           case 8:
            message.redPointCount = reader.int64();
            break;

           case 9:
            message.status = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("propType")) throw $util.ProtocolError("missing required 'propType'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propNum")) throw $util.ProtocolError("missing required 'propNum'", {
          instance: message
        });
        return message;
      };
      UserProp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserProp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userId && message.hasOwnProperty("userId") && !$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.propType)) return "propType: integer expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        if (!$util.isInteger(message.propNum) && !(message.propNum && $util.isInteger(message.propNum.low) && $util.isInteger(message.propNum.high))) return "propNum: integer|Long expected";
        if (null != message.propData && message.hasOwnProperty("propData") && !$util.isString(message.propData)) return "propData: string expected";
        if (null != message.propDeleteTime && message.hasOwnProperty("propDeleteTime")) {
          if (!Array.isArray(message.propDeleteTime)) return "propDeleteTime: array expected";
          for (var i = 0; i < message.propDeleteTime.length; ++i) if (!$util.isInteger(message.propDeleteTime[i]) && !(message.propDeleteTime[i] && $util.isInteger(message.propDeleteTime[i].low) && $util.isInteger(message.propDeleteTime[i].high))) return "propDeleteTime: integer|Long[] expected";
        }
        if (null != message.redPointCount && message.hasOwnProperty("redPointCount") && !$util.isInteger(message.redPointCount) && !(message.redPointCount && $util.isInteger(message.redPointCount.low) && $util.isInteger(message.redPointCount.high))) return "redPointCount: integer|Long expected";
        if (null != message.status && message.hasOwnProperty("status") && "boolean" !== typeof message.status) return "status: boolean expected";
        return null;
      };
      UserProp.fromObject = function fromObject(object) {
        if (object instanceof $root.UserProp) return object;
        var message = new $root.UserProp();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.propType && (message.propType = 0 | object.propType);
        null != object.propId && (message.propId = 0 | object.propId);
        null != object.propNum && ($util.Long ? (message.propNum = $util.Long.fromValue(object.propNum)).unsigned = false : "string" === typeof object.propNum ? message.propNum = parseInt(object.propNum, 10) : "number" === typeof object.propNum ? message.propNum = object.propNum : "object" === typeof object.propNum && (message.propNum = new $util.LongBits(object.propNum.low >>> 0, object.propNum.high >>> 0).toNumber()));
        null != object.propData && (message.propData = String(object.propData));
        if (object.propDeleteTime) {
          if (!Array.isArray(object.propDeleteTime)) throw TypeError(".UserProp.propDeleteTime: array expected");
          message.propDeleteTime = [];
          for (var i = 0; i < object.propDeleteTime.length; ++i) $util.Long ? (message.propDeleteTime[i] = $util.Long.fromValue(object.propDeleteTime[i])).unsigned = false : "string" === typeof object.propDeleteTime[i] ? message.propDeleteTime[i] = parseInt(object.propDeleteTime[i], 10) : "number" === typeof object.propDeleteTime[i] ? message.propDeleteTime[i] = object.propDeleteTime[i] : "object" === typeof object.propDeleteTime[i] && (message.propDeleteTime[i] = new $util.LongBits(object.propDeleteTime[i].low >>> 0, object.propDeleteTime[i].high >>> 0).toNumber());
        }
        null != object.redPointCount && ($util.Long ? (message.redPointCount = $util.Long.fromValue(object.redPointCount)).unsigned = false : "string" === typeof object.redPointCount ? message.redPointCount = parseInt(object.redPointCount, 10) : "number" === typeof object.redPointCount ? message.redPointCount = object.redPointCount : "object" === typeof object.redPointCount && (message.redPointCount = new $util.LongBits(object.redPointCount.low >>> 0, object.redPointCount.high >>> 0).toNumber()));
        null != object.status && (message.status = Boolean(object.status));
        return message;
      };
      UserProp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.propDeleteTime = []);
        if (options.defaults) {
          if ($util.Long) {
            var _long21 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long21.toString() : options.longs === Number ? _long21.toNumber() : _long21;
          } else object.userId = options.longs === String ? "0" : 0;
          object.propType = 0;
          object.propId = 0;
          if ($util.Long) {
            var _long21 = new $util.Long(0, 0, false);
            object.propNum = options.longs === String ? _long21.toString() : options.longs === Number ? _long21.toNumber() : _long21;
          } else object.propNum = options.longs === String ? "0" : 0;
          object.propData = "";
          if ($util.Long) {
            var _long21 = new $util.Long(0, 0, false);
            object.redPointCount = options.longs === String ? _long21.toString() : options.longs === Number ? _long21.toNumber() : _long21;
          } else object.redPointCount = options.longs === String ? "0" : 0;
          object.status = false;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.propType && message.hasOwnProperty("propType") && (object.propType = message.propType);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        null != message.propNum && message.hasOwnProperty("propNum") && ("number" === typeof message.propNum ? object.propNum = options.longs === String ? String(message.propNum) : message.propNum : object.propNum = options.longs === String ? $util.Long.prototype.toString.call(message.propNum) : options.longs === Number ? new $util.LongBits(message.propNum.low >>> 0, message.propNum.high >>> 0).toNumber() : message.propNum);
        null != message.propData && message.hasOwnProperty("propData") && (object.propData = message.propData);
        if (message.propDeleteTime && message.propDeleteTime.length) {
          object.propDeleteTime = [];
          for (var j = 0; j < message.propDeleteTime.length; ++j) "number" === typeof message.propDeleteTime[j] ? object.propDeleteTime[j] = options.longs === String ? String(message.propDeleteTime[j]) : message.propDeleteTime[j] : object.propDeleteTime[j] = options.longs === String ? $util.Long.prototype.toString.call(message.propDeleteTime[j]) : options.longs === Number ? new $util.LongBits(message.propDeleteTime[j].low >>> 0, message.propDeleteTime[j].high >>> 0).toNumber() : message.propDeleteTime[j];
        }
        null != message.redPointCount && message.hasOwnProperty("redPointCount") && ("number" === typeof message.redPointCount ? object.redPointCount = options.longs === String ? String(message.redPointCount) : message.redPointCount : object.redPointCount = options.longs === String ? $util.Long.prototype.toString.call(message.redPointCount) : options.longs === Number ? new $util.LongBits(message.redPointCount.low >>> 0, message.redPointCount.high >>> 0).toNumber() : message.redPointCount);
        null != message.status && message.hasOwnProperty("status") && (object.status = message.status);
        return object;
      };
      UserProp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserProp;
    }();
    $root.Notice = function() {
      function Notice(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Notice.prototype.id = 0;
      Notice.prototype.title = "";
      Notice.prototype.type = 0;
      Notice.prototype.content = "";
      Notice.prototype.timesLimit = 0;
      Notice.prototype.inCenter = false;
      Notice.prototype.miniUrl = "";
      Notice.create = function create(properties) {
        return new Notice(properties);
      };
      Notice.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.id);
        writer.uint32(18).string(message.title);
        writer.uint32(24).int32(message.type);
        writer.uint32(34).string(message.content);
        null != message.timesLimit && message.hasOwnProperty("timesLimit") && writer.uint32(40).int32(message.timesLimit);
        writer.uint32(48).bool(message.inCenter);
        writer.uint32(58).string(message.miniUrl);
        return writer;
      };
      Notice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Notice.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Notice();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int32();
            break;

           case 2:
            message.title = reader.string();
            break;

           case 3:
            message.type = reader.int32();
            break;

           case 4:
            message.content = reader.string();
            break;

           case 5:
            message.timesLimit = reader.int32();
            break;

           case 6:
            message.inCenter = reader.bool();
            break;

           case 7:
            message.miniUrl = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("title")) throw $util.ProtocolError("missing required 'title'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        if (!message.hasOwnProperty("inCenter")) throw $util.ProtocolError("missing required 'inCenter'", {
          instance: message
        });
        if (!message.hasOwnProperty("miniUrl")) throw $util.ProtocolError("missing required 'miniUrl'", {
          instance: message
        });
        return message;
      };
      Notice.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Notice.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.id)) return "id: integer expected";
        if (!$util.isString(message.title)) return "title: string expected";
        switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
         case 2:
        }
        if (!$util.isString(message.content)) return "content: string expected";
        if (null != message.timesLimit && message.hasOwnProperty("timesLimit") && !$util.isInteger(message.timesLimit)) return "timesLimit: integer expected";
        if ("boolean" !== typeof message.inCenter) return "inCenter: boolean expected";
        if (!$util.isString(message.miniUrl)) return "miniUrl: string expected";
        return null;
      };
      Notice.fromObject = function fromObject(object) {
        if (object instanceof $root.Notice) return object;
        var message = new $root.Notice();
        null != object.id && (message.id = 0 | object.id);
        null != object.title && (message.title = String(object.title));
        switch (object.type) {
         case "PICTURE":
         case 0:
          message.type = 0;
          break;

         case "TEXT":
         case 1:
          message.type = 1;
          break;

         case "OTHER":
         case 2:
          message.type = 2;
        }
        null != object.content && (message.content = String(object.content));
        null != object.timesLimit && (message.timesLimit = 0 | object.timesLimit);
        null != object.inCenter && (message.inCenter = Boolean(object.inCenter));
        null != object.miniUrl && (message.miniUrl = String(object.miniUrl));
        return message;
      };
      Notice.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.id = 0;
          object.title = "";
          object.type = options.enums === String ? "PICTURE" : 0;
          object.content = "";
          object.timesLimit = 0;
          object.inCenter = false;
          object.miniUrl = "";
        }
        null != message.id && message.hasOwnProperty("id") && (object.id = message.id);
        null != message.title && message.hasOwnProperty("title") && (object.title = message.title);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.Notice.NoticeContentType[message.type] : message.type);
        null != message.content && message.hasOwnProperty("content") && (object.content = message.content);
        null != message.timesLimit && message.hasOwnProperty("timesLimit") && (object.timesLimit = message.timesLimit);
        null != message.inCenter && message.hasOwnProperty("inCenter") && (object.inCenter = message.inCenter);
        null != message.miniUrl && message.hasOwnProperty("miniUrl") && (object.miniUrl = message.miniUrl);
        return object;
      };
      Notice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      Notice.NoticeContentType = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PICTURE"] = 0;
        values[valuesById[1] = "TEXT"] = 1;
        values[valuesById[2] = "OTHER"] = 2;
        return values;
      }();
      return Notice;
    }();
    $root.REQ_UpdateGuidance = function() {
      function REQ_UpdateGuidance(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_UpdateGuidance.prototype.guidance = "";
      REQ_UpdateGuidance.create = function create(properties) {
        return new REQ_UpdateGuidance(properties);
      };
      REQ_UpdateGuidance.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.guidance);
        return writer;
      };
      REQ_UpdateGuidance.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_UpdateGuidance.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_UpdateGuidance();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.guidance = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("guidance")) throw $util.ProtocolError("missing required 'guidance'", {
          instance: message
        });
        return message;
      };
      REQ_UpdateGuidance.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_UpdateGuidance.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isString(message.guidance)) return "guidance: string expected";
        return null;
      };
      REQ_UpdateGuidance.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_UpdateGuidance) return object;
        var message = new $root.REQ_UpdateGuidance();
        null != object.guidance && (message.guidance = String(object.guidance));
        return message;
      };
      REQ_UpdateGuidance.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.guidance = "");
        null != message.guidance && message.hasOwnProperty("guidance") && (object.guidance = message.guidance);
        return object;
      };
      REQ_UpdateGuidance.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_UpdateGuidance;
    }();
    $root.RESP_UpdateGuidance = function() {
      function RESP_UpdateGuidance(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_UpdateGuidance.create = function create(properties) {
        return new RESP_UpdateGuidance(properties);
      };
      RESP_UpdateGuidance.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      RESP_UpdateGuidance.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_UpdateGuidance.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_UpdateGuidance();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      RESP_UpdateGuidance.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_UpdateGuidance.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      RESP_UpdateGuidance.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_UpdateGuidance) return object;
        return new $root.RESP_UpdateGuidance();
      };
      RESP_UpdateGuidance.toObject = function toObject() {
        return {};
      };
      RESP_UpdateGuidance.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_UpdateGuidance;
    }();
    $root.REQ_HeartBeat = function() {
      function REQ_HeartBeat(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_HeartBeat.create = function create(properties) {
        return new REQ_HeartBeat(properties);
      };
      REQ_HeartBeat.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      REQ_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_HeartBeat.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_HeartBeat();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      REQ_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_HeartBeat.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      REQ_HeartBeat.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_HeartBeat) return object;
        return new $root.REQ_HeartBeat();
      };
      REQ_HeartBeat.toObject = function toObject() {
        return {};
      };
      REQ_HeartBeat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_HeartBeat;
    }();
    $root.RESP_HeartBeat = function() {
      function RESP_HeartBeat(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_HeartBeat.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      RESP_HeartBeat.create = function create(properties) {
        return new RESP_HeartBeat(properties);
      };
      RESP_HeartBeat.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.timestamp);
        return writer;
      };
      RESP_HeartBeat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_HeartBeat.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_HeartBeat();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.timestamp = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("timestamp")) throw $util.ProtocolError("missing required 'timestamp'", {
          instance: message
        });
        return message;
      };
      RESP_HeartBeat.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_HeartBeat.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high))) return "timestamp: integer|Long expected";
        return null;
      };
      RESP_HeartBeat.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_HeartBeat) return object;
        var message = new $root.RESP_HeartBeat();
        null != object.timestamp && ($util.Long ? (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false : "string" === typeof object.timestamp ? message.timestamp = parseInt(object.timestamp, 10) : "number" === typeof object.timestamp ? message.timestamp = object.timestamp : "object" === typeof object.timestamp && (message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber()));
        return message;
      };
      RESP_HeartBeat.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) if ($util.Long) {
          var _long22 = new $util.Long(0, 0, false);
          object.timestamp = options.longs === String ? _long22.toString() : options.longs === Number ? _long22.toNumber() : _long22;
        } else object.timestamp = options.longs === String ? "0" : 0;
        null != message.timestamp && message.hasOwnProperty("timestamp") && ("number" === typeof message.timestamp ? object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp : object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp);
        return object;
      };
      RESP_HeartBeat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_HeartBeat;
    }();
    $root.PUSH_LevelUp = function() {
      function PUSH_LevelUp(properties) {
        this.userPropList = [];
        this.skillIdList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_LevelUp.prototype.userPropList = $util.emptyArray;
      PUSH_LevelUp.prototype.level = 0;
      PUSH_LevelUp.prototype.exp = 0;
      PUSH_LevelUp.prototype.skillIdList = $util.emptyArray;
      PUSH_LevelUp.create = function create(properties) {
        return new PUSH_LevelUp(properties);
      };
      PUSH_LevelUp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.userPropList && message.userPropList.length) for (var i = 0; i < message.userPropList.length; ++i) $root.UserProp.encode(message.userPropList[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).int32(message.level);
        writer.uint32(24).int32(message.exp);
        if (null != message.skillIdList && message.skillIdList.length) for (var i = 0; i < message.skillIdList.length; ++i) writer.uint32(32).int32(message.skillIdList[i]);
        return writer;
      };
      PUSH_LevelUp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_LevelUp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_LevelUp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userPropList && message.userPropList.length || (message.userPropList = []);
            message.userPropList.push($root.UserProp.decode(reader, reader.uint32()));
            break;

           case 2:
            message.level = reader.int32();
            break;

           case 3:
            message.exp = reader.int32();
            break;

           case 4:
            message.skillIdList && message.skillIdList.length || (message.skillIdList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.skillIdList.push(reader.int32());
            } else message.skillIdList.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("level")) throw $util.ProtocolError("missing required 'level'", {
          instance: message
        });
        if (!message.hasOwnProperty("exp")) throw $util.ProtocolError("missing required 'exp'", {
          instance: message
        });
        return message;
      };
      PUSH_LevelUp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_LevelUp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userPropList && message.hasOwnProperty("userPropList")) {
          if (!Array.isArray(message.userPropList)) return "userPropList: array expected";
          for (var i = 0; i < message.userPropList.length; ++i) {
            var error = $root.UserProp.verify(message.userPropList[i]);
            if (error) return "userPropList." + error;
          }
        }
        if (!$util.isInteger(message.level)) return "level: integer expected";
        if (!$util.isInteger(message.exp)) return "exp: integer expected";
        if (null != message.skillIdList && message.hasOwnProperty("skillIdList")) {
          if (!Array.isArray(message.skillIdList)) return "skillIdList: array expected";
          for (var i = 0; i < message.skillIdList.length; ++i) if (!$util.isInteger(message.skillIdList[i])) return "skillIdList: integer[] expected";
        }
        return null;
      };
      PUSH_LevelUp.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_LevelUp) return object;
        var message = new $root.PUSH_LevelUp();
        if (object.userPropList) {
          if (!Array.isArray(object.userPropList)) throw TypeError(".PUSH_LevelUp.userPropList: array expected");
          message.userPropList = [];
          for (var i = 0; i < object.userPropList.length; ++i) {
            if ("object" !== typeof object.userPropList[i]) throw TypeError(".PUSH_LevelUp.userPropList: object expected");
            message.userPropList[i] = $root.UserProp.fromObject(object.userPropList[i]);
          }
        }
        null != object.level && (message.level = 0 | object.level);
        null != object.exp && (message.exp = 0 | object.exp);
        if (object.skillIdList) {
          if (!Array.isArray(object.skillIdList)) throw TypeError(".PUSH_LevelUp.skillIdList: array expected");
          message.skillIdList = [];
          for (var i = 0; i < object.skillIdList.length; ++i) message.skillIdList[i] = 0 | object.skillIdList[i];
        }
        return message;
      };
      PUSH_LevelUp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.arrays || options.defaults) {
          object.userPropList = [];
          object.skillIdList = [];
        }
        if (options.defaults) {
          object.level = 0;
          object.exp = 0;
        }
        if (message.userPropList && message.userPropList.length) {
          object.userPropList = [];
          for (var j = 0; j < message.userPropList.length; ++j) object.userPropList[j] = $root.UserProp.toObject(message.userPropList[j], options);
        }
        null != message.level && message.hasOwnProperty("level") && (object.level = message.level);
        null != message.exp && message.hasOwnProperty("exp") && (object.exp = message.exp);
        if (message.skillIdList && message.skillIdList.length) {
          object.skillIdList = [];
          for (var j = 0; j < message.skillIdList.length; ++j) object.skillIdList[j] = message.skillIdList[j];
        }
        return object;
      };
      PUSH_LevelUp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_LevelUp;
    }();
    $root.REQ_Login = function() {
      function REQ_Login(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_Login.prototype.targetUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_Login.create = function create(properties) {
        return new REQ_Login(properties);
      };
      REQ_Login.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.targetUserId);
        return writer;
      };
      REQ_Login.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_Login.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_Login();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.targetUserId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("targetUserId")) throw $util.ProtocolError("missing required 'targetUserId'", {
          instance: message
        });
        return message;
      };
      REQ_Login.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_Login.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.targetUserId) && !(message.targetUserId && $util.isInteger(message.targetUserId.low) && $util.isInteger(message.targetUserId.high))) return "targetUserId: integer|Long expected";
        return null;
      };
      REQ_Login.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_Login) return object;
        var message = new $root.REQ_Login();
        null != object.targetUserId && ($util.Long ? (message.targetUserId = $util.Long.fromValue(object.targetUserId)).unsigned = false : "string" === typeof object.targetUserId ? message.targetUserId = parseInt(object.targetUserId, 10) : "number" === typeof object.targetUserId ? message.targetUserId = object.targetUserId : "object" === typeof object.targetUserId && (message.targetUserId = new $util.LongBits(object.targetUserId.low >>> 0, object.targetUserId.high >>> 0).toNumber()));
        return message;
      };
      REQ_Login.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) if ($util.Long) {
          var _long23 = new $util.Long(0, 0, false);
          object.targetUserId = options.longs === String ? _long23.toString() : options.longs === Number ? _long23.toNumber() : _long23;
        } else object.targetUserId = options.longs === String ? "0" : 0;
        null != message.targetUserId && message.hasOwnProperty("targetUserId") && ("number" === typeof message.targetUserId ? object.targetUserId = options.longs === String ? String(message.targetUserId) : message.targetUserId : object.targetUserId = options.longs === String ? $util.Long.prototype.toString.call(message.targetUserId) : options.longs === Number ? new $util.LongBits(message.targetUserId.low >>> 0, message.targetUserId.high >>> 0).toNumber() : message.targetUserId);
        return object;
      };
      REQ_Login.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_Login;
    }();
    $root.RESP_Login = function() {
      function RESP_Login(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_Login.prototype.epetFirstLogin = false;
      RESP_Login.create = function create(properties) {
        return new RESP_Login(properties);
      };
      RESP_Login.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).bool(message.epetFirstLogin);
        return writer;
      };
      RESP_Login.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_Login.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_Login();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.epetFirstLogin = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("epetFirstLogin")) throw $util.ProtocolError("missing required 'epetFirstLogin'", {
          instance: message
        });
        return message;
      };
      RESP_Login.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_Login.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if ("boolean" !== typeof message.epetFirstLogin) return "epetFirstLogin: boolean expected";
        return null;
      };
      RESP_Login.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_Login) return object;
        var message = new $root.RESP_Login();
        null != object.epetFirstLogin && (message.epetFirstLogin = Boolean(object.epetFirstLogin));
        return message;
      };
      RESP_Login.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.epetFirstLogin = false);
        null != message.epetFirstLogin && message.hasOwnProperty("epetFirstLogin") && (object.epetFirstLogin = message.epetFirstLogin);
        return object;
      };
      RESP_Login.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_Login;
    }();
    $root.REQ_EpetFirstLoginReply = function() {
      function REQ_EpetFirstLoginReply(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_EpetFirstLoginReply.create = function create(properties) {
        return new REQ_EpetFirstLoginReply(properties);
      };
      REQ_EpetFirstLoginReply.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      REQ_EpetFirstLoginReply.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_EpetFirstLoginReply.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_EpetFirstLoginReply();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      REQ_EpetFirstLoginReply.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_EpetFirstLoginReply.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      REQ_EpetFirstLoginReply.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_EpetFirstLoginReply) return object;
        return new $root.REQ_EpetFirstLoginReply();
      };
      REQ_EpetFirstLoginReply.toObject = function toObject() {
        return {};
      };
      REQ_EpetFirstLoginReply.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_EpetFirstLoginReply;
    }();
    $root.RESP_EpetFirstLoginReply = function() {
      function RESP_EpetFirstLoginReply(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_EpetFirstLoginReply.create = function create(properties) {
        return new RESP_EpetFirstLoginReply(properties);
      };
      RESP_EpetFirstLoginReply.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      RESP_EpetFirstLoginReply.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_EpetFirstLoginReply.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_EpetFirstLoginReply();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      RESP_EpetFirstLoginReply.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_EpetFirstLoginReply.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      RESP_EpetFirstLoginReply.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_EpetFirstLoginReply) return object;
        return new $root.RESP_EpetFirstLoginReply();
      };
      RESP_EpetFirstLoginReply.toObject = function toObject() {
        return {};
      };
      RESP_EpetFirstLoginReply.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_EpetFirstLoginReply;
    }();
    $root.PUSH_PetGoBackNotify = function() {
      function PUSH_PetGoBackNotify(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_PetGoBackNotify.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PUSH_PetGoBackNotify.create = function create(properties) {
        return new PUSH_PetGoBackNotify(properties);
      };
      PUSH_PetGoBackNotify.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.petId);
        return writer;
      };
      PUSH_PetGoBackNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_PetGoBackNotify.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_PetGoBackNotify();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      PUSH_PetGoBackNotify.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_PetGoBackNotify.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      PUSH_PetGoBackNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_PetGoBackNotify) return object;
        var message = new $root.PUSH_PetGoBackNotify();
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      PUSH_PetGoBackNotify.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) if ($util.Long) {
          var _long24 = new $util.Long(0, 0, false);
          object.petId = options.longs === String ? _long24.toString() : options.longs === Number ? _long24.toNumber() : _long24;
        } else object.petId = options.longs === String ? "0" : 0;
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      PUSH_PetGoBackNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_PetGoBackNotify;
    }();
    $root.REQ_NearPetInfo = function() {
      function REQ_NearPetInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_NearPetInfo.prototype.pageNum = 0;
      REQ_NearPetInfo.prototype.pageSize = 0;
      REQ_NearPetInfo.create = function create(properties) {
        return new REQ_NearPetInfo(properties);
      };
      REQ_NearPetInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.pageNum);
        writer.uint32(16).int32(message.pageSize);
        return writer;
      };
      REQ_NearPetInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_NearPetInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_NearPetInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pageNum = reader.int32();
            break;

           case 2:
            message.pageSize = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("pageNum")) throw $util.ProtocolError("missing required 'pageNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("pageSize")) throw $util.ProtocolError("missing required 'pageSize'", {
          instance: message
        });
        return message;
      };
      REQ_NearPetInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_NearPetInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.pageNum)) return "pageNum: integer expected";
        if (!$util.isInteger(message.pageSize)) return "pageSize: integer expected";
        return null;
      };
      REQ_NearPetInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_NearPetInfo) return object;
        var message = new $root.REQ_NearPetInfo();
        null != object.pageNum && (message.pageNum = 0 | object.pageNum);
        null != object.pageSize && (message.pageSize = 0 | object.pageSize);
        return message;
      };
      REQ_NearPetInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.pageNum = 0;
          object.pageSize = 0;
        }
        null != message.pageNum && message.hasOwnProperty("pageNum") && (object.pageNum = message.pageNum);
        null != message.pageSize && message.hasOwnProperty("pageSize") && (object.pageSize = message.pageSize);
        return object;
      };
      REQ_NearPetInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_NearPetInfo;
    }();
    $root.RESP_NearPetInfo = function() {
      function RESP_NearPetInfo(properties) {
        this.nearPetInfo = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_NearPetInfo.prototype.pages = 0;
      RESP_NearPetInfo.prototype.pageCurrentNo = 0;
      RESP_NearPetInfo.prototype.total = 0;
      RESP_NearPetInfo.prototype.nearPetInfo = $util.emptyArray;
      RESP_NearPetInfo.create = function create(properties) {
        return new RESP_NearPetInfo(properties);
      };
      RESP_NearPetInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.pages && message.hasOwnProperty("pages") && writer.uint32(8).int32(message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && writer.uint32(16).int32(message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && writer.uint32(24).int32(message.total);
        if (null != message.nearPetInfo && message.nearPetInfo.length) for (var i = 0; i < message.nearPetInfo.length; ++i) $root.NearPetInfo.encode(message.nearPetInfo[i], writer.uint32(34).fork()).ldelim();
        return writer;
      };
      RESP_NearPetInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_NearPetInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_NearPetInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pages = reader.int32();
            break;

           case 2:
            message.pageCurrentNo = reader.int32();
            break;

           case 3:
            message.total = reader.int32();
            break;

           case 4:
            message.nearPetInfo && message.nearPetInfo.length || (message.nearPetInfo = []);
            message.nearPetInfo.push($root.NearPetInfo.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_NearPetInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_NearPetInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.pages && message.hasOwnProperty("pages") && !$util.isInteger(message.pages)) return "pages: integer expected";
        if (null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && !$util.isInteger(message.pageCurrentNo)) return "pageCurrentNo: integer expected";
        if (null != message.total && message.hasOwnProperty("total") && !$util.isInteger(message.total)) return "total: integer expected";
        if (null != message.nearPetInfo && message.hasOwnProperty("nearPetInfo")) {
          if (!Array.isArray(message.nearPetInfo)) return "nearPetInfo: array expected";
          for (var i = 0; i < message.nearPetInfo.length; ++i) {
            var error = $root.NearPetInfo.verify(message.nearPetInfo[i]);
            if (error) return "nearPetInfo." + error;
          }
        }
        return null;
      };
      RESP_NearPetInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_NearPetInfo) return object;
        var message = new $root.RESP_NearPetInfo();
        null != object.pages && (message.pages = 0 | object.pages);
        null != object.pageCurrentNo && (message.pageCurrentNo = 0 | object.pageCurrentNo);
        null != object.total && (message.total = 0 | object.total);
        if (object.nearPetInfo) {
          if (!Array.isArray(object.nearPetInfo)) throw TypeError(".RESP_NearPetInfo.nearPetInfo: array expected");
          message.nearPetInfo = [];
          for (var i = 0; i < object.nearPetInfo.length; ++i) {
            if ("object" !== typeof object.nearPetInfo[i]) throw TypeError(".RESP_NearPetInfo.nearPetInfo: object expected");
            message.nearPetInfo[i] = $root.NearPetInfo.fromObject(object.nearPetInfo[i]);
          }
        }
        return message;
      };
      RESP_NearPetInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.nearPetInfo = []);
        if (options.defaults) {
          object.pages = 0;
          object.pageCurrentNo = 0;
          object.total = 0;
        }
        null != message.pages && message.hasOwnProperty("pages") && (object.pages = message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && (object.pageCurrentNo = message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && (object.total = message.total);
        if (message.nearPetInfo && message.nearPetInfo.length) {
          object.nearPetInfo = [];
          for (var j = 0; j < message.nearPetInfo.length; ++j) object.nearPetInfo[j] = $root.NearPetInfo.toObject(message.nearPetInfo[j], options);
        }
        return object;
      };
      RESP_NearPetInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_NearPetInfo;
    }();
    $root.NearPetInfo = function() {
      function NearPetInfo(properties) {
        this.dress = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      NearPetInfo.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      NearPetInfo.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      NearPetInfo.prototype.petLevel = 0;
      NearPetInfo.prototype.petExp = 0;
      NearPetInfo.prototype.petType = 0;
      NearPetInfo.prototype.userProfile = null;
      NearPetInfo.prototype.distance = "";
      NearPetInfo.prototype.interactType = 0;
      NearPetInfo.prototype.dress = $util.emptyArray;
      NearPetInfo.prototype.petImage = "";
      NearPetInfo.create = function create(properties) {
        return new NearPetInfo(properties);
      };
      NearPetInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        writer.uint32(16).int64(message.petId);
        writer.uint32(24).int32(message.petLevel);
        writer.uint32(32).int32(message.petExp);
        writer.uint32(40).int32(message.petType);
        $root.UserProfile.encode(message.userProfile, writer.uint32(50).fork()).ldelim();
        writer.uint32(58).string(message.distance);
        writer.uint32(64).int32(message.interactType);
        if (null != message.dress && message.dress.length) for (var i = 0; i < message.dress.length; ++i) $root.Dress.encode(message.dress[i], writer.uint32(74).fork()).ldelim();
        null != message.petImage && message.hasOwnProperty("petImage") && writer.uint32(82).string(message.petImage);
        return writer;
      };
      NearPetInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      NearPetInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.NearPetInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           case 3:
            message.petLevel = reader.int32();
            break;

           case 4:
            message.petExp = reader.int32();
            break;

           case 5:
            message.petType = reader.int32();
            break;

           case 6:
            message.userProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 7:
            message.distance = reader.string();
            break;

           case 8:
            message.interactType = reader.int32();
            break;

           case 9:
            message.dress && message.dress.length || (message.dress = []);
            message.dress.push($root.Dress.decode(reader, reader.uint32()));
            break;

           case 10:
            message.petImage = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petLevel")) throw $util.ProtocolError("missing required 'petLevel'", {
          instance: message
        });
        if (!message.hasOwnProperty("petExp")) throw $util.ProtocolError("missing required 'petExp'", {
          instance: message
        });
        if (!message.hasOwnProperty("petType")) throw $util.ProtocolError("missing required 'petType'", {
          instance: message
        });
        if (!message.hasOwnProperty("userProfile")) throw $util.ProtocolError("missing required 'userProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("distance")) throw $util.ProtocolError("missing required 'distance'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactType")) throw $util.ProtocolError("missing required 'interactType'", {
          instance: message
        });
        return message;
      };
      NearPetInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      NearPetInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isInteger(message.petLevel)) return "petLevel: integer expected";
        if (!$util.isInteger(message.petExp)) return "petExp: integer expected";
        if (!$util.isInteger(message.petType)) return "petType: integer expected";
        var error = $root.UserProfile.verify(message.userProfile);
        if (error) return "userProfile." + error;
        if (!$util.isString(message.distance)) return "distance: string expected";
        if (!$util.isInteger(message.interactType)) return "interactType: integer expected";
        if (null != message.dress && message.hasOwnProperty("dress")) {
          if (!Array.isArray(message.dress)) return "dress: array expected";
          for (var i = 0; i < message.dress.length; ++i) {
            var error = $root.Dress.verify(message.dress[i]);
            if (error) return "dress." + error;
          }
        }
        if (null != message.petImage && message.hasOwnProperty("petImage") && !$util.isString(message.petImage)) return "petImage: string expected";
        return null;
      };
      NearPetInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.NearPetInfo) return object;
        var message = new $root.NearPetInfo();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.petLevel && (message.petLevel = 0 | object.petLevel);
        null != object.petExp && (message.petExp = 0 | object.petExp);
        null != object.petType && (message.petType = 0 | object.petType);
        if (null != object.userProfile) {
          if ("object" !== typeof object.userProfile) throw TypeError(".NearPetInfo.userProfile: object expected");
          message.userProfile = $root.UserProfile.fromObject(object.userProfile);
        }
        null != object.distance && (message.distance = String(object.distance));
        null != object.interactType && (message.interactType = 0 | object.interactType);
        if (object.dress) {
          if (!Array.isArray(object.dress)) throw TypeError(".NearPetInfo.dress: array expected");
          message.dress = [];
          for (var i = 0; i < object.dress.length; ++i) {
            if ("object" !== typeof object.dress[i]) throw TypeError(".NearPetInfo.dress: object expected");
            message.dress[i] = $root.Dress.fromObject(object.dress[i]);
          }
        }
        null != object.petImage && (message.petImage = String(object.petImage));
        return message;
      };
      NearPetInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.dress = []);
        if (options.defaults) {
          if ($util.Long) {
            var _long25 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long25.toString() : options.longs === Number ? _long25.toNumber() : _long25;
          } else object.userId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long25 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long25.toString() : options.longs === Number ? _long25.toNumber() : _long25;
          } else object.petId = options.longs === String ? "0" : 0;
          object.petLevel = 0;
          object.petExp = 0;
          object.petType = 0;
          object.userProfile = null;
          object.distance = "";
          object.interactType = 0;
          object.petImage = "";
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.petLevel && message.hasOwnProperty("petLevel") && (object.petLevel = message.petLevel);
        null != message.petExp && message.hasOwnProperty("petExp") && (object.petExp = message.petExp);
        null != message.petType && message.hasOwnProperty("petType") && (object.petType = message.petType);
        null != message.userProfile && message.hasOwnProperty("userProfile") && (object.userProfile = $root.UserProfile.toObject(message.userProfile, options));
        null != message.distance && message.hasOwnProperty("distance") && (object.distance = message.distance);
        null != message.interactType && message.hasOwnProperty("interactType") && (object.interactType = message.interactType);
        if (message.dress && message.dress.length) {
          object.dress = [];
          for (var j = 0; j < message.dress.length; ++j) object.dress[j] = $root.Dress.toObject(message.dress[j], options);
        }
        null != message.petImage && message.hasOwnProperty("petImage") && (object.petImage = message.petImage);
        return object;
      };
      NearPetInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return NearPetInfo;
    }();
    $root.PUSH_UpdateProp = function() {
      function PUSH_UpdateProp(properties) {
        this.userPropList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_UpdateProp.prototype.userPropList = $util.emptyArray;
      PUSH_UpdateProp.create = function create(properties) {
        return new PUSH_UpdateProp(properties);
      };
      PUSH_UpdateProp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.userPropList && message.userPropList.length) for (var i = 0; i < message.userPropList.length; ++i) $root.UserProp.encode(message.userPropList[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      PUSH_UpdateProp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_UpdateProp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_UpdateProp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userPropList && message.userPropList.length || (message.userPropList = []);
            message.userPropList.push($root.UserProp.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      PUSH_UpdateProp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_UpdateProp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userPropList && message.hasOwnProperty("userPropList")) {
          if (!Array.isArray(message.userPropList)) return "userPropList: array expected";
          for (var i = 0; i < message.userPropList.length; ++i) {
            var error = $root.UserProp.verify(message.userPropList[i]);
            if (error) return "userPropList." + error;
          }
        }
        return null;
      };
      PUSH_UpdateProp.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_UpdateProp) return object;
        var message = new $root.PUSH_UpdateProp();
        if (object.userPropList) {
          if (!Array.isArray(object.userPropList)) throw TypeError(".PUSH_UpdateProp.userPropList: array expected");
          message.userPropList = [];
          for (var i = 0; i < object.userPropList.length; ++i) {
            if ("object" !== typeof object.userPropList[i]) throw TypeError(".PUSH_UpdateProp.userPropList: object expected");
            message.userPropList[i] = $root.UserProp.fromObject(object.userPropList[i]);
          }
        }
        return message;
      };
      PUSH_UpdateProp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.userPropList = []);
        if (message.userPropList && message.userPropList.length) {
          object.userPropList = [];
          for (var j = 0; j < message.userPropList.length; ++j) object.userPropList[j] = $root.UserProp.toObject(message.userPropList[j], options);
        }
        return object;
      };
      PUSH_UpdateProp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_UpdateProp;
    }();
    $root.REQ_GetProp = function() {
      function REQ_GetProp(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_GetProp.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_GetProp.prototype.propType = 0;
      REQ_GetProp.prototype.propId = 0;
      REQ_GetProp.create = function create(properties) {
        return new REQ_GetProp(properties);
      };
      REQ_GetProp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        null != message.propType && message.hasOwnProperty("propType") && writer.uint32(16).int32(message.propType);
        null != message.propId && message.hasOwnProperty("propId") && writer.uint32(24).int32(message.propId);
        return writer;
      };
      REQ_GetProp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_GetProp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_GetProp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.propType = reader.int32();
            break;

           case 3:
            message.propId = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        return message;
      };
      REQ_GetProp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_GetProp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (null != message.propType && message.hasOwnProperty("propType") && !$util.isInteger(message.propType)) return "propType: integer expected";
        if (null != message.propId && message.hasOwnProperty("propId") && !$util.isInteger(message.propId)) return "propId: integer expected";
        return null;
      };
      REQ_GetProp.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_GetProp) return object;
        var message = new $root.REQ_GetProp();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.propType && (message.propType = 0 | object.propType);
        null != object.propId && (message.propId = 0 | object.propId);
        return message;
      };
      REQ_GetProp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long26 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long26.toString() : options.longs === Number ? _long26.toNumber() : _long26;
          } else object.userId = options.longs === String ? "0" : 0;
          object.propType = 0;
          object.propId = 0;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.propType && message.hasOwnProperty("propType") && (object.propType = message.propType);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        return object;
      };
      REQ_GetProp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_GetProp;
    }();
    $root.RESP_GetProp = function() {
      function RESP_GetProp(properties) {
        this.userPropList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_GetProp.prototype.userPropList = $util.emptyArray;
      RESP_GetProp.create = function create(properties) {
        return new RESP_GetProp(properties);
      };
      RESP_GetProp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.userPropList && message.userPropList.length) for (var i = 0; i < message.userPropList.length; ++i) $root.UserProp.encode(message.userPropList[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_GetProp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_GetProp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_GetProp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userPropList && message.userPropList.length || (message.userPropList = []);
            message.userPropList.push($root.UserProp.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_GetProp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_GetProp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userPropList && message.hasOwnProperty("userPropList")) {
          if (!Array.isArray(message.userPropList)) return "userPropList: array expected";
          for (var i = 0; i < message.userPropList.length; ++i) {
            var error = $root.UserProp.verify(message.userPropList[i]);
            if (error) return "userPropList." + error;
          }
        }
        return null;
      };
      RESP_GetProp.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_GetProp) return object;
        var message = new $root.RESP_GetProp();
        if (object.userPropList) {
          if (!Array.isArray(object.userPropList)) throw TypeError(".RESP_GetProp.userPropList: array expected");
          message.userPropList = [];
          for (var i = 0; i < object.userPropList.length; ++i) {
            if ("object" !== typeof object.userPropList[i]) throw TypeError(".RESP_GetProp.userPropList: object expected");
            message.userPropList[i] = $root.UserProp.fromObject(object.userPropList[i]);
          }
        }
        return message;
      };
      RESP_GetProp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.userPropList = []);
        if (message.userPropList && message.userPropList.length) {
          object.userPropList = [];
          for (var j = 0; j < message.userPropList.length; ++j) object.userPropList[j] = $root.UserProp.toObject(message.userPropList[j], options);
        }
        return object;
      };
      RESP_GetProp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_GetProp;
    }();
    $root.REQ_RemoveRedPoint = function() {
      function REQ_RemoveRedPoint(properties) {
        this.propIdList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_RemoveRedPoint.prototype.propIdList = $util.emptyArray;
      REQ_RemoveRedPoint.prototype.propType = 0;
      REQ_RemoveRedPoint.create = function create(properties) {
        return new REQ_RemoveRedPoint(properties);
      };
      REQ_RemoveRedPoint.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.propIdList && message.propIdList.length) for (var i = 0; i < message.propIdList.length; ++i) writer.uint32(8).int32(message.propIdList[i]);
        null != message.propType && message.hasOwnProperty("propType") && writer.uint32(16).int32(message.propType);
        return writer;
      };
      REQ_RemoveRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_RemoveRedPoint.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_RemoveRedPoint();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.propIdList && message.propIdList.length || (message.propIdList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.propIdList.push(reader.int32());
            } else message.propIdList.push(reader.int32());
            break;

           case 2:
            message.propType = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      REQ_RemoveRedPoint.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_RemoveRedPoint.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.propIdList && message.hasOwnProperty("propIdList")) {
          if (!Array.isArray(message.propIdList)) return "propIdList: array expected";
          for (var i = 0; i < message.propIdList.length; ++i) if (!$util.isInteger(message.propIdList[i])) return "propIdList: integer[] expected";
        }
        if (null != message.propType && message.hasOwnProperty("propType") && !$util.isInteger(message.propType)) return "propType: integer expected";
        return null;
      };
      REQ_RemoveRedPoint.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_RemoveRedPoint) return object;
        var message = new $root.REQ_RemoveRedPoint();
        if (object.propIdList) {
          if (!Array.isArray(object.propIdList)) throw TypeError(".REQ_RemoveRedPoint.propIdList: array expected");
          message.propIdList = [];
          for (var i = 0; i < object.propIdList.length; ++i) message.propIdList[i] = 0 | object.propIdList[i];
        }
        null != object.propType && (message.propType = 0 | object.propType);
        return message;
      };
      REQ_RemoveRedPoint.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.propIdList = []);
        options.defaults && (object.propType = 0);
        if (message.propIdList && message.propIdList.length) {
          object.propIdList = [];
          for (var j = 0; j < message.propIdList.length; ++j) object.propIdList[j] = message.propIdList[j];
        }
        null != message.propType && message.hasOwnProperty("propType") && (object.propType = message.propType);
        return object;
      };
      REQ_RemoveRedPoint.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_RemoveRedPoint;
    }();
    $root.RESP_RemoveRedPoint = function() {
      function RESP_RemoveRedPoint(properties) {
        this.propIdList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_RemoveRedPoint.prototype.propIdList = $util.emptyArray;
      RESP_RemoveRedPoint.prototype.propType = 0;
      RESP_RemoveRedPoint.create = function create(properties) {
        return new RESP_RemoveRedPoint(properties);
      };
      RESP_RemoveRedPoint.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.propIdList && message.propIdList.length) for (var i = 0; i < message.propIdList.length; ++i) writer.uint32(8).int32(message.propIdList[i]);
        null != message.propType && message.hasOwnProperty("propType") && writer.uint32(16).int32(message.propType);
        return writer;
      };
      RESP_RemoveRedPoint.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_RemoveRedPoint.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_RemoveRedPoint();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.propIdList && message.propIdList.length || (message.propIdList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.propIdList.push(reader.int32());
            } else message.propIdList.push(reader.int32());
            break;

           case 2:
            message.propType = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_RemoveRedPoint.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_RemoveRedPoint.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.propIdList && message.hasOwnProperty("propIdList")) {
          if (!Array.isArray(message.propIdList)) return "propIdList: array expected";
          for (var i = 0; i < message.propIdList.length; ++i) if (!$util.isInteger(message.propIdList[i])) return "propIdList: integer[] expected";
        }
        if (null != message.propType && message.hasOwnProperty("propType") && !$util.isInteger(message.propType)) return "propType: integer expected";
        return null;
      };
      RESP_RemoveRedPoint.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_RemoveRedPoint) return object;
        var message = new $root.RESP_RemoveRedPoint();
        if (object.propIdList) {
          if (!Array.isArray(object.propIdList)) throw TypeError(".RESP_RemoveRedPoint.propIdList: array expected");
          message.propIdList = [];
          for (var i = 0; i < object.propIdList.length; ++i) message.propIdList[i] = 0 | object.propIdList[i];
        }
        null != object.propType && (message.propType = 0 | object.propType);
        return message;
      };
      RESP_RemoveRedPoint.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.propIdList = []);
        options.defaults && (object.propType = 0);
        if (message.propIdList && message.propIdList.length) {
          object.propIdList = [];
          for (var j = 0; j < message.propIdList.length; ++j) object.propIdList[j] = message.propIdList[j];
        }
        null != message.propType && message.hasOwnProperty("propType") && (object.propType = message.propType);
        return object;
      };
      RESP_RemoveRedPoint.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_RemoveRedPoint;
    }();
    $root.REQ_Rename = function() {
      function REQ_Rename(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_Rename.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_Rename.prototype.name = "";
      REQ_Rename.create = function create(properties) {
        return new REQ_Rename(properties);
      };
      REQ_Rename.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.petId);
        writer.uint32(18).string(message.name);
        return writer;
      };
      REQ_Rename.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_Rename.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_Rename();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petId = reader.int64();
            break;

           case 2:
            message.name = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        return message;
      };
      REQ_Rename.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_Rename.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isString(message.name)) return "name: string expected";
        return null;
      };
      REQ_Rename.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_Rename) return object;
        var message = new $root.REQ_Rename();
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.name && (message.name = String(object.name));
        return message;
      };
      REQ_Rename.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long27 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long27.toString() : options.longs === Number ? _long27.toNumber() : _long27;
          } else object.petId = options.longs === String ? "0" : 0;
          object.name = "";
        }
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.name && message.hasOwnProperty("name") && (object.name = message.name);
        return object;
      };
      REQ_Rename.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_Rename;
    }();
    $root.RESP_Rename = function() {
      function RESP_Rename(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_Rename.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      RESP_Rename.prototype.name = "";
      RESP_Rename.create = function create(properties) {
        return new RESP_Rename(properties);
      };
      RESP_Rename.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.petId);
        writer.uint32(18).string(message.name);
        return writer;
      };
      RESP_Rename.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_Rename.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_Rename();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petId = reader.int64();
            break;

           case 2:
            message.name = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        return message;
      };
      RESP_Rename.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_Rename.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isString(message.name)) return "name: string expected";
        return null;
      };
      RESP_Rename.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_Rename) return object;
        var message = new $root.RESP_Rename();
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.name && (message.name = String(object.name));
        return message;
      };
      RESP_Rename.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long28 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long28.toString() : options.longs === Number ? _long28.toNumber() : _long28;
          } else object.petId = options.longs === String ? "0" : 0;
          object.name = "";
        }
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.name && message.hasOwnProperty("name") && (object.name = message.name);
        return object;
      };
      RESP_Rename.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_Rename;
    }();
    $root.REQ_SendDirt = function() {
      function REQ_SendDirt(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_SendDirt.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_SendDirt.create = function create(properties) {
        return new REQ_SendDirt(properties);
      };
      REQ_SendDirt.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.id);
        return writer;
      };
      REQ_SendDirt.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_SendDirt.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_SendDirt();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      REQ_SendDirt.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_SendDirt.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high))) return "id: integer|Long expected";
        return null;
      };
      REQ_SendDirt.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_SendDirt) return object;
        var message = new $root.REQ_SendDirt();
        null != object.id && ($util.Long ? (message.id = $util.Long.fromValue(object.id)).unsigned = false : "string" === typeof object.id ? message.id = parseInt(object.id, 10) : "number" === typeof object.id ? message.id = object.id : "object" === typeof object.id && (message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber()));
        return message;
      };
      REQ_SendDirt.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) if ($util.Long) {
          var _long29 = new $util.Long(0, 0, false);
          object.id = options.longs === String ? _long29.toString() : options.longs === Number ? _long29.toNumber() : _long29;
        } else object.id = options.longs === String ? "0" : 0;
        null != message.id && message.hasOwnProperty("id") && ("number" === typeof message.id ? object.id = options.longs === String ? String(message.id) : message.id : object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id);
        return object;
      };
      REQ_SendDirt.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_SendDirt;
    }();
    $root.RESP_SendDirt = function() {
      function RESP_SendDirt(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_SendDirt.create = function create(properties) {
        return new RESP_SendDirt(properties);
      };
      RESP_SendDirt.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      RESP_SendDirt.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_SendDirt.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_SendDirt();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      RESP_SendDirt.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_SendDirt.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      RESP_SendDirt.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_SendDirt) return object;
        return new $root.RESP_SendDirt();
      };
      RESP_SendDirt.toObject = function toObject() {
        return {};
      };
      RESP_SendDirt.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_SendDirt;
    }();
    $root.REQ_ShoppingMallPurchase = function() {
      function REQ_ShoppingMallPurchase(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_ShoppingMallPurchase.prototype.purchaseType = 0;
      REQ_ShoppingMallPurchase.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_ShoppingMallPurchase.prototype.commodityId = 0;
      REQ_ShoppingMallPurchase.create = function create(properties) {
        return new REQ_ShoppingMallPurchase(properties);
      };
      REQ_ShoppingMallPurchase.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.purchaseType);
        writer.uint32(16).int64(message.petId);
        writer.uint32(24).int32(message.commodityId);
        return writer;
      };
      REQ_ShoppingMallPurchase.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_ShoppingMallPurchase.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_ShoppingMallPurchase();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.purchaseType = reader.int32();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           case 3:
            message.commodityId = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("purchaseType")) throw $util.ProtocolError("missing required 'purchaseType'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("commodityId")) throw $util.ProtocolError("missing required 'commodityId'", {
          instance: message
        });
        return message;
      };
      REQ_ShoppingMallPurchase.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_ShoppingMallPurchase.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.purchaseType)) return "purchaseType: integer expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isInteger(message.commodityId)) return "commodityId: integer expected";
        return null;
      };
      REQ_ShoppingMallPurchase.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_ShoppingMallPurchase) return object;
        var message = new $root.REQ_ShoppingMallPurchase();
        null != object.purchaseType && (message.purchaseType = 0 | object.purchaseType);
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.commodityId && (message.commodityId = 0 | object.commodityId);
        return message;
      };
      REQ_ShoppingMallPurchase.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.purchaseType = 0;
          if ($util.Long) {
            var _long30 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long30.toString() : options.longs === Number ? _long30.toNumber() : _long30;
          } else object.petId = options.longs === String ? "0" : 0;
          object.commodityId = 0;
        }
        null != message.purchaseType && message.hasOwnProperty("purchaseType") && (object.purchaseType = message.purchaseType);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.commodityId && message.hasOwnProperty("commodityId") && (object.commodityId = message.commodityId);
        return object;
      };
      REQ_ShoppingMallPurchase.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_ShoppingMallPurchase;
    }();
    $root.RESP_ShoppingMallPurchase = function() {
      function RESP_ShoppingMallPurchase(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_ShoppingMallPurchase.prototype.remainSoulCoin = 0;
      RESP_ShoppingMallPurchase.prototype.remainPlanetCoin = 0;
      RESP_ShoppingMallPurchase.create = function create(properties) {
        return new RESP_ShoppingMallPurchase(properties);
      };
      RESP_ShoppingMallPurchase.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.remainSoulCoin);
        writer.uint32(16).int32(message.remainPlanetCoin);
        return writer;
      };
      RESP_ShoppingMallPurchase.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_ShoppingMallPurchase.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_ShoppingMallPurchase();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.remainSoulCoin = reader.int32();
            break;

           case 2:
            message.remainPlanetCoin = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("remainSoulCoin")) throw $util.ProtocolError("missing required 'remainSoulCoin'", {
          instance: message
        });
        if (!message.hasOwnProperty("remainPlanetCoin")) throw $util.ProtocolError("missing required 'remainPlanetCoin'", {
          instance: message
        });
        return message;
      };
      RESP_ShoppingMallPurchase.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_ShoppingMallPurchase.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.remainSoulCoin)) return "remainSoulCoin: integer expected";
        if (!$util.isInteger(message.remainPlanetCoin)) return "remainPlanetCoin: integer expected";
        return null;
      };
      RESP_ShoppingMallPurchase.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_ShoppingMallPurchase) return object;
        var message = new $root.RESP_ShoppingMallPurchase();
        null != object.remainSoulCoin && (message.remainSoulCoin = 0 | object.remainSoulCoin);
        null != object.remainPlanetCoin && (message.remainPlanetCoin = 0 | object.remainPlanetCoin);
        return message;
      };
      RESP_ShoppingMallPurchase.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.remainSoulCoin = 0;
          object.remainPlanetCoin = 0;
        }
        null != message.remainSoulCoin && message.hasOwnProperty("remainSoulCoin") && (object.remainSoulCoin = message.remainSoulCoin);
        null != message.remainPlanetCoin && message.hasOwnProperty("remainPlanetCoin") && (object.remainPlanetCoin = message.remainPlanetCoin);
        return object;
      };
      RESP_ShoppingMallPurchase.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_ShoppingMallPurchase;
    }();
    $root.REQ_ShoppingMallItemList = function() {
      function REQ_ShoppingMallItemList(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_ShoppingMallItemList.prototype.itemType = 0;
      REQ_ShoppingMallItemList.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_ShoppingMallItemList.prototype.pageNo = 0;
      REQ_ShoppingMallItemList.prototype.pageSize = 0;
      REQ_ShoppingMallItemList.create = function create(properties) {
        return new REQ_ShoppingMallItemList(properties);
      };
      REQ_ShoppingMallItemList.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.itemType);
        writer.uint32(16).int64(message.petId);
        null != message.pageNo && message.hasOwnProperty("pageNo") && writer.uint32(24).int32(message.pageNo);
        null != message.pageSize && message.hasOwnProperty("pageSize") && writer.uint32(32).int32(message.pageSize);
        return writer;
      };
      REQ_ShoppingMallItemList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_ShoppingMallItemList.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_ShoppingMallItemList();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.itemType = reader.int32();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           case 3:
            message.pageNo = reader.int32();
            break;

           case 4:
            message.pageSize = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("itemType")) throw $util.ProtocolError("missing required 'itemType'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      REQ_ShoppingMallItemList.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_ShoppingMallItemList.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.itemType)) return "itemType: integer expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (null != message.pageNo && message.hasOwnProperty("pageNo") && !$util.isInteger(message.pageNo)) return "pageNo: integer expected";
        if (null != message.pageSize && message.hasOwnProperty("pageSize") && !$util.isInteger(message.pageSize)) return "pageSize: integer expected";
        return null;
      };
      REQ_ShoppingMallItemList.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_ShoppingMallItemList) return object;
        var message = new $root.REQ_ShoppingMallItemList();
        null != object.itemType && (message.itemType = 0 | object.itemType);
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.pageNo && (message.pageNo = 0 | object.pageNo);
        null != object.pageSize && (message.pageSize = 0 | object.pageSize);
        return message;
      };
      REQ_ShoppingMallItemList.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.itemType = 0;
          if ($util.Long) {
            var _long31 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long31.toString() : options.longs === Number ? _long31.toNumber() : _long31;
          } else object.petId = options.longs === String ? "0" : 0;
          object.pageNo = 0;
          object.pageSize = 0;
        }
        null != message.itemType && message.hasOwnProperty("itemType") && (object.itemType = message.itemType);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.pageNo && message.hasOwnProperty("pageNo") && (object.pageNo = message.pageNo);
        null != message.pageSize && message.hasOwnProperty("pageSize") && (object.pageSize = message.pageSize);
        return object;
      };
      REQ_ShoppingMallItemList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_ShoppingMallItemList;
    }();
    $root.RESP_ShoppingMallItemList = function() {
      function RESP_ShoppingMallItemList(properties) {
        this.petMallDetail = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_ShoppingMallItemList.prototype.itemType = 0;
      RESP_ShoppingMallItemList.prototype.petMallDetail = $util.emptyArray;
      RESP_ShoppingMallItemList.prototype.pages = 0;
      RESP_ShoppingMallItemList.prototype.pageCurrentNo = 0;
      RESP_ShoppingMallItemList.prototype.total = 0;
      RESP_ShoppingMallItemList.create = function create(properties) {
        return new RESP_ShoppingMallItemList(properties);
      };
      RESP_ShoppingMallItemList.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.itemType);
        if (null != message.petMallDetail && message.petMallDetail.length) for (var i = 0; i < message.petMallDetail.length; ++i) $root.PetMallDetail.encode(message.petMallDetail[i], writer.uint32(18).fork()).ldelim();
        null != message.pages && message.hasOwnProperty("pages") && writer.uint32(24).int32(message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && writer.uint32(32).int32(message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && writer.uint32(40).int32(message.total);
        return writer;
      };
      RESP_ShoppingMallItemList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_ShoppingMallItemList.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_ShoppingMallItemList();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.itemType = reader.int32();
            break;

           case 2:
            message.petMallDetail && message.petMallDetail.length || (message.petMallDetail = []);
            message.petMallDetail.push($root.PetMallDetail.decode(reader, reader.uint32()));
            break;

           case 3:
            message.pages = reader.int32();
            break;

           case 4:
            message.pageCurrentNo = reader.int32();
            break;

           case 5:
            message.total = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("itemType")) throw $util.ProtocolError("missing required 'itemType'", {
          instance: message
        });
        return message;
      };
      RESP_ShoppingMallItemList.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_ShoppingMallItemList.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.itemType)) return "itemType: integer expected";
        if (null != message.petMallDetail && message.hasOwnProperty("petMallDetail")) {
          if (!Array.isArray(message.petMallDetail)) return "petMallDetail: array expected";
          for (var i = 0; i < message.petMallDetail.length; ++i) {
            var error = $root.PetMallDetail.verify(message.petMallDetail[i]);
            if (error) return "petMallDetail." + error;
          }
        }
        if (null != message.pages && message.hasOwnProperty("pages") && !$util.isInteger(message.pages)) return "pages: integer expected";
        if (null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && !$util.isInteger(message.pageCurrentNo)) return "pageCurrentNo: integer expected";
        if (null != message.total && message.hasOwnProperty("total") && !$util.isInteger(message.total)) return "total: integer expected";
        return null;
      };
      RESP_ShoppingMallItemList.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_ShoppingMallItemList) return object;
        var message = new $root.RESP_ShoppingMallItemList();
        null != object.itemType && (message.itemType = 0 | object.itemType);
        if (object.petMallDetail) {
          if (!Array.isArray(object.petMallDetail)) throw TypeError(".RESP_ShoppingMallItemList.petMallDetail: array expected");
          message.petMallDetail = [];
          for (var i = 0; i < object.petMallDetail.length; ++i) {
            if ("object" !== typeof object.petMallDetail[i]) throw TypeError(".RESP_ShoppingMallItemList.petMallDetail: object expected");
            message.petMallDetail[i] = $root.PetMallDetail.fromObject(object.petMallDetail[i]);
          }
        }
        null != object.pages && (message.pages = 0 | object.pages);
        null != object.pageCurrentNo && (message.pageCurrentNo = 0 | object.pageCurrentNo);
        null != object.total && (message.total = 0 | object.total);
        return message;
      };
      RESP_ShoppingMallItemList.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.petMallDetail = []);
        if (options.defaults) {
          object.itemType = 0;
          object.pages = 0;
          object.pageCurrentNo = 0;
          object.total = 0;
        }
        null != message.itemType && message.hasOwnProperty("itemType") && (object.itemType = message.itemType);
        if (message.petMallDetail && message.petMallDetail.length) {
          object.petMallDetail = [];
          for (var j = 0; j < message.petMallDetail.length; ++j) object.petMallDetail[j] = $root.PetMallDetail.toObject(message.petMallDetail[j], options);
        }
        null != message.pages && message.hasOwnProperty("pages") && (object.pages = message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && (object.pageCurrentNo = message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && (object.total = message.total);
        return object;
      };
      RESP_ShoppingMallItemList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_ShoppingMallItemList;
    }();
    $root.PetMallDetail = function() {
      function PetMallDetail(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PetMallDetail.prototype.commodityId = 0;
      PetMallDetail.prototype.propId = 0;
      PetMallDetail.prototype.soulCoin = 0;
      PetMallDetail.prototype.planetCoin = 0;
      PetMallDetail.prototype.limitLevel = 0;
      PetMallDetail.prototype.cornerMarkUrl = "";
      PetMallDetail.create = function create(properties) {
        return new PetMallDetail(properties);
      };
      PetMallDetail.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.commodityId);
        writer.uint32(16).int32(message.propId);
        writer.uint32(24).int32(message.soulCoin);
        writer.uint32(32).int32(message.planetCoin);
        writer.uint32(40).int32(message.limitLevel);
        null != message.cornerMarkUrl && message.hasOwnProperty("cornerMarkUrl") && writer.uint32(50).string(message.cornerMarkUrl);
        return writer;
      };
      PetMallDetail.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PetMallDetail.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PetMallDetail();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.commodityId = reader.int32();
            break;

           case 2:
            message.propId = reader.int32();
            break;

           case 3:
            message.soulCoin = reader.int32();
            break;

           case 4:
            message.planetCoin = reader.int32();
            break;

           case 5:
            message.limitLevel = reader.int32();
            break;

           case 6:
            message.cornerMarkUrl = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("commodityId")) throw $util.ProtocolError("missing required 'commodityId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        if (!message.hasOwnProperty("soulCoin")) throw $util.ProtocolError("missing required 'soulCoin'", {
          instance: message
        });
        if (!message.hasOwnProperty("planetCoin")) throw $util.ProtocolError("missing required 'planetCoin'", {
          instance: message
        });
        if (!message.hasOwnProperty("limitLevel")) throw $util.ProtocolError("missing required 'limitLevel'", {
          instance: message
        });
        return message;
      };
      PetMallDetail.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PetMallDetail.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.commodityId)) return "commodityId: integer expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        if (!$util.isInteger(message.soulCoin)) return "soulCoin: integer expected";
        if (!$util.isInteger(message.planetCoin)) return "planetCoin: integer expected";
        if (!$util.isInteger(message.limitLevel)) return "limitLevel: integer expected";
        if (null != message.cornerMarkUrl && message.hasOwnProperty("cornerMarkUrl") && !$util.isString(message.cornerMarkUrl)) return "cornerMarkUrl: string expected";
        return null;
      };
      PetMallDetail.fromObject = function fromObject(object) {
        if (object instanceof $root.PetMallDetail) return object;
        var message = new $root.PetMallDetail();
        null != object.commodityId && (message.commodityId = 0 | object.commodityId);
        null != object.propId && (message.propId = 0 | object.propId);
        null != object.soulCoin && (message.soulCoin = 0 | object.soulCoin);
        null != object.planetCoin && (message.planetCoin = 0 | object.planetCoin);
        null != object.limitLevel && (message.limitLevel = 0 | object.limitLevel);
        null != object.cornerMarkUrl && (message.cornerMarkUrl = String(object.cornerMarkUrl));
        return message;
      };
      PetMallDetail.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.commodityId = 0;
          object.propId = 0;
          object.soulCoin = 0;
          object.planetCoin = 0;
          object.limitLevel = 0;
          object.cornerMarkUrl = "";
        }
        null != message.commodityId && message.hasOwnProperty("commodityId") && (object.commodityId = message.commodityId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        null != message.soulCoin && message.hasOwnProperty("soulCoin") && (object.soulCoin = message.soulCoin);
        null != message.planetCoin && message.hasOwnProperty("planetCoin") && (object.planetCoin = message.planetCoin);
        null != message.limitLevel && message.hasOwnProperty("limitLevel") && (object.limitLevel = message.limitLevel);
        null != message.cornerMarkUrl && message.hasOwnProperty("cornerMarkUrl") && (object.cornerMarkUrl = message.cornerMarkUrl);
        return object;
      };
      PetMallDetail.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PetMallDetail;
    }();
    $root.PUSH_SkillModify = function() {
      function PUSH_SkillModify(properties) {
        this.skillIdList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PUSH_SkillModify.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PUSH_SkillModify.prototype.skillIdList = $util.emptyArray;
      PUSH_SkillModify.create = function create(properties) {
        return new PUSH_SkillModify(properties);
      };
      PUSH_SkillModify.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.petId);
        if (null != message.skillIdList && message.skillIdList.length) for (var i = 0; i < message.skillIdList.length; ++i) writer.uint32(16).int32(message.skillIdList[i]);
        return writer;
      };
      PUSH_SkillModify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PUSH_SkillModify.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PUSH_SkillModify();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.petId = reader.int64();
            break;

           case 2:
            message.skillIdList && message.skillIdList.length || (message.skillIdList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.skillIdList.push(reader.int32());
            } else message.skillIdList.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      PUSH_SkillModify.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PUSH_SkillModify.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (null != message.skillIdList && message.hasOwnProperty("skillIdList")) {
          if (!Array.isArray(message.skillIdList)) return "skillIdList: array expected";
          for (var i = 0; i < message.skillIdList.length; ++i) if (!$util.isInteger(message.skillIdList[i])) return "skillIdList: integer[] expected";
        }
        return null;
      };
      PUSH_SkillModify.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_SkillModify) return object;
        var message = new $root.PUSH_SkillModify();
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        if (object.skillIdList) {
          if (!Array.isArray(object.skillIdList)) throw TypeError(".PUSH_SkillModify.skillIdList: array expected");
          message.skillIdList = [];
          for (var i = 0; i < object.skillIdList.length; ++i) message.skillIdList[i] = 0 | object.skillIdList[i];
        }
        return message;
      };
      PUSH_SkillModify.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.skillIdList = []);
        if (options.defaults) if ($util.Long) {
          var _long32 = new $util.Long(0, 0, false);
          object.petId = options.longs === String ? _long32.toString() : options.longs === Number ? _long32.toNumber() : _long32;
        } else object.petId = options.longs === String ? "0" : 0;
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        if (message.skillIdList && message.skillIdList.length) {
          object.skillIdList = [];
          for (var j = 0; j < message.skillIdList.length; ++j) object.skillIdList[j] = message.skillIdList[j];
        }
        return object;
      };
      PUSH_SkillModify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PUSH_SkillModify;
    }();
    $root.REQ_UserCarouselInfo = function() {
      function REQ_UserCarouselInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_UserCarouselInfo.create = function create(properties) {
        return new REQ_UserCarouselInfo(properties);
      };
      REQ_UserCarouselInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      REQ_UserCarouselInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_UserCarouselInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_UserCarouselInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      REQ_UserCarouselInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_UserCarouselInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      REQ_UserCarouselInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_UserCarouselInfo) return object;
        return new $root.REQ_UserCarouselInfo();
      };
      REQ_UserCarouselInfo.toObject = function toObject() {
        return {};
      };
      REQ_UserCarouselInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_UserCarouselInfo;
    }();
    $root.RESP_UserCarouselInfo = function() {
      function RESP_UserCarouselInfo(properties) {
        this.userCarouselInfo = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_UserCarouselInfo.prototype.userCarouselInfo = $util.emptyArray;
      RESP_UserCarouselInfo.create = function create(properties) {
        return new RESP_UserCarouselInfo(properties);
      };
      RESP_UserCarouselInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.userCarouselInfo && message.userCarouselInfo.length) for (var i = 0; i < message.userCarouselInfo.length; ++i) $root.UserCarouselInfo.encode(message.userCarouselInfo[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      RESP_UserCarouselInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_UserCarouselInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_UserCarouselInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userCarouselInfo && message.userCarouselInfo.length || (message.userCarouselInfo = []);
            message.userCarouselInfo.push($root.UserCarouselInfo.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_UserCarouselInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_UserCarouselInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userCarouselInfo && message.hasOwnProperty("userCarouselInfo")) {
          if (!Array.isArray(message.userCarouselInfo)) return "userCarouselInfo: array expected";
          for (var i = 0; i < message.userCarouselInfo.length; ++i) {
            var error = $root.UserCarouselInfo.verify(message.userCarouselInfo[i]);
            if (error) return "userCarouselInfo." + error;
          }
        }
        return null;
      };
      RESP_UserCarouselInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_UserCarouselInfo) return object;
        var message = new $root.RESP_UserCarouselInfo();
        if (object.userCarouselInfo) {
          if (!Array.isArray(object.userCarouselInfo)) throw TypeError(".RESP_UserCarouselInfo.userCarouselInfo: array expected");
          message.userCarouselInfo = [];
          for (var i = 0; i < object.userCarouselInfo.length; ++i) {
            if ("object" !== typeof object.userCarouselInfo[i]) throw TypeError(".RESP_UserCarouselInfo.userCarouselInfo: object expected");
            message.userCarouselInfo[i] = $root.UserCarouselInfo.fromObject(object.userCarouselInfo[i]);
          }
        }
        return message;
      };
      RESP_UserCarouselInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.userCarouselInfo = []);
        if (message.userCarouselInfo && message.userCarouselInfo.length) {
          object.userCarouselInfo = [];
          for (var j = 0; j < message.userCarouselInfo.length; ++j) object.userCarouselInfo[j] = $root.UserCarouselInfo.toObject(message.userCarouselInfo[j], options);
        }
        return object;
      };
      RESP_UserCarouselInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_UserCarouselInfo;
    }();
    $root.UserCarouselInfo = function() {
      function UserCarouselInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserCarouselInfo.prototype.interactUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserCarouselInfo.prototype.interactUserProfile = null;
      UserCarouselInfo.prototype.carouselType = 0;
      UserCarouselInfo.prototype.carouselContent = "";
      UserCarouselInfo.create = function create(properties) {
        return new UserCarouselInfo(properties);
      };
      UserCarouselInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.interactUserId);
        $root.UserProfile.encode(message.interactUserProfile, writer.uint32(18).fork()).ldelim();
        writer.uint32(24).int32(message.carouselType);
        writer.uint32(34).string(message.carouselContent);
        return writer;
      };
      UserCarouselInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserCarouselInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserCarouselInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.interactUserId = reader.int64();
            break;

           case 2:
            message.interactUserProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 3:
            message.carouselType = reader.int32();
            break;

           case 4:
            message.carouselContent = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("interactUserId")) throw $util.ProtocolError("missing required 'interactUserId'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserProfile")) throw $util.ProtocolError("missing required 'interactUserProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("carouselType")) throw $util.ProtocolError("missing required 'carouselType'", {
          instance: message
        });
        if (!message.hasOwnProperty("carouselContent")) throw $util.ProtocolError("missing required 'carouselContent'", {
          instance: message
        });
        return message;
      };
      UserCarouselInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserCarouselInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.interactUserId) && !(message.interactUserId && $util.isInteger(message.interactUserId.low) && $util.isInteger(message.interactUserId.high))) return "interactUserId: integer|Long expected";
        var error = $root.UserProfile.verify(message.interactUserProfile);
        if (error) return "interactUserProfile." + error;
        if (!$util.isInteger(message.carouselType)) return "carouselType: integer expected";
        if (!$util.isString(message.carouselContent)) return "carouselContent: string expected";
        return null;
      };
      UserCarouselInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.UserCarouselInfo) return object;
        var message = new $root.UserCarouselInfo();
        null != object.interactUserId && ($util.Long ? (message.interactUserId = $util.Long.fromValue(object.interactUserId)).unsigned = false : "string" === typeof object.interactUserId ? message.interactUserId = parseInt(object.interactUserId, 10) : "number" === typeof object.interactUserId ? message.interactUserId = object.interactUserId : "object" === typeof object.interactUserId && (message.interactUserId = new $util.LongBits(object.interactUserId.low >>> 0, object.interactUserId.high >>> 0).toNumber()));
        if (null != object.interactUserProfile) {
          if ("object" !== typeof object.interactUserProfile) throw TypeError(".UserCarouselInfo.interactUserProfile: object expected");
          message.interactUserProfile = $root.UserProfile.fromObject(object.interactUserProfile);
        }
        null != object.carouselType && (message.carouselType = 0 | object.carouselType);
        null != object.carouselContent && (message.carouselContent = String(object.carouselContent));
        return message;
      };
      UserCarouselInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long33 = new $util.Long(0, 0, false);
            object.interactUserId = options.longs === String ? _long33.toString() : options.longs === Number ? _long33.toNumber() : _long33;
          } else object.interactUserId = options.longs === String ? "0" : 0;
          object.interactUserProfile = null;
          object.carouselType = 0;
          object.carouselContent = "";
        }
        null != message.interactUserId && message.hasOwnProperty("interactUserId") && ("number" === typeof message.interactUserId ? object.interactUserId = options.longs === String ? String(message.interactUserId) : message.interactUserId : object.interactUserId = options.longs === String ? $util.Long.prototype.toString.call(message.interactUserId) : options.longs === Number ? new $util.LongBits(message.interactUserId.low >>> 0, message.interactUserId.high >>> 0).toNumber() : message.interactUserId);
        null != message.interactUserProfile && message.hasOwnProperty("interactUserProfile") && (object.interactUserProfile = $root.UserProfile.toObject(message.interactUserProfile, options));
        null != message.carouselType && message.hasOwnProperty("carouselType") && (object.carouselType = message.carouselType);
        null != message.carouselContent && message.hasOwnProperty("carouselContent") && (object.carouselContent = message.carouselContent);
        return object;
      };
      UserCarouselInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserCarouselInfo;
    }();
    $root.REQ_UserRemainSoulCoin = function() {
      function REQ_UserRemainSoulCoin(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_UserRemainSoulCoin.create = function create(properties) {
        return new REQ_UserRemainSoulCoin(properties);
      };
      REQ_UserRemainSoulCoin.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        return writer;
      };
      REQ_UserRemainSoulCoin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_UserRemainSoulCoin.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_UserRemainSoulCoin();
        while (reader.pos < end) {
          var tag = reader.uint32();
          tag >>> 3;
          reader.skipType(7 & tag);
        }
        return message;
      };
      REQ_UserRemainSoulCoin.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_UserRemainSoulCoin.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        return null;
      };
      REQ_UserRemainSoulCoin.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_UserRemainSoulCoin) return object;
        return new $root.REQ_UserRemainSoulCoin();
      };
      REQ_UserRemainSoulCoin.toObject = function toObject() {
        return {};
      };
      REQ_UserRemainSoulCoin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_UserRemainSoulCoin;
    }();
    $root.RESP_UserRemainSoulCoin = function() {
      function RESP_UserRemainSoulCoin(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_UserRemainSoulCoin.prototype.remainSoulCoin = 0;
      RESP_UserRemainSoulCoin.create = function create(properties) {
        return new RESP_UserRemainSoulCoin(properties);
      };
      RESP_UserRemainSoulCoin.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.remainSoulCoin);
        return writer;
      };
      RESP_UserRemainSoulCoin.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_UserRemainSoulCoin.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_UserRemainSoulCoin();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.remainSoulCoin = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("remainSoulCoin")) throw $util.ProtocolError("missing required 'remainSoulCoin'", {
          instance: message
        });
        return message;
      };
      RESP_UserRemainSoulCoin.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_UserRemainSoulCoin.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.remainSoulCoin)) return "remainSoulCoin: integer expected";
        return null;
      };
      RESP_UserRemainSoulCoin.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_UserRemainSoulCoin) return object;
        var message = new $root.RESP_UserRemainSoulCoin();
        null != object.remainSoulCoin && (message.remainSoulCoin = 0 | object.remainSoulCoin);
        return message;
      };
      RESP_UserRemainSoulCoin.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        options.defaults && (object.remainSoulCoin = 0);
        null != message.remainSoulCoin && message.hasOwnProperty("remainSoulCoin") && (object.remainSoulCoin = message.remainSoulCoin);
        return object;
      };
      RESP_UserRemainSoulCoin.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_UserRemainSoulCoin;
    }();
    $root.REQ_UserDynamicInfo = function() {
      function REQ_UserDynamicInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      REQ_UserDynamicInfo.prototype.pageNum = 0;
      REQ_UserDynamicInfo.prototype.pageSize = 0;
      REQ_UserDynamicInfo.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      REQ_UserDynamicInfo.create = function create(properties) {
        return new REQ_UserDynamicInfo(properties);
      };
      REQ_UserDynamicInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.pageNum);
        writer.uint32(16).int32(message.pageSize);
        writer.uint32(24).int64(message.petId);
        return writer;
      };
      REQ_UserDynamicInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      REQ_UserDynamicInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.REQ_UserDynamicInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pageNum = reader.int32();
            break;

           case 2:
            message.pageSize = reader.int32();
            break;

           case 3:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("pageNum")) throw $util.ProtocolError("missing required 'pageNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("pageSize")) throw $util.ProtocolError("missing required 'pageSize'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        return message;
      };
      REQ_UserDynamicInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      REQ_UserDynamicInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.pageNum)) return "pageNum: integer expected";
        if (!$util.isInteger(message.pageSize)) return "pageSize: integer expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      REQ_UserDynamicInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.REQ_UserDynamicInfo) return object;
        var message = new $root.REQ_UserDynamicInfo();
        null != object.pageNum && (message.pageNum = 0 | object.pageNum);
        null != object.pageSize && (message.pageSize = 0 | object.pageSize);
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      REQ_UserDynamicInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.pageNum = 0;
          object.pageSize = 0;
          if ($util.Long) {
            var _long34 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long34.toString() : options.longs === Number ? _long34.toNumber() : _long34;
          } else object.petId = options.longs === String ? "0" : 0;
        }
        null != message.pageNum && message.hasOwnProperty("pageNum") && (object.pageNum = message.pageNum);
        null != message.pageSize && message.hasOwnProperty("pageSize") && (object.pageSize = message.pageSize);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      REQ_UserDynamicInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return REQ_UserDynamicInfo;
    }();
    $root.RESP_UserDynamicInfo = function() {
      function RESP_UserDynamicInfo(properties) {
        this.userDynamicInfo = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      RESP_UserDynamicInfo.prototype.pages = 0;
      RESP_UserDynamicInfo.prototype.pageCurrentNo = 0;
      RESP_UserDynamicInfo.prototype.total = 0;
      RESP_UserDynamicInfo.prototype.userDynamicInfo = $util.emptyArray;
      RESP_UserDynamicInfo.create = function create(properties) {
        return new RESP_UserDynamicInfo(properties);
      };
      RESP_UserDynamicInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.pages && message.hasOwnProperty("pages") && writer.uint32(8).int32(message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && writer.uint32(16).int32(message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && writer.uint32(24).int32(message.total);
        if (null != message.userDynamicInfo && message.userDynamicInfo.length) for (var i = 0; i < message.userDynamicInfo.length; ++i) $root.UserDynamicInfo.encode(message.userDynamicInfo[i], writer.uint32(34).fork()).ldelim();
        return writer;
      };
      RESP_UserDynamicInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      RESP_UserDynamicInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.RESP_UserDynamicInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pages = reader.int32();
            break;

           case 2:
            message.pageCurrentNo = reader.int32();
            break;

           case 3:
            message.total = reader.int32();
            break;

           case 4:
            message.userDynamicInfo && message.userDynamicInfo.length || (message.userDynamicInfo = []);
            message.userDynamicInfo.push($root.UserDynamicInfo.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      RESP_UserDynamicInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      RESP_UserDynamicInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.pages && message.hasOwnProperty("pages") && !$util.isInteger(message.pages)) return "pages: integer expected";
        if (null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && !$util.isInteger(message.pageCurrentNo)) return "pageCurrentNo: integer expected";
        if (null != message.total && message.hasOwnProperty("total") && !$util.isInteger(message.total)) return "total: integer expected";
        if (null != message.userDynamicInfo && message.hasOwnProperty("userDynamicInfo")) {
          if (!Array.isArray(message.userDynamicInfo)) return "userDynamicInfo: array expected";
          for (var i = 0; i < message.userDynamicInfo.length; ++i) {
            var error = $root.UserDynamicInfo.verify(message.userDynamicInfo[i]);
            if (error) return "userDynamicInfo." + error;
          }
        }
        return null;
      };
      RESP_UserDynamicInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.RESP_UserDynamicInfo) return object;
        var message = new $root.RESP_UserDynamicInfo();
        null != object.pages && (message.pages = 0 | object.pages);
        null != object.pageCurrentNo && (message.pageCurrentNo = 0 | object.pageCurrentNo);
        null != object.total && (message.total = 0 | object.total);
        if (object.userDynamicInfo) {
          if (!Array.isArray(object.userDynamicInfo)) throw TypeError(".RESP_UserDynamicInfo.userDynamicInfo: array expected");
          message.userDynamicInfo = [];
          for (var i = 0; i < object.userDynamicInfo.length; ++i) {
            if ("object" !== typeof object.userDynamicInfo[i]) throw TypeError(".RESP_UserDynamicInfo.userDynamicInfo: object expected");
            message.userDynamicInfo[i] = $root.UserDynamicInfo.fromObject(object.userDynamicInfo[i]);
          }
        }
        return message;
      };
      RESP_UserDynamicInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.userDynamicInfo = []);
        if (options.defaults) {
          object.pages = 0;
          object.pageCurrentNo = 0;
          object.total = 0;
        }
        null != message.pages && message.hasOwnProperty("pages") && (object.pages = message.pages);
        null != message.pageCurrentNo && message.hasOwnProperty("pageCurrentNo") && (object.pageCurrentNo = message.pageCurrentNo);
        null != message.total && message.hasOwnProperty("total") && (object.total = message.total);
        if (message.userDynamicInfo && message.userDynamicInfo.length) {
          object.userDynamicInfo = [];
          for (var j = 0; j < message.userDynamicInfo.length; ++j) object.userDynamicInfo[j] = $root.UserDynamicInfo.toObject(message.userDynamicInfo[j], options);
        }
        return object;
      };
      RESP_UserDynamicInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return RESP_UserDynamicInfo;
    }();
    $root.UserDynamicInfo = function() {
      function UserDynamicInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserDynamicInfo.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserDynamicInfo.prototype.interactUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserDynamicInfo.prototype.interactUserProfile = null;
      UserDynamicInfo.prototype.dynamicContent = "";
      UserDynamicInfo.prototype.handHeartStatus = 0;
      UserDynamicInfo.prototype.canHelpFeed = 0;
      UserDynamicInfo.prototype.dynamicType = 0;
      UserDynamicInfo.prototype.createTimeStr = "";
      UserDynamicInfo.prototype.sendDirtStatus = 0;
      UserDynamicInfo.create = function create(properties) {
        return new UserDynamicInfo(properties);
      };
      UserDynamicInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.id);
        writer.uint32(16).int64(message.interactUserId);
        $root.UserProfile.encode(message.interactUserProfile, writer.uint32(26).fork()).ldelim();
        writer.uint32(34).string(message.dynamicContent);
        writer.uint32(40).int32(message.handHeartStatus);
        null != message.canHelpFeed && message.hasOwnProperty("canHelpFeed") && writer.uint32(48).int32(message.canHelpFeed);
        writer.uint32(56).int32(message.dynamicType);
        writer.uint32(66).string(message.createTimeStr);
        null != message.sendDirtStatus && message.hasOwnProperty("sendDirtStatus") && writer.uint32(72).int32(message.sendDirtStatus);
        return writer;
      };
      UserDynamicInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserDynamicInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserDynamicInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int64();
            break;

           case 2:
            message.interactUserId = reader.int64();
            break;

           case 3:
            message.interactUserProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 4:
            message.dynamicContent = reader.string();
            break;

           case 5:
            message.handHeartStatus = reader.int32();
            break;

           case 6:
            message.canHelpFeed = reader.int32();
            break;

           case 7:
            message.dynamicType = reader.int32();
            break;

           case 8:
            message.createTimeStr = reader.string();
            break;

           case 9:
            message.sendDirtStatus = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserId")) throw $util.ProtocolError("missing required 'interactUserId'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserProfile")) throw $util.ProtocolError("missing required 'interactUserProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("dynamicContent")) throw $util.ProtocolError("missing required 'dynamicContent'", {
          instance: message
        });
        if (!message.hasOwnProperty("handHeartStatus")) throw $util.ProtocolError("missing required 'handHeartStatus'", {
          instance: message
        });
        if (!message.hasOwnProperty("dynamicType")) throw $util.ProtocolError("missing required 'dynamicType'", {
          instance: message
        });
        if (!message.hasOwnProperty("createTimeStr")) throw $util.ProtocolError("missing required 'createTimeStr'", {
          instance: message
        });
        return message;
      };
      UserDynamicInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserDynamicInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high))) return "id: integer|Long expected";
        if (!$util.isInteger(message.interactUserId) && !(message.interactUserId && $util.isInteger(message.interactUserId.low) && $util.isInteger(message.interactUserId.high))) return "interactUserId: integer|Long expected";
        var error = $root.UserProfile.verify(message.interactUserProfile);
        if (error) return "interactUserProfile." + error;
        if (!$util.isString(message.dynamicContent)) return "dynamicContent: string expected";
        if (!$util.isInteger(message.handHeartStatus)) return "handHeartStatus: integer expected";
        if (null != message.canHelpFeed && message.hasOwnProperty("canHelpFeed") && !$util.isInteger(message.canHelpFeed)) return "canHelpFeed: integer expected";
        if (!$util.isInteger(message.dynamicType)) return "dynamicType: integer expected";
        if (!$util.isString(message.createTimeStr)) return "createTimeStr: string expected";
        if (null != message.sendDirtStatus && message.hasOwnProperty("sendDirtStatus") && !$util.isInteger(message.sendDirtStatus)) return "sendDirtStatus: integer expected";
        return null;
      };
      UserDynamicInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.UserDynamicInfo) return object;
        var message = new $root.UserDynamicInfo();
        null != object.id && ($util.Long ? (message.id = $util.Long.fromValue(object.id)).unsigned = false : "string" === typeof object.id ? message.id = parseInt(object.id, 10) : "number" === typeof object.id ? message.id = object.id : "object" === typeof object.id && (message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber()));
        null != object.interactUserId && ($util.Long ? (message.interactUserId = $util.Long.fromValue(object.interactUserId)).unsigned = false : "string" === typeof object.interactUserId ? message.interactUserId = parseInt(object.interactUserId, 10) : "number" === typeof object.interactUserId ? message.interactUserId = object.interactUserId : "object" === typeof object.interactUserId && (message.interactUserId = new $util.LongBits(object.interactUserId.low >>> 0, object.interactUserId.high >>> 0).toNumber()));
        if (null != object.interactUserProfile) {
          if ("object" !== typeof object.interactUserProfile) throw TypeError(".UserDynamicInfo.interactUserProfile: object expected");
          message.interactUserProfile = $root.UserProfile.fromObject(object.interactUserProfile);
        }
        null != object.dynamicContent && (message.dynamicContent = String(object.dynamicContent));
        null != object.handHeartStatus && (message.handHeartStatus = 0 | object.handHeartStatus);
        null != object.canHelpFeed && (message.canHelpFeed = 0 | object.canHelpFeed);
        null != object.dynamicType && (message.dynamicType = 0 | object.dynamicType);
        null != object.createTimeStr && (message.createTimeStr = String(object.createTimeStr));
        null != object.sendDirtStatus && (message.sendDirtStatus = 0 | object.sendDirtStatus);
        return message;
      };
      UserDynamicInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long35 = new $util.Long(0, 0, false);
            object.id = options.longs === String ? _long35.toString() : options.longs === Number ? _long35.toNumber() : _long35;
          } else object.id = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long35 = new $util.Long(0, 0, false);
            object.interactUserId = options.longs === String ? _long35.toString() : options.longs === Number ? _long35.toNumber() : _long35;
          } else object.interactUserId = options.longs === String ? "0" : 0;
          object.interactUserProfile = null;
          object.dynamicContent = "";
          object.handHeartStatus = 0;
          object.canHelpFeed = 0;
          object.dynamicType = 0;
          object.createTimeStr = "";
          object.sendDirtStatus = 0;
        }
        null != message.id && message.hasOwnProperty("id") && ("number" === typeof message.id ? object.id = options.longs === String ? String(message.id) : message.id : object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id);
        null != message.interactUserId && message.hasOwnProperty("interactUserId") && ("number" === typeof message.interactUserId ? object.interactUserId = options.longs === String ? String(message.interactUserId) : message.interactUserId : object.interactUserId = options.longs === String ? $util.Long.prototype.toString.call(message.interactUserId) : options.longs === Number ? new $util.LongBits(message.interactUserId.low >>> 0, message.interactUserId.high >>> 0).toNumber() : message.interactUserId);
        null != message.interactUserProfile && message.hasOwnProperty("interactUserProfile") && (object.interactUserProfile = $root.UserProfile.toObject(message.interactUserProfile, options));
        null != message.dynamicContent && message.hasOwnProperty("dynamicContent") && (object.dynamicContent = message.dynamicContent);
        null != message.handHeartStatus && message.hasOwnProperty("handHeartStatus") && (object.handHeartStatus = message.handHeartStatus);
        null != message.canHelpFeed && message.hasOwnProperty("canHelpFeed") && (object.canHelpFeed = message.canHelpFeed);
        null != message.dynamicType && message.hasOwnProperty("dynamicType") && (object.dynamicType = message.dynamicType);
        null != message.createTimeStr && message.hasOwnProperty("createTimeStr") && (object.createTimeStr = message.createTimeStr);
        null != message.sendDirtStatus && message.hasOwnProperty("sendDirtStatus") && (object.sendDirtStatus = message.sendDirtStatus);
        return object;
      };
      UserDynamicInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserDynamicInfo;
    }();
    module.exports = $root;
    cc._RF.pop();
  }, {} ],
  parts: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "26b73SK0FFMfY2aOZCV6bkZ", "parts");
    "use strict";
    var $protobuf = protobuf;
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    $root.BizRedPointData = function() {
      function BizRedPointData(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      BizRedPointData.prototype.bizType = 0;
      BizRedPointData.prototype.lightEnable = false;
      BizRedPointData.prototype.showContent = "";
      BizRedPointData.create = function create(properties) {
        return new BizRedPointData(properties);
      };
      BizRedPointData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bizType);
        writer.uint32(16).bool(message.lightEnable);
        null != message.showContent && message.hasOwnProperty("showContent") && writer.uint32(26).string(message.showContent);
        return writer;
      };
      BizRedPointData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      BizRedPointData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.BizRedPointData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bizType = reader.int32();
            break;

           case 2:
            message.lightEnable = reader.bool();
            break;

           case 3:
            message.showContent = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bizType")) throw $util.ProtocolError("missing required 'bizType'", {
          instance: message
        });
        if (!message.hasOwnProperty("lightEnable")) throw $util.ProtocolError("missing required 'lightEnable'", {
          instance: message
        });
        return message;
      };
      BizRedPointData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      BizRedPointData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bizType)) return "bizType: integer expected";
        if ("boolean" !== typeof message.lightEnable) return "lightEnable: boolean expected";
        if (null != message.showContent && message.hasOwnProperty("showContent") && !$util.isString(message.showContent)) return "showContent: string expected";
        return null;
      };
      BizRedPointData.fromObject = function fromObject(object) {
        if (object instanceof $root.BizRedPointData) return object;
        var message = new $root.BizRedPointData();
        null != object.bizType && (message.bizType = 0 | object.bizType);
        null != object.lightEnable && (message.lightEnable = Boolean(object.lightEnable));
        null != object.showContent && (message.showContent = String(object.showContent));
        return message;
      };
      BizRedPointData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.bizType = 0;
          object.lightEnable = false;
          object.showContent = "";
        }
        null != message.bizType && message.hasOwnProperty("bizType") && (object.bizType = message.bizType);
        null != message.lightEnable && message.hasOwnProperty("lightEnable") && (object.lightEnable = message.lightEnable);
        null != message.showContent && message.hasOwnProperty("showContent") && (object.showContent = message.showContent);
        return object;
      };
      BizRedPointData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return BizRedPointData;
    }();
    $root.Digestion = function() {
      function Digestion(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Digestion.prototype.maxFeedNum = 0;
      Digestion.prototype.nowFeedNum = 0;
      Digestion.prototype.digestedTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      Digestion.create = function create(properties) {
        return new Digestion(properties);
      };
      Digestion.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.maxFeedNum);
        writer.uint32(16).int32(message.nowFeedNum);
        null != message.digestedTime && message.hasOwnProperty("digestedTime") && writer.uint32(24).int64(message.digestedTime);
        return writer;
      };
      Digestion.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Digestion.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Digestion();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.maxFeedNum = reader.int32();
            break;

           case 2:
            message.nowFeedNum = reader.int32();
            break;

           case 3:
            message.digestedTime = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("maxFeedNum")) throw $util.ProtocolError("missing required 'maxFeedNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("nowFeedNum")) throw $util.ProtocolError("missing required 'nowFeedNum'", {
          instance: message
        });
        return message;
      };
      Digestion.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Digestion.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.maxFeedNum)) return "maxFeedNum: integer expected";
        if (!$util.isInteger(message.nowFeedNum)) return "nowFeedNum: integer expected";
        if (null != message.digestedTime && message.hasOwnProperty("digestedTime") && !$util.isInteger(message.digestedTime) && !(message.digestedTime && $util.isInteger(message.digestedTime.low) && $util.isInteger(message.digestedTime.high))) return "digestedTime: integer|Long expected";
        return null;
      };
      Digestion.fromObject = function fromObject(object) {
        if (object instanceof $root.Digestion) return object;
        var message = new $root.Digestion();
        null != object.maxFeedNum && (message.maxFeedNum = 0 | object.maxFeedNum);
        null != object.nowFeedNum && (message.nowFeedNum = 0 | object.nowFeedNum);
        null != object.digestedTime && ($util.Long ? (message.digestedTime = $util.Long.fromValue(object.digestedTime)).unsigned = false : "string" === typeof object.digestedTime ? message.digestedTime = parseInt(object.digestedTime, 10) : "number" === typeof object.digestedTime ? message.digestedTime = object.digestedTime : "object" === typeof object.digestedTime && (message.digestedTime = new $util.LongBits(object.digestedTime.low >>> 0, object.digestedTime.high >>> 0).toNumber()));
        return message;
      };
      Digestion.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.maxFeedNum = 0;
          object.nowFeedNum = 0;
          if ($util.Long) {
            var _long = new $util.Long(0, 0, false);
            object.digestedTime = options.longs === String ? _long.toString() : options.longs === Number ? _long.toNumber() : _long;
          } else object.digestedTime = options.longs === String ? "0" : 0;
        }
        null != message.maxFeedNum && message.hasOwnProperty("maxFeedNum") && (object.maxFeedNum = message.maxFeedNum);
        null != message.nowFeedNum && message.hasOwnProperty("nowFeedNum") && (object.nowFeedNum = message.nowFeedNum);
        null != message.digestedTime && message.hasOwnProperty("digestedTime") && ("number" === typeof message.digestedTime ? object.digestedTime = options.longs === String ? String(message.digestedTime) : message.digestedTime : object.digestedTime = options.longs === String ? $util.Long.prototype.toString.call(message.digestedTime) : options.longs === Number ? new $util.LongBits(message.digestedTime.low >>> 0, message.digestedTime.high >>> 0).toNumber() : message.digestedTime);
        return object;
      };
      Digestion.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Digestion;
    }();
    $root.Dress = function() {
      function Dress(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Dress.prototype.propRecognizeId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      Dress.prototype.propId = 0;
      Dress.create = function create(properties) {
        return new Dress(properties);
      };
      Dress.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.propRecognizeId);
        writer.uint32(16).int32(message.propId);
        return writer;
      };
      Dress.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Dress.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Dress();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.propRecognizeId = reader.int64();
            break;

           case 2:
            message.propId = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("propRecognizeId")) throw $util.ProtocolError("missing required 'propRecognizeId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        return message;
      };
      Dress.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Dress.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.propRecognizeId) && !(message.propRecognizeId && $util.isInteger(message.propRecognizeId.low) && $util.isInteger(message.propRecognizeId.high))) return "propRecognizeId: integer|Long expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        return null;
      };
      Dress.fromObject = function fromObject(object) {
        if (object instanceof $root.Dress) return object;
        var message = new $root.Dress();
        null != object.propRecognizeId && ($util.Long ? (message.propRecognizeId = $util.Long.fromValue(object.propRecognizeId)).unsigned = false : "string" === typeof object.propRecognizeId ? message.propRecognizeId = parseInt(object.propRecognizeId, 10) : "number" === typeof object.propRecognizeId ? message.propRecognizeId = object.propRecognizeId : "object" === typeof object.propRecognizeId && (message.propRecognizeId = new $util.LongBits(object.propRecognizeId.low >>> 0, object.propRecognizeId.high >>> 0).toNumber()));
        null != object.propId && (message.propId = 0 | object.propId);
        return message;
      };
      Dress.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long2 = new $util.Long(0, 0, false);
            object.propRecognizeId = options.longs === String ? _long2.toString() : options.longs === Number ? _long2.toNumber() : _long2;
          } else object.propRecognizeId = options.longs === String ? "0" : 0;
          object.propId = 0;
        }
        null != message.propRecognizeId && message.hasOwnProperty("propRecognizeId") && ("number" === typeof message.propRecognizeId ? object.propRecognizeId = options.longs === String ? String(message.propRecognizeId) : message.propRecognizeId : object.propRecognizeId = options.longs === String ? $util.Long.prototype.toString.call(message.propRecognizeId) : options.longs === Number ? new $util.LongBits(message.propRecognizeId.low >>> 0, message.propRecognizeId.high >>> 0).toNumber() : message.propRecognizeId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        return object;
      };
      Dress.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Dress;
    }();
    $root.FriendShortcutInfo = function() {
      function FriendShortcutInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      FriendShortcutInfo.prototype.friendUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FriendShortcutInfo.prototype.friendPetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FriendShortcutInfo.prototype.friendPetLevel = 0;
      FriendShortcutInfo.prototype.friendPetExp = 0;
      FriendShortcutInfo.prototype.interactUserProfile = null;
      FriendShortcutInfo.prototype.userSourceTagType = 0;
      FriendShortcutInfo.prototype.userInteractTagType = 0;
      FriendShortcutInfo.create = function create(properties) {
        return new FriendShortcutInfo(properties);
      };
      FriendShortcutInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.friendUserId);
        writer.uint32(16).int64(message.friendPetId);
        writer.uint32(24).int32(message.friendPetLevel);
        writer.uint32(32).int32(message.friendPetExp);
        $root.UserProfile.encode(message.interactUserProfile, writer.uint32(42).fork()).ldelim();
        writer.uint32(48).int32(message.userSourceTagType);
        null != message.userInteractTagType && message.hasOwnProperty("userInteractTagType") && writer.uint32(56).int32(message.userInteractTagType);
        return writer;
      };
      FriendShortcutInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      FriendShortcutInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.FriendShortcutInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.friendUserId = reader.int64();
            break;

           case 2:
            message.friendPetId = reader.int64();
            break;

           case 3:
            message.friendPetLevel = reader.int32();
            break;

           case 4:
            message.friendPetExp = reader.int32();
            break;

           case 5:
            message.interactUserProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 6:
            message.userSourceTagType = reader.int32();
            break;

           case 7:
            message.userInteractTagType = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("friendUserId")) throw $util.ProtocolError("missing required 'friendUserId'", {
          instance: message
        });
        if (!message.hasOwnProperty("friendPetId")) throw $util.ProtocolError("missing required 'friendPetId'", {
          instance: message
        });
        if (!message.hasOwnProperty("friendPetLevel")) throw $util.ProtocolError("missing required 'friendPetLevel'", {
          instance: message
        });
        if (!message.hasOwnProperty("friendPetExp")) throw $util.ProtocolError("missing required 'friendPetExp'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserProfile")) throw $util.ProtocolError("missing required 'interactUserProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("userSourceTagType")) throw $util.ProtocolError("missing required 'userSourceTagType'", {
          instance: message
        });
        return message;
      };
      FriendShortcutInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      FriendShortcutInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.friendUserId) && !(message.friendUserId && $util.isInteger(message.friendUserId.low) && $util.isInteger(message.friendUserId.high))) return "friendUserId: integer|Long expected";
        if (!$util.isInteger(message.friendPetId) && !(message.friendPetId && $util.isInteger(message.friendPetId.low) && $util.isInteger(message.friendPetId.high))) return "friendPetId: integer|Long expected";
        if (!$util.isInteger(message.friendPetLevel)) return "friendPetLevel: integer expected";
        if (!$util.isInteger(message.friendPetExp)) return "friendPetExp: integer expected";
        var error = $root.UserProfile.verify(message.interactUserProfile);
        if (error) return "interactUserProfile." + error;
        if (!$util.isInteger(message.userSourceTagType)) return "userSourceTagType: integer expected";
        if (null != message.userInteractTagType && message.hasOwnProperty("userInteractTagType") && !$util.isInteger(message.userInteractTagType)) return "userInteractTagType: integer expected";
        return null;
      };
      FriendShortcutInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.FriendShortcutInfo) return object;
        var message = new $root.FriendShortcutInfo();
        null != object.friendUserId && ($util.Long ? (message.friendUserId = $util.Long.fromValue(object.friendUserId)).unsigned = false : "string" === typeof object.friendUserId ? message.friendUserId = parseInt(object.friendUserId, 10) : "number" === typeof object.friendUserId ? message.friendUserId = object.friendUserId : "object" === typeof object.friendUserId && (message.friendUserId = new $util.LongBits(object.friendUserId.low >>> 0, object.friendUserId.high >>> 0).toNumber()));
        null != object.friendPetId && ($util.Long ? (message.friendPetId = $util.Long.fromValue(object.friendPetId)).unsigned = false : "string" === typeof object.friendPetId ? message.friendPetId = parseInt(object.friendPetId, 10) : "number" === typeof object.friendPetId ? message.friendPetId = object.friendPetId : "object" === typeof object.friendPetId && (message.friendPetId = new $util.LongBits(object.friendPetId.low >>> 0, object.friendPetId.high >>> 0).toNumber()));
        null != object.friendPetLevel && (message.friendPetLevel = 0 | object.friendPetLevel);
        null != object.friendPetExp && (message.friendPetExp = 0 | object.friendPetExp);
        if (null != object.interactUserProfile) {
          if ("object" !== typeof object.interactUserProfile) throw TypeError(".FriendShortcutInfo.interactUserProfile: object expected");
          message.interactUserProfile = $root.UserProfile.fromObject(object.interactUserProfile);
        }
        null != object.userSourceTagType && (message.userSourceTagType = 0 | object.userSourceTagType);
        null != object.userInteractTagType && (message.userInteractTagType = 0 | object.userInteractTagType);
        return message;
      };
      FriendShortcutInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long3 = new $util.Long(0, 0, false);
            object.friendUserId = options.longs === String ? _long3.toString() : options.longs === Number ? _long3.toNumber() : _long3;
          } else object.friendUserId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long3 = new $util.Long(0, 0, false);
            object.friendPetId = options.longs === String ? _long3.toString() : options.longs === Number ? _long3.toNumber() : _long3;
          } else object.friendPetId = options.longs === String ? "0" : 0;
          object.friendPetLevel = 0;
          object.friendPetExp = 0;
          object.interactUserProfile = null;
          object.userSourceTagType = 0;
          object.userInteractTagType = 0;
        }
        null != message.friendUserId && message.hasOwnProperty("friendUserId") && ("number" === typeof message.friendUserId ? object.friendUserId = options.longs === String ? String(message.friendUserId) : message.friendUserId : object.friendUserId = options.longs === String ? $util.Long.prototype.toString.call(message.friendUserId) : options.longs === Number ? new $util.LongBits(message.friendUserId.low >>> 0, message.friendUserId.high >>> 0).toNumber() : message.friendUserId);
        null != message.friendPetId && message.hasOwnProperty("friendPetId") && ("number" === typeof message.friendPetId ? object.friendPetId = options.longs === String ? String(message.friendPetId) : message.friendPetId : object.friendPetId = options.longs === String ? $util.Long.prototype.toString.call(message.friendPetId) : options.longs === Number ? new $util.LongBits(message.friendPetId.low >>> 0, message.friendPetId.high >>> 0).toNumber() : message.friendPetId);
        null != message.friendPetLevel && message.hasOwnProperty("friendPetLevel") && (object.friendPetLevel = message.friendPetLevel);
        null != message.friendPetExp && message.hasOwnProperty("friendPetExp") && (object.friendPetExp = message.friendPetExp);
        null != message.interactUserProfile && message.hasOwnProperty("interactUserProfile") && (object.interactUserProfile = $root.UserProfile.toObject(message.interactUserProfile, options));
        null != message.userSourceTagType && message.hasOwnProperty("userSourceTagType") && (object.userSourceTagType = message.userSourceTagType);
        null != message.userInteractTagType && message.hasOwnProperty("userInteractTagType") && (object.userInteractTagType = message.userInteractTagType);
        return object;
      };
      FriendShortcutInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return FriendShortcutInfo;
    }();
    $root.UserProfile = function() {
      function UserProfile(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserProfile.prototype.signature = "";
      UserProfile.prototype.avatarName = "";
      UserProfile.prototype.avatarColor = "";
      UserProfile.prototype.soulCoin = 0;
      UserProfile.prototype.gender = 0;
      UserProfile.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProfile.prototype.userIdEcpt = "";
      UserProfile.create = function create(properties) {
        return new UserProfile(properties);
      };
      UserProfile.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.signature && message.hasOwnProperty("signature") && writer.uint32(10).string(message.signature);
        null != message.avatarName && message.hasOwnProperty("avatarName") && writer.uint32(18).string(message.avatarName);
        null != message.avatarColor && message.hasOwnProperty("avatarColor") && writer.uint32(26).string(message.avatarColor);
        null != message.soulCoin && message.hasOwnProperty("soulCoin") && writer.uint32(33)["double"](message.soulCoin);
        null != message.gender && message.hasOwnProperty("gender") && writer.uint32(40).int32(message.gender);
        null != message.userId && message.hasOwnProperty("userId") && writer.uint32(48).int64(message.userId);
        null != message.userIdEcpt && message.hasOwnProperty("userIdEcpt") && writer.uint32(58).string(message.userIdEcpt);
        return writer;
      };
      UserProfile.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserProfile.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserProfile();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.signature = reader.string();
            break;

           case 2:
            message.avatarName = reader.string();
            break;

           case 3:
            message.avatarColor = reader.string();
            break;

           case 4:
            message.soulCoin = reader["double"]();
            break;

           case 5:
            message.gender = reader.int32();
            break;

           case 6:
            message.userId = reader.int64();
            break;

           case 7:
            message.userIdEcpt = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      UserProfile.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserProfile.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.signature && message.hasOwnProperty("signature") && !$util.isString(message.signature)) return "signature: string expected";
        if (null != message.avatarName && message.hasOwnProperty("avatarName") && !$util.isString(message.avatarName)) return "avatarName: string expected";
        if (null != message.avatarColor && message.hasOwnProperty("avatarColor") && !$util.isString(message.avatarColor)) return "avatarColor: string expected";
        if (null != message.soulCoin && message.hasOwnProperty("soulCoin") && "number" !== typeof message.soulCoin) return "soulCoin: number expected";
        if (null != message.gender && message.hasOwnProperty("gender") && !$util.isInteger(message.gender)) return "gender: integer expected";
        if (null != message.userId && message.hasOwnProperty("userId") && !$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (null != message.userIdEcpt && message.hasOwnProperty("userIdEcpt") && !$util.isString(message.userIdEcpt)) return "userIdEcpt: string expected";
        return null;
      };
      UserProfile.fromObject = function fromObject(object) {
        if (object instanceof $root.UserProfile) return object;
        var message = new $root.UserProfile();
        null != object.signature && (message.signature = String(object.signature));
        null != object.avatarName && (message.avatarName = String(object.avatarName));
        null != object.avatarColor && (message.avatarColor = String(object.avatarColor));
        null != object.soulCoin && (message.soulCoin = Number(object.soulCoin));
        null != object.gender && (message.gender = 0 | object.gender);
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.userIdEcpt && (message.userIdEcpt = String(object.userIdEcpt));
        return message;
      };
      UserProfile.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.signature = "";
          object.avatarName = "";
          object.avatarColor = "";
          object.soulCoin = 0;
          object.gender = 0;
          if ($util.Long) {
            var _long4 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long4.toString() : options.longs === Number ? _long4.toNumber() : _long4;
          } else object.userId = options.longs === String ? "0" : 0;
          object.userIdEcpt = "";
        }
        null != message.signature && message.hasOwnProperty("signature") && (object.signature = message.signature);
        null != message.avatarName && message.hasOwnProperty("avatarName") && (object.avatarName = message.avatarName);
        null != message.avatarColor && message.hasOwnProperty("avatarColor") && (object.avatarColor = message.avatarColor);
        null != message.soulCoin && message.hasOwnProperty("soulCoin") && (object.soulCoin = options.json && !isFinite(message.soulCoin) ? String(message.soulCoin) : message.soulCoin);
        null != message.gender && message.hasOwnProperty("gender") && (object.gender = message.gender);
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.userIdEcpt && message.hasOwnProperty("userIdEcpt") && (object.userIdEcpt = message.userIdEcpt);
        return object;
      };
      UserProfile.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserProfile;
    }();
    $root.FruitTree = function() {
      function FruitTree(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      FruitTree.prototype.treeType = 0;
      FruitTree.prototype.pickEnable = false;
      FruitTree.prototype.grownNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FruitTree.prototype.nextGrownNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FruitTree.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      FruitTree.create = function create(properties) {
        return new FruitTree(properties);
      };
      FruitTree.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.treeType);
        writer.uint32(16).bool(message.pickEnable);
        writer.uint32(24).int64(message.grownNum);
        writer.uint32(32).int64(message.nextGrownNum);
        null != message.petId && message.hasOwnProperty("petId") && writer.uint32(40).int64(message.petId);
        return writer;
      };
      FruitTree.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      FruitTree.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.FruitTree();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.treeType = reader.int32();
            break;

           case 2:
            message.pickEnable = reader.bool();
            break;

           case 3:
            message.grownNum = reader.int64();
            break;

           case 4:
            message.nextGrownNum = reader.int64();
            break;

           case 5:
            message.petId = reader.int64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("treeType")) throw $util.ProtocolError("missing required 'treeType'", {
          instance: message
        });
        if (!message.hasOwnProperty("pickEnable")) throw $util.ProtocolError("missing required 'pickEnable'", {
          instance: message
        });
        if (!message.hasOwnProperty("grownNum")) throw $util.ProtocolError("missing required 'grownNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("nextGrownNum")) throw $util.ProtocolError("missing required 'nextGrownNum'", {
          instance: message
        });
        return message;
      };
      FruitTree.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      FruitTree.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.treeType)) return "treeType: integer expected";
        if ("boolean" !== typeof message.pickEnable) return "pickEnable: boolean expected";
        if (!$util.isInteger(message.grownNum) && !(message.grownNum && $util.isInteger(message.grownNum.low) && $util.isInteger(message.grownNum.high))) return "grownNum: integer|Long expected";
        if (!$util.isInteger(message.nextGrownNum) && !(message.nextGrownNum && $util.isInteger(message.nextGrownNum.low) && $util.isInteger(message.nextGrownNum.high))) return "nextGrownNum: integer|Long expected";
        if (null != message.petId && message.hasOwnProperty("petId") && !$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        return null;
      };
      FruitTree.fromObject = function fromObject(object) {
        if (object instanceof $root.FruitTree) return object;
        var message = new $root.FruitTree();
        null != object.treeType && (message.treeType = 0 | object.treeType);
        null != object.pickEnable && (message.pickEnable = Boolean(object.pickEnable));
        null != object.grownNum && ($util.Long ? (message.grownNum = $util.Long.fromValue(object.grownNum)).unsigned = false : "string" === typeof object.grownNum ? message.grownNum = parseInt(object.grownNum, 10) : "number" === typeof object.grownNum ? message.grownNum = object.grownNum : "object" === typeof object.grownNum && (message.grownNum = new $util.LongBits(object.grownNum.low >>> 0, object.grownNum.high >>> 0).toNumber()));
        null != object.nextGrownNum && ($util.Long ? (message.nextGrownNum = $util.Long.fromValue(object.nextGrownNum)).unsigned = false : "string" === typeof object.nextGrownNum ? message.nextGrownNum = parseInt(object.nextGrownNum, 10) : "number" === typeof object.nextGrownNum ? message.nextGrownNum = object.nextGrownNum : "object" === typeof object.nextGrownNum && (message.nextGrownNum = new $util.LongBits(object.nextGrownNum.low >>> 0, object.nextGrownNum.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        return message;
      };
      FruitTree.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.treeType = 0;
          object.pickEnable = false;
          if ($util.Long) {
            var _long5 = new $util.Long(0, 0, false);
            object.grownNum = options.longs === String ? _long5.toString() : options.longs === Number ? _long5.toNumber() : _long5;
          } else object.grownNum = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long5 = new $util.Long(0, 0, false);
            object.nextGrownNum = options.longs === String ? _long5.toString() : options.longs === Number ? _long5.toNumber() : _long5;
          } else object.nextGrownNum = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long5 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long5.toString() : options.longs === Number ? _long5.toNumber() : _long5;
          } else object.petId = options.longs === String ? "0" : 0;
        }
        null != message.treeType && message.hasOwnProperty("treeType") && (object.treeType = message.treeType);
        null != message.pickEnable && message.hasOwnProperty("pickEnable") && (object.pickEnable = message.pickEnable);
        null != message.grownNum && message.hasOwnProperty("grownNum") && ("number" === typeof message.grownNum ? object.grownNum = options.longs === String ? String(message.grownNum) : message.grownNum : object.grownNum = options.longs === String ? $util.Long.prototype.toString.call(message.grownNum) : options.longs === Number ? new $util.LongBits(message.grownNum.low >>> 0, message.grownNum.high >>> 0).toNumber() : message.grownNum);
        null != message.nextGrownNum && message.hasOwnProperty("nextGrownNum") && ("number" === typeof message.nextGrownNum ? object.nextGrownNum = options.longs === String ? String(message.nextGrownNum) : message.nextGrownNum : object.nextGrownNum = options.longs === String ? $util.Long.prototype.toString.call(message.nextGrownNum) : options.longs === Number ? new $util.LongBits(message.nextGrownNum.low >>> 0, message.nextGrownNum.high >>> 0).toNumber() : message.nextGrownNum);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        return object;
      };
      FruitTree.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return FruitTree;
    }();
    $root.Furniture = function() {
      function Furniture(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Furniture.prototype.propRecognizeId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      Furniture.prototype.propId = 0;
      Furniture.prototype.location = "";
      Furniture.create = function create(properties) {
        return new Furniture(properties);
      };
      Furniture.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.propRecognizeId);
        writer.uint32(16).int32(message.propId);
        writer.uint32(26).string(message.location);
        return writer;
      };
      Furniture.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Furniture.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Furniture();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.propRecognizeId = reader.int64();
            break;

           case 2:
            message.propId = reader.int32();
            break;

           case 3:
            message.location = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("propRecognizeId")) throw $util.ProtocolError("missing required 'propRecognizeId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        if (!message.hasOwnProperty("location")) throw $util.ProtocolError("missing required 'location'", {
          instance: message
        });
        return message;
      };
      Furniture.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Furniture.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.propRecognizeId) && !(message.propRecognizeId && $util.isInteger(message.propRecognizeId.low) && $util.isInteger(message.propRecognizeId.high))) return "propRecognizeId: integer|Long expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        if (!$util.isString(message.location)) return "location: string expected";
        return null;
      };
      Furniture.fromObject = function fromObject(object) {
        if (object instanceof $root.Furniture) return object;
        var message = new $root.Furniture();
        null != object.propRecognizeId && ($util.Long ? (message.propRecognizeId = $util.Long.fromValue(object.propRecognizeId)).unsigned = false : "string" === typeof object.propRecognizeId ? message.propRecognizeId = parseInt(object.propRecognizeId, 10) : "number" === typeof object.propRecognizeId ? message.propRecognizeId = object.propRecognizeId : "object" === typeof object.propRecognizeId && (message.propRecognizeId = new $util.LongBits(object.propRecognizeId.low >>> 0, object.propRecognizeId.high >>> 0).toNumber()));
        null != object.propId && (message.propId = 0 | object.propId);
        null != object.location && (message.location = String(object.location));
        return message;
      };
      Furniture.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long6 = new $util.Long(0, 0, false);
            object.propRecognizeId = options.longs === String ? _long6.toString() : options.longs === Number ? _long6.toNumber() : _long6;
          } else object.propRecognizeId = options.longs === String ? "0" : 0;
          object.propId = 0;
          object.location = "";
        }
        null != message.propRecognizeId && message.hasOwnProperty("propRecognizeId") && ("number" === typeof message.propRecognizeId ? object.propRecognizeId = options.longs === String ? String(message.propRecognizeId) : message.propRecognizeId : object.propRecognizeId = options.longs === String ? $util.Long.prototype.toString.call(message.propRecognizeId) : options.longs === Number ? new $util.LongBits(message.propRecognizeId.low >>> 0, message.propRecognizeId.high >>> 0).toNumber() : message.propRecognizeId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        null != message.location && message.hasOwnProperty("location") && (object.location = message.location);
        return object;
      };
      Furniture.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Furniture;
    }();
    $root.RespTypeEnum = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "REQ_EVENT"] = 0;
      values[valuesById[1] = "PUSH_EVENT"] = 1;
      return values;
    }();
    $root.MsgDataServer = function() {
      function MsgDataServer(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      MsgDataServer.prototype.msgType = "";
      MsgDataServer.prototype.msg = null;
      MsgDataServer.prototype.sn = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      MsgDataServer.prototype.respType = 0;
      MsgDataServer.prototype.verifySN = false;
      MsgDataServer.create = function create(properties) {
        return new MsgDataServer(properties);
      };
      MsgDataServer.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.msgType);
        $root.MsgDataServer.ServerMsgModel.encode(message.msg, writer.uint32(18).fork()).ldelim();
        writer.uint32(24).int64(message.sn);
        writer.uint32(32).int32(message.respType);
        null != message.verifySN && message.hasOwnProperty("verifySN") && writer.uint32(40).bool(message.verifySN);
        return writer;
      };
      MsgDataServer.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      MsgDataServer.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.MsgDataServer();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.msgType = reader.string();
            break;

           case 2:
            message.msg = $root.MsgDataServer.ServerMsgModel.decode(reader, reader.uint32());
            break;

           case 3:
            message.sn = reader.int64();
            break;

           case 4:
            message.respType = reader.int32();
            break;

           case 5:
            message.verifySN = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("msgType")) throw $util.ProtocolError("missing required 'msgType'", {
          instance: message
        });
        if (!message.hasOwnProperty("msg")) throw $util.ProtocolError("missing required 'msg'", {
          instance: message
        });
        if (!message.hasOwnProperty("sn")) throw $util.ProtocolError("missing required 'sn'", {
          instance: message
        });
        if (!message.hasOwnProperty("respType")) throw $util.ProtocolError("missing required 'respType'", {
          instance: message
        });
        return message;
      };
      MsgDataServer.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      MsgDataServer.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isString(message.msgType)) return "msgType: string expected";
        var error = $root.MsgDataServer.ServerMsgModel.verify(message.msg);
        if (error) return "msg." + error;
        if (!$util.isInteger(message.sn) && !(message.sn && $util.isInteger(message.sn.low) && $util.isInteger(message.sn.high))) return "sn: integer|Long expected";
        switch (message.respType) {
         default:
          return "respType: enum value expected";

         case 0:
         case 1:
        }
        if (null != message.verifySN && message.hasOwnProperty("verifySN") && "boolean" !== typeof message.verifySN) return "verifySN: boolean expected";
        return null;
      };
      MsgDataServer.fromObject = function fromObject(object) {
        if (object instanceof $root.MsgDataServer) return object;
        var message = new $root.MsgDataServer();
        null != object.msgType && (message.msgType = String(object.msgType));
        if (null != object.msg) {
          if ("object" !== typeof object.msg) throw TypeError(".MsgDataServer.msg: object expected");
          message.msg = $root.MsgDataServer.ServerMsgModel.fromObject(object.msg);
        }
        null != object.sn && ($util.Long ? (message.sn = $util.Long.fromValue(object.sn)).unsigned = false : "string" === typeof object.sn ? message.sn = parseInt(object.sn, 10) : "number" === typeof object.sn ? message.sn = object.sn : "object" === typeof object.sn && (message.sn = new $util.LongBits(object.sn.low >>> 0, object.sn.high >>> 0).toNumber()));
        switch (object.respType) {
         case "REQ_EVENT":
         case 0:
          message.respType = 0;
          break;

         case "PUSH_EVENT":
         case 1:
          message.respType = 1;
        }
        null != object.verifySN && (message.verifySN = Boolean(object.verifySN));
        return message;
      };
      MsgDataServer.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.msgType = "";
          object.msg = null;
          if ($util.Long) {
            var _long7 = new $util.Long(0, 0, false);
            object.sn = options.longs === String ? _long7.toString() : options.longs === Number ? _long7.toNumber() : _long7;
          } else object.sn = options.longs === String ? "0" : 0;
          object.respType = options.enums === String ? "REQ_EVENT" : 0;
          object.verifySN = false;
        }
        null != message.msgType && message.hasOwnProperty("msgType") && (object.msgType = message.msgType);
        null != message.msg && message.hasOwnProperty("msg") && (object.msg = $root.MsgDataServer.ServerMsgModel.toObject(message.msg, options));
        null != message.sn && message.hasOwnProperty("sn") && ("number" === typeof message.sn ? object.sn = options.longs === String ? String(message.sn) : message.sn : object.sn = options.longs === String ? $util.Long.prototype.toString.call(message.sn) : options.longs === Number ? new $util.LongBits(message.sn.low >>> 0, message.sn.high >>> 0).toNumber() : message.sn);
        null != message.respType && message.hasOwnProperty("respType") && (object.respType = options.enums === String ? $root.RespTypeEnum[message.respType] : message.respType);
        null != message.verifySN && message.hasOwnProperty("verifySN") && (object.verifySN = message.verifySN);
        return object;
      };
      MsgDataServer.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      MsgDataServer.ServerMsgModel = function() {
        function ServerMsgModel(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
        }
        ServerMsgModel.prototype.code = 0;
        ServerMsgModel.prototype.data = $util.newBuffer([]);
        ServerMsgModel.prototype.remark = "";
        ServerMsgModel.create = function create(properties) {
          return new ServerMsgModel(properties);
        };
        ServerMsgModel.encode = function encode(message, writer) {
          writer || (writer = $Writer.create());
          writer.uint32(8).int32(message.code);
          writer.uint32(18).bytes(message.data);
          writer.uint32(26).string(message.remark);
          return writer;
        };
        ServerMsgModel.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        ServerMsgModel.decode = function decode(reader, length) {
          reader instanceof $Reader || (reader = $Reader.create(reader));
          var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.MsgDataServer.ServerMsgModel();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
             case 1:
              message.code = reader.int32();
              break;

             case 2:
              message.data = reader.bytes();
              break;

             case 3:
              message.remark = reader.string();
              break;

             default:
              reader.skipType(7 & tag);
            }
          }
          if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
            instance: message
          });
          if (!message.hasOwnProperty("data")) throw $util.ProtocolError("missing required 'data'", {
            instance: message
          });
          if (!message.hasOwnProperty("remark")) throw $util.ProtocolError("missing required 'remark'", {
            instance: message
          });
          return message;
        };
        ServerMsgModel.decodeDelimited = function decodeDelimited(reader) {
          reader instanceof $Reader || (reader = new $Reader(reader));
          return this.decode(reader, reader.uint32());
        };
        ServerMsgModel.verify = function verify(message) {
          if ("object" !== typeof message || null === message) return "object expected";
          if (!$util.isInteger(message.code)) return "code: integer expected";
          if (!(message.data && "number" === typeof message.data.length || $util.isString(message.data))) return "data: buffer expected";
          if (!$util.isString(message.remark)) return "remark: string expected";
          return null;
        };
        ServerMsgModel.fromObject = function fromObject(object) {
          if (object instanceof $root.MsgDataServer.ServerMsgModel) return object;
          var message = new $root.MsgDataServer.ServerMsgModel();
          null != object.code && (message.code = 0 | object.code);
          null != object.data && ("string" === typeof object.data ? $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0) : object.data.length && (message.data = object.data));
          null != object.remark && (message.remark = String(object.remark));
          return message;
        };
        ServerMsgModel.toObject = function toObject(message, options) {
          options || (options = {});
          var object = {};
          if (options.defaults) {
            object.code = 0;
            if (options.bytes === String) object.data = ""; else {
              object.data = [];
              options.bytes !== Array && (object.data = $util.newBuffer(object.data));
            }
            object.remark = "";
          }
          null != message.code && message.hasOwnProperty("code") && (object.code = message.code);
          null != message.data && message.hasOwnProperty("data") && (object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data);
          null != message.remark && message.hasOwnProperty("remark") && (object.remark = message.remark);
          return object;
        };
        ServerMsgModel.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return ServerMsgModel;
      }();
      return MsgDataServer;
    }();
    $root.MsgDataClient = function() {
      function MsgDataClient(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      MsgDataClient.prototype.msgType = "";
      MsgDataClient.prototype.msg = $util.newBuffer([]);
      MsgDataClient.prototype.sn = 0;
      MsgDataClient.prototype.respType = 0;
      MsgDataClient.create = function create(properties) {
        return new MsgDataClient(properties);
      };
      MsgDataClient.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.msgType);
        writer.uint32(18).bytes(message.msg);
        writer.uint32(24).int32(message.sn);
        null != message.respType && message.hasOwnProperty("respType") && writer.uint32(32).int32(message.respType);
        return writer;
      };
      MsgDataClient.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      MsgDataClient.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.MsgDataClient();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.msgType = reader.string();
            break;

           case 2:
            message.msg = reader.bytes();
            break;

           case 3:
            message.sn = reader.int32();
            break;

           case 4:
            message.respType = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("msgType")) throw $util.ProtocolError("missing required 'msgType'", {
          instance: message
        });
        if (!message.hasOwnProperty("msg")) throw $util.ProtocolError("missing required 'msg'", {
          instance: message
        });
        if (!message.hasOwnProperty("sn")) throw $util.ProtocolError("missing required 'sn'", {
          instance: message
        });
        return message;
      };
      MsgDataClient.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      MsgDataClient.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isString(message.msgType)) return "msgType: string expected";
        if (!(message.msg && "number" === typeof message.msg.length || $util.isString(message.msg))) return "msg: buffer expected";
        if (!$util.isInteger(message.sn)) return "sn: integer expected";
        if (null != message.respType && message.hasOwnProperty("respType")) switch (message.respType) {
         default:
          return "respType: enum value expected";

         case 0:
         case 1:
        }
        return null;
      };
      MsgDataClient.fromObject = function fromObject(object) {
        if (object instanceof $root.MsgDataClient) return object;
        var message = new $root.MsgDataClient();
        null != object.msgType && (message.msgType = String(object.msgType));
        null != object.msg && ("string" === typeof object.msg ? $util.base64.decode(object.msg, message.msg = $util.newBuffer($util.base64.length(object.msg)), 0) : object.msg.length && (message.msg = object.msg));
        null != object.sn && (message.sn = 0 | object.sn);
        switch (object.respType) {
         case "REQ_EVENT":
         case 0:
          message.respType = 0;
          break;

         case "PUSH_EVENT":
         case 1:
          message.respType = 1;
        }
        return message;
      };
      MsgDataClient.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.msgType = "";
          if (options.bytes === String) object.msg = ""; else {
            object.msg = [];
            options.bytes !== Array && (object.msg = $util.newBuffer(object.msg));
          }
          object.sn = 0;
          object.respType = options.enums === String ? "REQ_EVENT" : 0;
        }
        null != message.msgType && message.hasOwnProperty("msgType") && (object.msgType = message.msgType);
        null != message.msg && message.hasOwnProperty("msg") && (object.msg = options.bytes === String ? $util.base64.encode(message.msg, 0, message.msg.length) : options.bytes === Array ? Array.prototype.slice.call(message.msg) : message.msg);
        null != message.sn && message.hasOwnProperty("sn") && (object.sn = message.sn);
        null != message.respType && message.hasOwnProperty("respType") && (object.respType = options.enums === String ? $root.RespTypeEnum[message.respType] : message.respType);
        return object;
      };
      MsgDataClient.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return MsgDataClient;
    }();
    $root.NearPetInfo = function() {
      function NearPetInfo(properties) {
        this.dress = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      NearPetInfo.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      NearPetInfo.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      NearPetInfo.prototype.petLevel = 0;
      NearPetInfo.prototype.petExp = 0;
      NearPetInfo.prototype.petType = 0;
      NearPetInfo.prototype.userProfile = null;
      NearPetInfo.prototype.distance = "";
      NearPetInfo.prototype.interactType = 0;
      NearPetInfo.prototype.dress = $util.emptyArray;
      NearPetInfo.prototype.petImage = "";
      NearPetInfo.create = function create(properties) {
        return new NearPetInfo(properties);
      };
      NearPetInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        writer.uint32(16).int64(message.petId);
        writer.uint32(24).int32(message.petLevel);
        writer.uint32(32).int32(message.petExp);
        writer.uint32(40).int32(message.petType);
        $root.UserProfile.encode(message.userProfile, writer.uint32(50).fork()).ldelim();
        writer.uint32(58).string(message.distance);
        writer.uint32(64).int32(message.interactType);
        if (null != message.dress && message.dress.length) for (var i = 0; i < message.dress.length; ++i) $root.Dress.encode(message.dress[i], writer.uint32(74).fork()).ldelim();
        null != message.petImage && message.hasOwnProperty("petImage") && writer.uint32(82).string(message.petImage);
        return writer;
      };
      NearPetInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      NearPetInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.NearPetInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           case 3:
            message.petLevel = reader.int32();
            break;

           case 4:
            message.petExp = reader.int32();
            break;

           case 5:
            message.petType = reader.int32();
            break;

           case 6:
            message.userProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 7:
            message.distance = reader.string();
            break;

           case 8:
            message.interactType = reader.int32();
            break;

           case 9:
            message.dress && message.dress.length || (message.dress = []);
            message.dress.push($root.Dress.decode(reader, reader.uint32()));
            break;

           case 10:
            message.petImage = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petLevel")) throw $util.ProtocolError("missing required 'petLevel'", {
          instance: message
        });
        if (!message.hasOwnProperty("petExp")) throw $util.ProtocolError("missing required 'petExp'", {
          instance: message
        });
        if (!message.hasOwnProperty("petType")) throw $util.ProtocolError("missing required 'petType'", {
          instance: message
        });
        if (!message.hasOwnProperty("userProfile")) throw $util.ProtocolError("missing required 'userProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("distance")) throw $util.ProtocolError("missing required 'distance'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactType")) throw $util.ProtocolError("missing required 'interactType'", {
          instance: message
        });
        return message;
      };
      NearPetInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      NearPetInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isInteger(message.petLevel)) return "petLevel: integer expected";
        if (!$util.isInteger(message.petExp)) return "petExp: integer expected";
        if (!$util.isInteger(message.petType)) return "petType: integer expected";
        var error = $root.UserProfile.verify(message.userProfile);
        if (error) return "userProfile." + error;
        if (!$util.isString(message.distance)) return "distance: string expected";
        if (!$util.isInteger(message.interactType)) return "interactType: integer expected";
        if (null != message.dress && message.hasOwnProperty("dress")) {
          if (!Array.isArray(message.dress)) return "dress: array expected";
          for (var i = 0; i < message.dress.length; ++i) {
            var error = $root.Dress.verify(message.dress[i]);
            if (error) return "dress." + error;
          }
        }
        if (null != message.petImage && message.hasOwnProperty("petImage") && !$util.isString(message.petImage)) return "petImage: string expected";
        return null;
      };
      NearPetInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.NearPetInfo) return object;
        var message = new $root.NearPetInfo();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.petLevel && (message.petLevel = 0 | object.petLevel);
        null != object.petExp && (message.petExp = 0 | object.petExp);
        null != object.petType && (message.petType = 0 | object.petType);
        if (null != object.userProfile) {
          if ("object" !== typeof object.userProfile) throw TypeError(".NearPetInfo.userProfile: object expected");
          message.userProfile = $root.UserProfile.fromObject(object.userProfile);
        }
        null != object.distance && (message.distance = String(object.distance));
        null != object.interactType && (message.interactType = 0 | object.interactType);
        if (object.dress) {
          if (!Array.isArray(object.dress)) throw TypeError(".NearPetInfo.dress: array expected");
          message.dress = [];
          for (var i = 0; i < object.dress.length; ++i) {
            if ("object" !== typeof object.dress[i]) throw TypeError(".NearPetInfo.dress: object expected");
            message.dress[i] = $root.Dress.fromObject(object.dress[i]);
          }
        }
        null != object.petImage && (message.petImage = String(object.petImage));
        return message;
      };
      NearPetInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.dress = []);
        if (options.defaults) {
          if ($util.Long) {
            var _long8 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long8.toString() : options.longs === Number ? _long8.toNumber() : _long8;
          } else object.userId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long8 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long8.toString() : options.longs === Number ? _long8.toNumber() : _long8;
          } else object.petId = options.longs === String ? "0" : 0;
          object.petLevel = 0;
          object.petExp = 0;
          object.petType = 0;
          object.userProfile = null;
          object.distance = "";
          object.interactType = 0;
          object.petImage = "";
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.petLevel && message.hasOwnProperty("petLevel") && (object.petLevel = message.petLevel);
        null != message.petExp && message.hasOwnProperty("petExp") && (object.petExp = message.petExp);
        null != message.petType && message.hasOwnProperty("petType") && (object.petType = message.petType);
        null != message.userProfile && message.hasOwnProperty("userProfile") && (object.userProfile = $root.UserProfile.toObject(message.userProfile, options));
        null != message.distance && message.hasOwnProperty("distance") && (object.distance = message.distance);
        null != message.interactType && message.hasOwnProperty("interactType") && (object.interactType = message.interactType);
        if (message.dress && message.dress.length) {
          object.dress = [];
          for (var j = 0; j < message.dress.length; ++j) object.dress[j] = $root.Dress.toObject(message.dress[j], options);
        }
        null != message.petImage && message.hasOwnProperty("petImage") && (object.petImage = message.petImage);
        return object;
      };
      NearPetInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return NearPetInfo;
    }();
    $root.Notice = function() {
      function Notice(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      Notice.prototype.id = 0;
      Notice.prototype.title = "";
      Notice.prototype.type = 0;
      Notice.prototype.content = "";
      Notice.prototype.timesLimit = 0;
      Notice.prototype.inCenter = false;
      Notice.prototype.miniUrl = "";
      Notice.create = function create(properties) {
        return new Notice(properties);
      };
      Notice.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.id);
        writer.uint32(18).string(message.title);
        writer.uint32(24).int32(message.type);
        writer.uint32(34).string(message.content);
        null != message.timesLimit && message.hasOwnProperty("timesLimit") && writer.uint32(40).int32(message.timesLimit);
        writer.uint32(48).bool(message.inCenter);
        writer.uint32(58).string(message.miniUrl);
        return writer;
      };
      Notice.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      Notice.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.Notice();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int32();
            break;

           case 2:
            message.title = reader.string();
            break;

           case 3:
            message.type = reader.int32();
            break;

           case 4:
            message.content = reader.string();
            break;

           case 5:
            message.timesLimit = reader.int32();
            break;

           case 6:
            message.inCenter = reader.bool();
            break;

           case 7:
            message.miniUrl = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("title")) throw $util.ProtocolError("missing required 'title'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        if (!message.hasOwnProperty("inCenter")) throw $util.ProtocolError("missing required 'inCenter'", {
          instance: message
        });
        if (!message.hasOwnProperty("miniUrl")) throw $util.ProtocolError("missing required 'miniUrl'", {
          instance: message
        });
        return message;
      };
      Notice.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      Notice.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.id)) return "id: integer expected";
        if (!$util.isString(message.title)) return "title: string expected";
        switch (message.type) {
         default:
          return "type: enum value expected";

         case 0:
         case 1:
         case 2:
        }
        if (!$util.isString(message.content)) return "content: string expected";
        if (null != message.timesLimit && message.hasOwnProperty("timesLimit") && !$util.isInteger(message.timesLimit)) return "timesLimit: integer expected";
        if ("boolean" !== typeof message.inCenter) return "inCenter: boolean expected";
        if (!$util.isString(message.miniUrl)) return "miniUrl: string expected";
        return null;
      };
      Notice.fromObject = function fromObject(object) {
        if (object instanceof $root.Notice) return object;
        var message = new $root.Notice();
        null != object.id && (message.id = 0 | object.id);
        null != object.title && (message.title = String(object.title));
        switch (object.type) {
         case "PICTURE":
         case 0:
          message.type = 0;
          break;

         case "TEXT":
         case 1:
          message.type = 1;
          break;

         case "OTHER":
         case 2:
          message.type = 2;
        }
        null != object.content && (message.content = String(object.content));
        null != object.timesLimit && (message.timesLimit = 0 | object.timesLimit);
        null != object.inCenter && (message.inCenter = Boolean(object.inCenter));
        null != object.miniUrl && (message.miniUrl = String(object.miniUrl));
        return message;
      };
      Notice.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.id = 0;
          object.title = "";
          object.type = options.enums === String ? "PICTURE" : 0;
          object.content = "";
          object.timesLimit = 0;
          object.inCenter = false;
          object.miniUrl = "";
        }
        null != message.id && message.hasOwnProperty("id") && (object.id = message.id);
        null != message.title && message.hasOwnProperty("title") && (object.title = message.title);
        null != message.type && message.hasOwnProperty("type") && (object.type = options.enums === String ? $root.Notice.NoticeContentType[message.type] : message.type);
        null != message.content && message.hasOwnProperty("content") && (object.content = message.content);
        null != message.timesLimit && message.hasOwnProperty("timesLimit") && (object.timesLimit = message.timesLimit);
        null != message.inCenter && message.hasOwnProperty("inCenter") && (object.inCenter = message.inCenter);
        null != message.miniUrl && message.hasOwnProperty("miniUrl") && (object.miniUrl = message.miniUrl);
        return object;
      };
      Notice.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      Notice.NoticeContentType = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PICTURE"] = 0;
        values[valuesById[1] = "TEXT"] = 1;
        values[valuesById[2] = "OTHER"] = 2;
        return values;
      }();
      return Notice;
    }();
    $root.PetData = function() {
      function PetData(properties) {
        this.dress = [];
        this.skillIdList = [];
        this.furniture = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PetData.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.petId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.petType = 0;
      PetData.prototype.exp = 0;
      PetData.prototype.name = "";
      PetData.prototype.gender = false;
      PetData.prototype.fruitTree = null;
      PetData.prototype.locatedUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.locatedPetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      PetData.prototype.inHome = false;
      PetData.prototype.selfDigestion = null;
      PetData.prototype.otherDigestion = null;
      PetData.prototype.ownerName = "";
      PetData.prototype.dress = $util.emptyArray;
      PetData.prototype.skillIdList = $util.emptyArray;
      PetData.prototype.furniture = $util.emptyArray;
      PetData.prototype.userProfile = null;
      PetData.create = function create(properties) {
        return new PetData(properties);
      };
      PetData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        writer.uint32(16).int64(message.petId);
        writer.uint32(24).int32(message.petType);
        writer.uint32(32).int32(message.exp);
        writer.uint32(42).string(message.name);
        writer.uint32(48).bool(message.gender);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && $root.FruitTree.encode(message.fruitTree, writer.uint32(58).fork()).ldelim();
        null != message.locatedUserId && message.hasOwnProperty("locatedUserId") && writer.uint32(64).int64(message.locatedUserId);
        null != message.locatedPetId && message.hasOwnProperty("locatedPetId") && writer.uint32(72).int64(message.locatedPetId);
        writer.uint32(80).bool(message.inHome);
        $root.Digestion.encode(message.selfDigestion, writer.uint32(90).fork()).ldelim();
        $root.Digestion.encode(message.otherDigestion, writer.uint32(98).fork()).ldelim();
        writer.uint32(106).string(message.ownerName);
        if (null != message.dress && message.dress.length) for (var i = 0; i < message.dress.length; ++i) $root.Dress.encode(message.dress[i], writer.uint32(114).fork()).ldelim();
        if (null != message.skillIdList && message.skillIdList.length) for (var i = 0; i < message.skillIdList.length; ++i) writer.uint32(120).int32(message.skillIdList[i]);
        if (null != message.furniture && message.furniture.length) for (var i = 0; i < message.furniture.length; ++i) $root.Furniture.encode(message.furniture[i], writer.uint32(130).fork()).ldelim();
        null != message.userProfile && message.hasOwnProperty("userProfile") && $root.UserProfile.encode(message.userProfile, writer.uint32(138).fork()).ldelim();
        return writer;
      };
      PetData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PetData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PetData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petId = reader.int64();
            break;

           case 3:
            message.petType = reader.int32();
            break;

           case 4:
            message.exp = reader.int32();
            break;

           case 5:
            message.name = reader.string();
            break;

           case 6:
            message.gender = reader.bool();
            break;

           case 7:
            message.fruitTree = $root.FruitTree.decode(reader, reader.uint32());
            break;

           case 8:
            message.locatedUserId = reader.int64();
            break;

           case 9:
            message.locatedPetId = reader.int64();
            break;

           case 10:
            message.inHome = reader.bool();
            break;

           case 11:
            message.selfDigestion = $root.Digestion.decode(reader, reader.uint32());
            break;

           case 12:
            message.otherDigestion = $root.Digestion.decode(reader, reader.uint32());
            break;

           case 13:
            message.ownerName = reader.string();
            break;

           case 14:
            message.dress && message.dress.length || (message.dress = []);
            message.dress.push($root.Dress.decode(reader, reader.uint32()));
            break;

           case 15:
            message.skillIdList && message.skillIdList.length || (message.skillIdList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.skillIdList.push(reader.int32());
            } else message.skillIdList.push(reader.int32());
            break;

           case 16:
            message.furniture && message.furniture.length || (message.furniture = []);
            message.furniture.push($root.Furniture.decode(reader, reader.uint32()));
            break;

           case 17:
            message.userProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petId")) throw $util.ProtocolError("missing required 'petId'", {
          instance: message
        });
        if (!message.hasOwnProperty("petType")) throw $util.ProtocolError("missing required 'petType'", {
          instance: message
        });
        if (!message.hasOwnProperty("exp")) throw $util.ProtocolError("missing required 'exp'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("gender")) throw $util.ProtocolError("missing required 'gender'", {
          instance: message
        });
        if (!message.hasOwnProperty("inHome")) throw $util.ProtocolError("missing required 'inHome'", {
          instance: message
        });
        if (!message.hasOwnProperty("selfDigestion")) throw $util.ProtocolError("missing required 'selfDigestion'", {
          instance: message
        });
        if (!message.hasOwnProperty("otherDigestion")) throw $util.ProtocolError("missing required 'otherDigestion'", {
          instance: message
        });
        if (!message.hasOwnProperty("ownerName")) throw $util.ProtocolError("missing required 'ownerName'", {
          instance: message
        });
        return message;
      };
      PetData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PetData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.petId) && !(message.petId && $util.isInteger(message.petId.low) && $util.isInteger(message.petId.high))) return "petId: integer|Long expected";
        if (!$util.isInteger(message.petType)) return "petType: integer expected";
        if (!$util.isInteger(message.exp)) return "exp: integer expected";
        if (!$util.isString(message.name)) return "name: string expected";
        if ("boolean" !== typeof message.gender) return "gender: boolean expected";
        if (null != message.fruitTree && message.hasOwnProperty("fruitTree")) {
          var error = $root.FruitTree.verify(message.fruitTree);
          if (error) return "fruitTree." + error;
        }
        if (null != message.locatedUserId && message.hasOwnProperty("locatedUserId") && !$util.isInteger(message.locatedUserId) && !(message.locatedUserId && $util.isInteger(message.locatedUserId.low) && $util.isInteger(message.locatedUserId.high))) return "locatedUserId: integer|Long expected";
        if (null != message.locatedPetId && message.hasOwnProperty("locatedPetId") && !$util.isInteger(message.locatedPetId) && !(message.locatedPetId && $util.isInteger(message.locatedPetId.low) && $util.isInteger(message.locatedPetId.high))) return "locatedPetId: integer|Long expected";
        if ("boolean" !== typeof message.inHome) return "inHome: boolean expected";
        var error = $root.Digestion.verify(message.selfDigestion);
        if (error) return "selfDigestion." + error;
        var error = $root.Digestion.verify(message.otherDigestion);
        if (error) return "otherDigestion." + error;
        if (!$util.isString(message.ownerName)) return "ownerName: string expected";
        if (null != message.dress && message.hasOwnProperty("dress")) {
          if (!Array.isArray(message.dress)) return "dress: array expected";
          for (var i = 0; i < message.dress.length; ++i) {
            var error = $root.Dress.verify(message.dress[i]);
            if (error) return "dress." + error;
          }
        }
        if (null != message.skillIdList && message.hasOwnProperty("skillIdList")) {
          if (!Array.isArray(message.skillIdList)) return "skillIdList: array expected";
          for (var i = 0; i < message.skillIdList.length; ++i) if (!$util.isInteger(message.skillIdList[i])) return "skillIdList: integer[] expected";
        }
        if (null != message.furniture && message.hasOwnProperty("furniture")) {
          if (!Array.isArray(message.furniture)) return "furniture: array expected";
          for (var i = 0; i < message.furniture.length; ++i) {
            var error = $root.Furniture.verify(message.furniture[i]);
            if (error) return "furniture." + error;
          }
        }
        if (null != message.userProfile && message.hasOwnProperty("userProfile")) {
          var error = $root.UserProfile.verify(message.userProfile);
          if (error) return "userProfile." + error;
        }
        return null;
      };
      PetData.fromObject = function fromObject(object) {
        if (object instanceof $root.PetData) return object;
        var message = new $root.PetData();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.petId && ($util.Long ? (message.petId = $util.Long.fromValue(object.petId)).unsigned = false : "string" === typeof object.petId ? message.petId = parseInt(object.petId, 10) : "number" === typeof object.petId ? message.petId = object.petId : "object" === typeof object.petId && (message.petId = new $util.LongBits(object.petId.low >>> 0, object.petId.high >>> 0).toNumber()));
        null != object.petType && (message.petType = 0 | object.petType);
        null != object.exp && (message.exp = 0 | object.exp);
        null != object.name && (message.name = String(object.name));
        null != object.gender && (message.gender = Boolean(object.gender));
        if (null != object.fruitTree) {
          if ("object" !== typeof object.fruitTree) throw TypeError(".PetData.fruitTree: object expected");
          message.fruitTree = $root.FruitTree.fromObject(object.fruitTree);
        }
        null != object.locatedUserId && ($util.Long ? (message.locatedUserId = $util.Long.fromValue(object.locatedUserId)).unsigned = false : "string" === typeof object.locatedUserId ? message.locatedUserId = parseInt(object.locatedUserId, 10) : "number" === typeof object.locatedUserId ? message.locatedUserId = object.locatedUserId : "object" === typeof object.locatedUserId && (message.locatedUserId = new $util.LongBits(object.locatedUserId.low >>> 0, object.locatedUserId.high >>> 0).toNumber()));
        null != object.locatedPetId && ($util.Long ? (message.locatedPetId = $util.Long.fromValue(object.locatedPetId)).unsigned = false : "string" === typeof object.locatedPetId ? message.locatedPetId = parseInt(object.locatedPetId, 10) : "number" === typeof object.locatedPetId ? message.locatedPetId = object.locatedPetId : "object" === typeof object.locatedPetId && (message.locatedPetId = new $util.LongBits(object.locatedPetId.low >>> 0, object.locatedPetId.high >>> 0).toNumber()));
        null != object.inHome && (message.inHome = Boolean(object.inHome));
        if (null != object.selfDigestion) {
          if ("object" !== typeof object.selfDigestion) throw TypeError(".PetData.selfDigestion: object expected");
          message.selfDigestion = $root.Digestion.fromObject(object.selfDigestion);
        }
        if (null != object.otherDigestion) {
          if ("object" !== typeof object.otherDigestion) throw TypeError(".PetData.otherDigestion: object expected");
          message.otherDigestion = $root.Digestion.fromObject(object.otherDigestion);
        }
        null != object.ownerName && (message.ownerName = String(object.ownerName));
        if (object.dress) {
          if (!Array.isArray(object.dress)) throw TypeError(".PetData.dress: array expected");
          message.dress = [];
          for (var i = 0; i < object.dress.length; ++i) {
            if ("object" !== typeof object.dress[i]) throw TypeError(".PetData.dress: object expected");
            message.dress[i] = $root.Dress.fromObject(object.dress[i]);
          }
        }
        if (object.skillIdList) {
          if (!Array.isArray(object.skillIdList)) throw TypeError(".PetData.skillIdList: array expected");
          message.skillIdList = [];
          for (var i = 0; i < object.skillIdList.length; ++i) message.skillIdList[i] = 0 | object.skillIdList[i];
        }
        if (object.furniture) {
          if (!Array.isArray(object.furniture)) throw TypeError(".PetData.furniture: array expected");
          message.furniture = [];
          for (var i = 0; i < object.furniture.length; ++i) {
            if ("object" !== typeof object.furniture[i]) throw TypeError(".PetData.furniture: object expected");
            message.furniture[i] = $root.Furniture.fromObject(object.furniture[i]);
          }
        }
        if (null != object.userProfile) {
          if ("object" !== typeof object.userProfile) throw TypeError(".PetData.userProfile: object expected");
          message.userProfile = $root.UserProfile.fromObject(object.userProfile);
        }
        return message;
      };
      PetData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.arrays || options.defaults) {
          object.dress = [];
          object.skillIdList = [];
          object.furniture = [];
        }
        if (options.defaults) {
          if ($util.Long) {
            var _long9 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long9.toString() : options.longs === Number ? _long9.toNumber() : _long9;
          } else object.userId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long9 = new $util.Long(0, 0, false);
            object.petId = options.longs === String ? _long9.toString() : options.longs === Number ? _long9.toNumber() : _long9;
          } else object.petId = options.longs === String ? "0" : 0;
          object.petType = 0;
          object.exp = 0;
          object.name = "";
          object.gender = false;
          object.fruitTree = null;
          if ($util.Long) {
            var _long9 = new $util.Long(0, 0, false);
            object.locatedUserId = options.longs === String ? _long9.toString() : options.longs === Number ? _long9.toNumber() : _long9;
          } else object.locatedUserId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long9 = new $util.Long(0, 0, false);
            object.locatedPetId = options.longs === String ? _long9.toString() : options.longs === Number ? _long9.toNumber() : _long9;
          } else object.locatedPetId = options.longs === String ? "0" : 0;
          object.inHome = false;
          object.selfDigestion = null;
          object.otherDigestion = null;
          object.ownerName = "";
          object.userProfile = null;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.petId && message.hasOwnProperty("petId") && ("number" === typeof message.petId ? object.petId = options.longs === String ? String(message.petId) : message.petId : object.petId = options.longs === String ? $util.Long.prototype.toString.call(message.petId) : options.longs === Number ? new $util.LongBits(message.petId.low >>> 0, message.petId.high >>> 0).toNumber() : message.petId);
        null != message.petType && message.hasOwnProperty("petType") && (object.petType = message.petType);
        null != message.exp && message.hasOwnProperty("exp") && (object.exp = message.exp);
        null != message.name && message.hasOwnProperty("name") && (object.name = message.name);
        null != message.gender && message.hasOwnProperty("gender") && (object.gender = message.gender);
        null != message.fruitTree && message.hasOwnProperty("fruitTree") && (object.fruitTree = $root.FruitTree.toObject(message.fruitTree, options));
        null != message.locatedUserId && message.hasOwnProperty("locatedUserId") && ("number" === typeof message.locatedUserId ? object.locatedUserId = options.longs === String ? String(message.locatedUserId) : message.locatedUserId : object.locatedUserId = options.longs === String ? $util.Long.prototype.toString.call(message.locatedUserId) : options.longs === Number ? new $util.LongBits(message.locatedUserId.low >>> 0, message.locatedUserId.high >>> 0).toNumber() : message.locatedUserId);
        null != message.locatedPetId && message.hasOwnProperty("locatedPetId") && ("number" === typeof message.locatedPetId ? object.locatedPetId = options.longs === String ? String(message.locatedPetId) : message.locatedPetId : object.locatedPetId = options.longs === String ? $util.Long.prototype.toString.call(message.locatedPetId) : options.longs === Number ? new $util.LongBits(message.locatedPetId.low >>> 0, message.locatedPetId.high >>> 0).toNumber() : message.locatedPetId);
        null != message.inHome && message.hasOwnProperty("inHome") && (object.inHome = message.inHome);
        null != message.selfDigestion && message.hasOwnProperty("selfDigestion") && (object.selfDigestion = $root.Digestion.toObject(message.selfDigestion, options));
        null != message.otherDigestion && message.hasOwnProperty("otherDigestion") && (object.otherDigestion = $root.Digestion.toObject(message.otherDigestion, options));
        null != message.ownerName && message.hasOwnProperty("ownerName") && (object.ownerName = message.ownerName);
        if (message.dress && message.dress.length) {
          object.dress = [];
          for (var j = 0; j < message.dress.length; ++j) object.dress[j] = $root.Dress.toObject(message.dress[j], options);
        }
        if (message.skillIdList && message.skillIdList.length) {
          object.skillIdList = [];
          for (var j = 0; j < message.skillIdList.length; ++j) object.skillIdList[j] = message.skillIdList[j];
        }
        if (message.furniture && message.furniture.length) {
          object.furniture = [];
          for (var j = 0; j < message.furniture.length; ++j) object.furniture[j] = $root.Furniture.toObject(message.furniture[j], options);
        }
        null != message.userProfile && message.hasOwnProperty("userProfile") && (object.userProfile = $root.UserProfile.toObject(message.userProfile, options));
        return object;
      };
      PetData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PetData;
    }();
    $root.PetMallDetail = function() {
      function PetMallDetail(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      PetMallDetail.prototype.commodityId = 0;
      PetMallDetail.prototype.propId = 0;
      PetMallDetail.prototype.soulCoin = 0;
      PetMallDetail.prototype.planetCoin = 0;
      PetMallDetail.prototype.limitLevel = 0;
      PetMallDetail.prototype.cornerMarkUrl = "";
      PetMallDetail.create = function create(properties) {
        return new PetMallDetail(properties);
      };
      PetMallDetail.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.commodityId);
        writer.uint32(16).int32(message.propId);
        writer.uint32(24).int32(message.soulCoin);
        writer.uint32(32).int32(message.planetCoin);
        writer.uint32(40).int32(message.limitLevel);
        null != message.cornerMarkUrl && message.hasOwnProperty("cornerMarkUrl") && writer.uint32(50).string(message.cornerMarkUrl);
        return writer;
      };
      PetMallDetail.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      PetMallDetail.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.PetMallDetail();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.commodityId = reader.int32();
            break;

           case 2:
            message.propId = reader.int32();
            break;

           case 3:
            message.soulCoin = reader.int32();
            break;

           case 4:
            message.planetCoin = reader.int32();
            break;

           case 5:
            message.limitLevel = reader.int32();
            break;

           case 6:
            message.cornerMarkUrl = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("commodityId")) throw $util.ProtocolError("missing required 'commodityId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        if (!message.hasOwnProperty("soulCoin")) throw $util.ProtocolError("missing required 'soulCoin'", {
          instance: message
        });
        if (!message.hasOwnProperty("planetCoin")) throw $util.ProtocolError("missing required 'planetCoin'", {
          instance: message
        });
        if (!message.hasOwnProperty("limitLevel")) throw $util.ProtocolError("missing required 'limitLevel'", {
          instance: message
        });
        return message;
      };
      PetMallDetail.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      PetMallDetail.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.commodityId)) return "commodityId: integer expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        if (!$util.isInteger(message.soulCoin)) return "soulCoin: integer expected";
        if (!$util.isInteger(message.planetCoin)) return "planetCoin: integer expected";
        if (!$util.isInteger(message.limitLevel)) return "limitLevel: integer expected";
        if (null != message.cornerMarkUrl && message.hasOwnProperty("cornerMarkUrl") && !$util.isString(message.cornerMarkUrl)) return "cornerMarkUrl: string expected";
        return null;
      };
      PetMallDetail.fromObject = function fromObject(object) {
        if (object instanceof $root.PetMallDetail) return object;
        var message = new $root.PetMallDetail();
        null != object.commodityId && (message.commodityId = 0 | object.commodityId);
        null != object.propId && (message.propId = 0 | object.propId);
        null != object.soulCoin && (message.soulCoin = 0 | object.soulCoin);
        null != object.planetCoin && (message.planetCoin = 0 | object.planetCoin);
        null != object.limitLevel && (message.limitLevel = 0 | object.limitLevel);
        null != object.cornerMarkUrl && (message.cornerMarkUrl = String(object.cornerMarkUrl));
        return message;
      };
      PetMallDetail.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          object.commodityId = 0;
          object.propId = 0;
          object.soulCoin = 0;
          object.planetCoin = 0;
          object.limitLevel = 0;
          object.cornerMarkUrl = "";
        }
        null != message.commodityId && message.hasOwnProperty("commodityId") && (object.commodityId = message.commodityId);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        null != message.soulCoin && message.hasOwnProperty("soulCoin") && (object.soulCoin = message.soulCoin);
        null != message.planetCoin && message.hasOwnProperty("planetCoin") && (object.planetCoin = message.planetCoin);
        null != message.limitLevel && message.hasOwnProperty("limitLevel") && (object.limitLevel = message.limitLevel);
        null != message.cornerMarkUrl && message.hasOwnProperty("cornerMarkUrl") && (object.cornerMarkUrl = message.cornerMarkUrl);
        return object;
      };
      PetMallDetail.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return PetMallDetail;
    }();
    $root.PropsTypeEnum = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[10001] = "FOOD"] = 10001;
      values[valuesById[10002] = "COIN"] = 10002;
      values[valuesById[10003] = "BUBBLE"] = 10003;
      values[valuesById[10004] = "DRESS"] = 10004;
      return values;
    }();
    $root.UserBubble = function() {
      function UserBubble(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserBubble.prototype.bubbleUniqueId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.overheadPetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.pastTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.innerPropType = 0;
      UserBubble.prototype.innerPropId = 0;
      UserBubble.prototype.innerPropNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserBubble.prototype.helpFeedEachOther = false;
      UserBubble.create = function create(properties) {
        return new UserBubble(properties);
      };
      UserBubble.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.bubbleUniqueId);
        writer.uint32(24).int64(message.overheadPetId);
        writer.uint32(32).int64(message.pastTime);
        writer.uint32(40).int32(message.innerPropType);
        writer.uint32(48).int32(message.innerPropId);
        writer.uint32(56).int64(message.innerPropNum);
        writer.uint32(64).bool(message.helpFeedEachOther);
        return writer;
      };
      UserBubble.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserBubble.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserBubble();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bubbleUniqueId = reader.int64();
            break;

           case 3:
            message.overheadPetId = reader.int64();
            break;

           case 4:
            message.pastTime = reader.int64();
            break;

           case 5:
            message.innerPropType = reader.int32();
            break;

           case 6:
            message.innerPropId = reader.int32();
            break;

           case 7:
            message.innerPropNum = reader.int64();
            break;

           case 8:
            message.helpFeedEachOther = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bubbleUniqueId")) throw $util.ProtocolError("missing required 'bubbleUniqueId'", {
          instance: message
        });
        if (!message.hasOwnProperty("overheadPetId")) throw $util.ProtocolError("missing required 'overheadPetId'", {
          instance: message
        });
        if (!message.hasOwnProperty("pastTime")) throw $util.ProtocolError("missing required 'pastTime'", {
          instance: message
        });
        if (!message.hasOwnProperty("innerPropType")) throw $util.ProtocolError("missing required 'innerPropType'", {
          instance: message
        });
        if (!message.hasOwnProperty("innerPropId")) throw $util.ProtocolError("missing required 'innerPropId'", {
          instance: message
        });
        if (!message.hasOwnProperty("innerPropNum")) throw $util.ProtocolError("missing required 'innerPropNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("helpFeedEachOther")) throw $util.ProtocolError("missing required 'helpFeedEachOther'", {
          instance: message
        });
        return message;
      };
      UserBubble.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserBubble.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.bubbleUniqueId) && !(message.bubbleUniqueId && $util.isInteger(message.bubbleUniqueId.low) && $util.isInteger(message.bubbleUniqueId.high))) return "bubbleUniqueId: integer|Long expected";
        if (!$util.isInteger(message.overheadPetId) && !(message.overheadPetId && $util.isInteger(message.overheadPetId.low) && $util.isInteger(message.overheadPetId.high))) return "overheadPetId: integer|Long expected";
        if (!$util.isInteger(message.pastTime) && !(message.pastTime && $util.isInteger(message.pastTime.low) && $util.isInteger(message.pastTime.high))) return "pastTime: integer|Long expected";
        if (!$util.isInteger(message.innerPropType)) return "innerPropType: integer expected";
        if (!$util.isInteger(message.innerPropId)) return "innerPropId: integer expected";
        if (!$util.isInteger(message.innerPropNum) && !(message.innerPropNum && $util.isInteger(message.innerPropNum.low) && $util.isInteger(message.innerPropNum.high))) return "innerPropNum: integer|Long expected";
        if ("boolean" !== typeof message.helpFeedEachOther) return "helpFeedEachOther: boolean expected";
        return null;
      };
      UserBubble.fromObject = function fromObject(object) {
        if (object instanceof $root.UserBubble) return object;
        var message = new $root.UserBubble();
        null != object.bubbleUniqueId && ($util.Long ? (message.bubbleUniqueId = $util.Long.fromValue(object.bubbleUniqueId)).unsigned = false : "string" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = parseInt(object.bubbleUniqueId, 10) : "number" === typeof object.bubbleUniqueId ? message.bubbleUniqueId = object.bubbleUniqueId : "object" === typeof object.bubbleUniqueId && (message.bubbleUniqueId = new $util.LongBits(object.bubbleUniqueId.low >>> 0, object.bubbleUniqueId.high >>> 0).toNumber()));
        null != object.overheadPetId && ($util.Long ? (message.overheadPetId = $util.Long.fromValue(object.overheadPetId)).unsigned = false : "string" === typeof object.overheadPetId ? message.overheadPetId = parseInt(object.overheadPetId, 10) : "number" === typeof object.overheadPetId ? message.overheadPetId = object.overheadPetId : "object" === typeof object.overheadPetId && (message.overheadPetId = new $util.LongBits(object.overheadPetId.low >>> 0, object.overheadPetId.high >>> 0).toNumber()));
        null != object.pastTime && ($util.Long ? (message.pastTime = $util.Long.fromValue(object.pastTime)).unsigned = false : "string" === typeof object.pastTime ? message.pastTime = parseInt(object.pastTime, 10) : "number" === typeof object.pastTime ? message.pastTime = object.pastTime : "object" === typeof object.pastTime && (message.pastTime = new $util.LongBits(object.pastTime.low >>> 0, object.pastTime.high >>> 0).toNumber()));
        null != object.innerPropType && (message.innerPropType = 0 | object.innerPropType);
        null != object.innerPropId && (message.innerPropId = 0 | object.innerPropId);
        null != object.innerPropNum && ($util.Long ? (message.innerPropNum = $util.Long.fromValue(object.innerPropNum)).unsigned = false : "string" === typeof object.innerPropNum ? message.innerPropNum = parseInt(object.innerPropNum, 10) : "number" === typeof object.innerPropNum ? message.innerPropNum = object.innerPropNum : "object" === typeof object.innerPropNum && (message.innerPropNum = new $util.LongBits(object.innerPropNum.low >>> 0, object.innerPropNum.high >>> 0).toNumber()));
        null != object.helpFeedEachOther && (message.helpFeedEachOther = Boolean(object.helpFeedEachOther));
        return message;
      };
      UserBubble.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long10 = new $util.Long(0, 0, false);
            object.bubbleUniqueId = options.longs === String ? _long10.toString() : options.longs === Number ? _long10.toNumber() : _long10;
          } else object.bubbleUniqueId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long10 = new $util.Long(0, 0, false);
            object.overheadPetId = options.longs === String ? _long10.toString() : options.longs === Number ? _long10.toNumber() : _long10;
          } else object.overheadPetId = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long10 = new $util.Long(0, 0, false);
            object.pastTime = options.longs === String ? _long10.toString() : options.longs === Number ? _long10.toNumber() : _long10;
          } else object.pastTime = options.longs === String ? "0" : 0;
          object.innerPropType = 0;
          object.innerPropId = 0;
          if ($util.Long) {
            var _long10 = new $util.Long(0, 0, false);
            object.innerPropNum = options.longs === String ? _long10.toString() : options.longs === Number ? _long10.toNumber() : _long10;
          } else object.innerPropNum = options.longs === String ? "0" : 0;
          object.helpFeedEachOther = false;
        }
        null != message.bubbleUniqueId && message.hasOwnProperty("bubbleUniqueId") && ("number" === typeof message.bubbleUniqueId ? object.bubbleUniqueId = options.longs === String ? String(message.bubbleUniqueId) : message.bubbleUniqueId : object.bubbleUniqueId = options.longs === String ? $util.Long.prototype.toString.call(message.bubbleUniqueId) : options.longs === Number ? new $util.LongBits(message.bubbleUniqueId.low >>> 0, message.bubbleUniqueId.high >>> 0).toNumber() : message.bubbleUniqueId);
        null != message.overheadPetId && message.hasOwnProperty("overheadPetId") && ("number" === typeof message.overheadPetId ? object.overheadPetId = options.longs === String ? String(message.overheadPetId) : message.overheadPetId : object.overheadPetId = options.longs === String ? $util.Long.prototype.toString.call(message.overheadPetId) : options.longs === Number ? new $util.LongBits(message.overheadPetId.low >>> 0, message.overheadPetId.high >>> 0).toNumber() : message.overheadPetId);
        null != message.pastTime && message.hasOwnProperty("pastTime") && ("number" === typeof message.pastTime ? object.pastTime = options.longs === String ? String(message.pastTime) : message.pastTime : object.pastTime = options.longs === String ? $util.Long.prototype.toString.call(message.pastTime) : options.longs === Number ? new $util.LongBits(message.pastTime.low >>> 0, message.pastTime.high >>> 0).toNumber() : message.pastTime);
        null != message.innerPropType && message.hasOwnProperty("innerPropType") && (object.innerPropType = message.innerPropType);
        null != message.innerPropId && message.hasOwnProperty("innerPropId") && (object.innerPropId = message.innerPropId);
        null != message.innerPropNum && message.hasOwnProperty("innerPropNum") && ("number" === typeof message.innerPropNum ? object.innerPropNum = options.longs === String ? String(message.innerPropNum) : message.innerPropNum : object.innerPropNum = options.longs === String ? $util.Long.prototype.toString.call(message.innerPropNum) : options.longs === Number ? new $util.LongBits(message.innerPropNum.low >>> 0, message.innerPropNum.high >>> 0).toNumber() : message.innerPropNum);
        null != message.helpFeedEachOther && message.hasOwnProperty("helpFeedEachOther") && (object.helpFeedEachOther = message.helpFeedEachOther);
        return object;
      };
      UserBubble.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserBubble;
    }();
    $root.UserCarouselInfo = function() {
      function UserCarouselInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserCarouselInfo.prototype.interactUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserCarouselInfo.prototype.interactUserProfile = null;
      UserCarouselInfo.prototype.carouselType = 0;
      UserCarouselInfo.prototype.carouselContent = "";
      UserCarouselInfo.create = function create(properties) {
        return new UserCarouselInfo(properties);
      };
      UserCarouselInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.interactUserId);
        $root.UserProfile.encode(message.interactUserProfile, writer.uint32(18).fork()).ldelim();
        writer.uint32(24).int32(message.carouselType);
        writer.uint32(34).string(message.carouselContent);
        return writer;
      };
      UserCarouselInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserCarouselInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserCarouselInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.interactUserId = reader.int64();
            break;

           case 2:
            message.interactUserProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 3:
            message.carouselType = reader.int32();
            break;

           case 4:
            message.carouselContent = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("interactUserId")) throw $util.ProtocolError("missing required 'interactUserId'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserProfile")) throw $util.ProtocolError("missing required 'interactUserProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("carouselType")) throw $util.ProtocolError("missing required 'carouselType'", {
          instance: message
        });
        if (!message.hasOwnProperty("carouselContent")) throw $util.ProtocolError("missing required 'carouselContent'", {
          instance: message
        });
        return message;
      };
      UserCarouselInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserCarouselInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.interactUserId) && !(message.interactUserId && $util.isInteger(message.interactUserId.low) && $util.isInteger(message.interactUserId.high))) return "interactUserId: integer|Long expected";
        var error = $root.UserProfile.verify(message.interactUserProfile);
        if (error) return "interactUserProfile." + error;
        if (!$util.isInteger(message.carouselType)) return "carouselType: integer expected";
        if (!$util.isString(message.carouselContent)) return "carouselContent: string expected";
        return null;
      };
      UserCarouselInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.UserCarouselInfo) return object;
        var message = new $root.UserCarouselInfo();
        null != object.interactUserId && ($util.Long ? (message.interactUserId = $util.Long.fromValue(object.interactUserId)).unsigned = false : "string" === typeof object.interactUserId ? message.interactUserId = parseInt(object.interactUserId, 10) : "number" === typeof object.interactUserId ? message.interactUserId = object.interactUserId : "object" === typeof object.interactUserId && (message.interactUserId = new $util.LongBits(object.interactUserId.low >>> 0, object.interactUserId.high >>> 0).toNumber()));
        if (null != object.interactUserProfile) {
          if ("object" !== typeof object.interactUserProfile) throw TypeError(".UserCarouselInfo.interactUserProfile: object expected");
          message.interactUserProfile = $root.UserProfile.fromObject(object.interactUserProfile);
        }
        null != object.carouselType && (message.carouselType = 0 | object.carouselType);
        null != object.carouselContent && (message.carouselContent = String(object.carouselContent));
        return message;
      };
      UserCarouselInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long11 = new $util.Long(0, 0, false);
            object.interactUserId = options.longs === String ? _long11.toString() : options.longs === Number ? _long11.toNumber() : _long11;
          } else object.interactUserId = options.longs === String ? "0" : 0;
          object.interactUserProfile = null;
          object.carouselType = 0;
          object.carouselContent = "";
        }
        null != message.interactUserId && message.hasOwnProperty("interactUserId") && ("number" === typeof message.interactUserId ? object.interactUserId = options.longs === String ? String(message.interactUserId) : message.interactUserId : object.interactUserId = options.longs === String ? $util.Long.prototype.toString.call(message.interactUserId) : options.longs === Number ? new $util.LongBits(message.interactUserId.low >>> 0, message.interactUserId.high >>> 0).toNumber() : message.interactUserId);
        null != message.interactUserProfile && message.hasOwnProperty("interactUserProfile") && (object.interactUserProfile = $root.UserProfile.toObject(message.interactUserProfile, options));
        null != message.carouselType && message.hasOwnProperty("carouselType") && (object.carouselType = message.carouselType);
        null != message.carouselContent && message.hasOwnProperty("carouselContent") && (object.carouselContent = message.carouselContent);
        return object;
      };
      UserCarouselInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserCarouselInfo;
    }();
    $root.UserDynamicInfo = function() {
      function UserDynamicInfo(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserDynamicInfo.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserDynamicInfo.prototype.interactUserId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserDynamicInfo.prototype.interactUserProfile = null;
      UserDynamicInfo.prototype.dynamicContent = "";
      UserDynamicInfo.prototype.handHeartStatus = 0;
      UserDynamicInfo.prototype.canHelpFeed = 0;
      UserDynamicInfo.prototype.dynamicType = 0;
      UserDynamicInfo.prototype.createTimeStr = "";
      UserDynamicInfo.prototype.sendDirtStatus = 0;
      UserDynamicInfo.create = function create(properties) {
        return new UserDynamicInfo(properties);
      };
      UserDynamicInfo.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.id);
        writer.uint32(16).int64(message.interactUserId);
        $root.UserProfile.encode(message.interactUserProfile, writer.uint32(26).fork()).ldelim();
        writer.uint32(34).string(message.dynamicContent);
        writer.uint32(40).int32(message.handHeartStatus);
        null != message.canHelpFeed && message.hasOwnProperty("canHelpFeed") && writer.uint32(48).int32(message.canHelpFeed);
        writer.uint32(56).int32(message.dynamicType);
        writer.uint32(66).string(message.createTimeStr);
        null != message.sendDirtStatus && message.hasOwnProperty("sendDirtStatus") && writer.uint32(72).int32(message.sendDirtStatus);
        return writer;
      };
      UserDynamicInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserDynamicInfo.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserDynamicInfo();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int64();
            break;

           case 2:
            message.interactUserId = reader.int64();
            break;

           case 3:
            message.interactUserProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 4:
            message.dynamicContent = reader.string();
            break;

           case 5:
            message.handHeartStatus = reader.int32();
            break;

           case 6:
            message.canHelpFeed = reader.int32();
            break;

           case 7:
            message.dynamicType = reader.int32();
            break;

           case 8:
            message.createTimeStr = reader.string();
            break;

           case 9:
            message.sendDirtStatus = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserId")) throw $util.ProtocolError("missing required 'interactUserId'", {
          instance: message
        });
        if (!message.hasOwnProperty("interactUserProfile")) throw $util.ProtocolError("missing required 'interactUserProfile'", {
          instance: message
        });
        if (!message.hasOwnProperty("dynamicContent")) throw $util.ProtocolError("missing required 'dynamicContent'", {
          instance: message
        });
        if (!message.hasOwnProperty("handHeartStatus")) throw $util.ProtocolError("missing required 'handHeartStatus'", {
          instance: message
        });
        if (!message.hasOwnProperty("dynamicType")) throw $util.ProtocolError("missing required 'dynamicType'", {
          instance: message
        });
        if (!message.hasOwnProperty("createTimeStr")) throw $util.ProtocolError("missing required 'createTimeStr'", {
          instance: message
        });
        return message;
      };
      UserDynamicInfo.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserDynamicInfo.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high))) return "id: integer|Long expected";
        if (!$util.isInteger(message.interactUserId) && !(message.interactUserId && $util.isInteger(message.interactUserId.low) && $util.isInteger(message.interactUserId.high))) return "interactUserId: integer|Long expected";
        var error = $root.UserProfile.verify(message.interactUserProfile);
        if (error) return "interactUserProfile." + error;
        if (!$util.isString(message.dynamicContent)) return "dynamicContent: string expected";
        if (!$util.isInteger(message.handHeartStatus)) return "handHeartStatus: integer expected";
        if (null != message.canHelpFeed && message.hasOwnProperty("canHelpFeed") && !$util.isInteger(message.canHelpFeed)) return "canHelpFeed: integer expected";
        if (!$util.isInteger(message.dynamicType)) return "dynamicType: integer expected";
        if (!$util.isString(message.createTimeStr)) return "createTimeStr: string expected";
        if (null != message.sendDirtStatus && message.hasOwnProperty("sendDirtStatus") && !$util.isInteger(message.sendDirtStatus)) return "sendDirtStatus: integer expected";
        return null;
      };
      UserDynamicInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.UserDynamicInfo) return object;
        var message = new $root.UserDynamicInfo();
        null != object.id && ($util.Long ? (message.id = $util.Long.fromValue(object.id)).unsigned = false : "string" === typeof object.id ? message.id = parseInt(object.id, 10) : "number" === typeof object.id ? message.id = object.id : "object" === typeof object.id && (message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber()));
        null != object.interactUserId && ($util.Long ? (message.interactUserId = $util.Long.fromValue(object.interactUserId)).unsigned = false : "string" === typeof object.interactUserId ? message.interactUserId = parseInt(object.interactUserId, 10) : "number" === typeof object.interactUserId ? message.interactUserId = object.interactUserId : "object" === typeof object.interactUserId && (message.interactUserId = new $util.LongBits(object.interactUserId.low >>> 0, object.interactUserId.high >>> 0).toNumber()));
        if (null != object.interactUserProfile) {
          if ("object" !== typeof object.interactUserProfile) throw TypeError(".UserDynamicInfo.interactUserProfile: object expected");
          message.interactUserProfile = $root.UserProfile.fromObject(object.interactUserProfile);
        }
        null != object.dynamicContent && (message.dynamicContent = String(object.dynamicContent));
        null != object.handHeartStatus && (message.handHeartStatus = 0 | object.handHeartStatus);
        null != object.canHelpFeed && (message.canHelpFeed = 0 | object.canHelpFeed);
        null != object.dynamicType && (message.dynamicType = 0 | object.dynamicType);
        null != object.createTimeStr && (message.createTimeStr = String(object.createTimeStr));
        null != object.sendDirtStatus && (message.sendDirtStatus = 0 | object.sendDirtStatus);
        return message;
      };
      UserDynamicInfo.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.defaults) {
          if ($util.Long) {
            var _long12 = new $util.Long(0, 0, false);
            object.id = options.longs === String ? _long12.toString() : options.longs === Number ? _long12.toNumber() : _long12;
          } else object.id = options.longs === String ? "0" : 0;
          if ($util.Long) {
            var _long12 = new $util.Long(0, 0, false);
            object.interactUserId = options.longs === String ? _long12.toString() : options.longs === Number ? _long12.toNumber() : _long12;
          } else object.interactUserId = options.longs === String ? "0" : 0;
          object.interactUserProfile = null;
          object.dynamicContent = "";
          object.handHeartStatus = 0;
          object.canHelpFeed = 0;
          object.dynamicType = 0;
          object.createTimeStr = "";
          object.sendDirtStatus = 0;
        }
        null != message.id && message.hasOwnProperty("id") && ("number" === typeof message.id ? object.id = options.longs === String ? String(message.id) : message.id : object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id);
        null != message.interactUserId && message.hasOwnProperty("interactUserId") && ("number" === typeof message.interactUserId ? object.interactUserId = options.longs === String ? String(message.interactUserId) : message.interactUserId : object.interactUserId = options.longs === String ? $util.Long.prototype.toString.call(message.interactUserId) : options.longs === Number ? new $util.LongBits(message.interactUserId.low >>> 0, message.interactUserId.high >>> 0).toNumber() : message.interactUserId);
        null != message.interactUserProfile && message.hasOwnProperty("interactUserProfile") && (object.interactUserProfile = $root.UserProfile.toObject(message.interactUserProfile, options));
        null != message.dynamicContent && message.hasOwnProperty("dynamicContent") && (object.dynamicContent = message.dynamicContent);
        null != message.handHeartStatus && message.hasOwnProperty("handHeartStatus") && (object.handHeartStatus = message.handHeartStatus);
        null != message.canHelpFeed && message.hasOwnProperty("canHelpFeed") && (object.canHelpFeed = message.canHelpFeed);
        null != message.dynamicType && message.hasOwnProperty("dynamicType") && (object.dynamicType = message.dynamicType);
        null != message.createTimeStr && message.hasOwnProperty("createTimeStr") && (object.createTimeStr = message.createTimeStr);
        null != message.sendDirtStatus && message.hasOwnProperty("sendDirtStatus") && (object.sendDirtStatus = message.sendDirtStatus);
        return object;
      };
      UserDynamicInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserDynamicInfo;
    }();
    $root.UserGameData = function() {
      function UserGameData(properties) {
        this.petDataList = [];
        this.userPropList = [];
        this.helpFeedingList = [];
        this.userBubbleList = [];
        this.noticeList = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserGameData.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserGameData.prototype.petDataList = $util.emptyArray;
      UserGameData.prototype.helpFeedingNum = 0;
      UserGameData.prototype.userPropList = $util.emptyArray;
      UserGameData.prototype.userProfile = null;
      UserGameData.prototype.helpFeedingList = $util.emptyArray;
      UserGameData.prototype.userBubbleList = $util.emptyArray;
      UserGameData.prototype.noticeList = $util.emptyArray;
      UserGameData.prototype.guidance = "";
      UserGameData.create = function create(properties) {
        return new UserGameData(properties);
      };
      UserGameData.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.userId);
        if (null != message.petDataList && message.petDataList.length) for (var i = 0; i < message.petDataList.length; ++i) $root.PetData.encode(message.petDataList[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).int32(message.helpFeedingNum);
        if (null != message.userPropList && message.userPropList.length) for (var i = 0; i < message.userPropList.length; ++i) $root.UserProp.encode(message.userPropList[i], writer.uint32(34).fork()).ldelim();
        $root.UserProfile.encode(message.userProfile, writer.uint32(42).fork()).ldelim();
        if (null != message.helpFeedingList && message.helpFeedingList.length) for (var i = 0; i < message.helpFeedingList.length; ++i) writer.uint32(48).int64(message.helpFeedingList[i]);
        if (null != message.userBubbleList && message.userBubbleList.length) for (var i = 0; i < message.userBubbleList.length; ++i) $root.UserBubble.encode(message.userBubbleList[i], writer.uint32(58).fork()).ldelim();
        if (null != message.noticeList && message.noticeList.length) for (var i = 0; i < message.noticeList.length; ++i) $root.Notice.encode(message.noticeList[i], writer.uint32(66).fork()).ldelim();
        null != message.guidance && message.hasOwnProperty("guidance") && writer.uint32(74).string(message.guidance);
        return writer;
      };
      UserGameData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserGameData.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserGameData();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userId = reader.int64();
            break;

           case 2:
            message.petDataList && message.petDataList.length || (message.petDataList = []);
            message.petDataList.push($root.PetData.decode(reader, reader.uint32()));
            break;

           case 3:
            message.helpFeedingNum = reader.int32();
            break;

           case 4:
            message.userPropList && message.userPropList.length || (message.userPropList = []);
            message.userPropList.push($root.UserProp.decode(reader, reader.uint32()));
            break;

           case 5:
            message.userProfile = $root.UserProfile.decode(reader, reader.uint32());
            break;

           case 6:
            message.helpFeedingList && message.helpFeedingList.length || (message.helpFeedingList = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.helpFeedingList.push(reader.int64());
            } else message.helpFeedingList.push(reader.int64());
            break;

           case 7:
            message.userBubbleList && message.userBubbleList.length || (message.userBubbleList = []);
            message.userBubbleList.push($root.UserBubble.decode(reader, reader.uint32()));
            break;

           case 8:
            message.noticeList && message.noticeList.length || (message.noticeList = []);
            message.noticeList.push($root.Notice.decode(reader, reader.uint32()));
            break;

           case 9:
            message.guidance = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userId")) throw $util.ProtocolError("missing required 'userId'", {
          instance: message
        });
        if (!message.hasOwnProperty("helpFeedingNum")) throw $util.ProtocolError("missing required 'helpFeedingNum'", {
          instance: message
        });
        if (!message.hasOwnProperty("userProfile")) throw $util.ProtocolError("missing required 'userProfile'", {
          instance: message
        });
        return message;
      };
      UserGameData.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserGameData.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (null != message.petDataList && message.hasOwnProperty("petDataList")) {
          if (!Array.isArray(message.petDataList)) return "petDataList: array expected";
          for (var i = 0; i < message.petDataList.length; ++i) {
            var error = $root.PetData.verify(message.petDataList[i]);
            if (error) return "petDataList." + error;
          }
        }
        if (!$util.isInteger(message.helpFeedingNum)) return "helpFeedingNum: integer expected";
        if (null != message.userPropList && message.hasOwnProperty("userPropList")) {
          if (!Array.isArray(message.userPropList)) return "userPropList: array expected";
          for (var i = 0; i < message.userPropList.length; ++i) {
            var error = $root.UserProp.verify(message.userPropList[i]);
            if (error) return "userPropList." + error;
          }
        }
        var error = $root.UserProfile.verify(message.userProfile);
        if (error) return "userProfile." + error;
        if (null != message.helpFeedingList && message.hasOwnProperty("helpFeedingList")) {
          if (!Array.isArray(message.helpFeedingList)) return "helpFeedingList: array expected";
          for (var i = 0; i < message.helpFeedingList.length; ++i) if (!$util.isInteger(message.helpFeedingList[i]) && !(message.helpFeedingList[i] && $util.isInteger(message.helpFeedingList[i].low) && $util.isInteger(message.helpFeedingList[i].high))) return "helpFeedingList: integer|Long[] expected";
        }
        if (null != message.userBubbleList && message.hasOwnProperty("userBubbleList")) {
          if (!Array.isArray(message.userBubbleList)) return "userBubbleList: array expected";
          for (var i = 0; i < message.userBubbleList.length; ++i) {
            var error = $root.UserBubble.verify(message.userBubbleList[i]);
            if (error) return "userBubbleList." + error;
          }
        }
        if (null != message.noticeList && message.hasOwnProperty("noticeList")) {
          if (!Array.isArray(message.noticeList)) return "noticeList: array expected";
          for (var i = 0; i < message.noticeList.length; ++i) {
            var error = $root.Notice.verify(message.noticeList[i]);
            if (error) return "noticeList." + error;
          }
        }
        if (null != message.guidance && message.hasOwnProperty("guidance") && !$util.isString(message.guidance)) return "guidance: string expected";
        return null;
      };
      UserGameData.fromObject = function fromObject(object) {
        if (object instanceof $root.UserGameData) return object;
        var message = new $root.UserGameData();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        if (object.petDataList) {
          if (!Array.isArray(object.petDataList)) throw TypeError(".UserGameData.petDataList: array expected");
          message.petDataList = [];
          for (var i = 0; i < object.petDataList.length; ++i) {
            if ("object" !== typeof object.petDataList[i]) throw TypeError(".UserGameData.petDataList: object expected");
            message.petDataList[i] = $root.PetData.fromObject(object.petDataList[i]);
          }
        }
        null != object.helpFeedingNum && (message.helpFeedingNum = 0 | object.helpFeedingNum);
        if (object.userPropList) {
          if (!Array.isArray(object.userPropList)) throw TypeError(".UserGameData.userPropList: array expected");
          message.userPropList = [];
          for (var i = 0; i < object.userPropList.length; ++i) {
            if ("object" !== typeof object.userPropList[i]) throw TypeError(".UserGameData.userPropList: object expected");
            message.userPropList[i] = $root.UserProp.fromObject(object.userPropList[i]);
          }
        }
        if (null != object.userProfile) {
          if ("object" !== typeof object.userProfile) throw TypeError(".UserGameData.userProfile: object expected");
          message.userProfile = $root.UserProfile.fromObject(object.userProfile);
        }
        if (object.helpFeedingList) {
          if (!Array.isArray(object.helpFeedingList)) throw TypeError(".UserGameData.helpFeedingList: array expected");
          message.helpFeedingList = [];
          for (var i = 0; i < object.helpFeedingList.length; ++i) $util.Long ? (message.helpFeedingList[i] = $util.Long.fromValue(object.helpFeedingList[i])).unsigned = false : "string" === typeof object.helpFeedingList[i] ? message.helpFeedingList[i] = parseInt(object.helpFeedingList[i], 10) : "number" === typeof object.helpFeedingList[i] ? message.helpFeedingList[i] = object.helpFeedingList[i] : "object" === typeof object.helpFeedingList[i] && (message.helpFeedingList[i] = new $util.LongBits(object.helpFeedingList[i].low >>> 0, object.helpFeedingList[i].high >>> 0).toNumber());
        }
        if (object.userBubbleList) {
          if (!Array.isArray(object.userBubbleList)) throw TypeError(".UserGameData.userBubbleList: array expected");
          message.userBubbleList = [];
          for (var i = 0; i < object.userBubbleList.length; ++i) {
            if ("object" !== typeof object.userBubbleList[i]) throw TypeError(".UserGameData.userBubbleList: object expected");
            message.userBubbleList[i] = $root.UserBubble.fromObject(object.userBubbleList[i]);
          }
        }
        if (object.noticeList) {
          if (!Array.isArray(object.noticeList)) throw TypeError(".UserGameData.noticeList: array expected");
          message.noticeList = [];
          for (var i = 0; i < object.noticeList.length; ++i) {
            if ("object" !== typeof object.noticeList[i]) throw TypeError(".UserGameData.noticeList: object expected");
            message.noticeList[i] = $root.Notice.fromObject(object.noticeList[i]);
          }
        }
        null != object.guidance && (message.guidance = String(object.guidance));
        return message;
      };
      UserGameData.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        if (options.arrays || options.defaults) {
          object.petDataList = [];
          object.userPropList = [];
          object.helpFeedingList = [];
          object.userBubbleList = [];
          object.noticeList = [];
        }
        if (options.defaults) {
          if ($util.Long) {
            var _long13 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long13.toString() : options.longs === Number ? _long13.toNumber() : _long13;
          } else object.userId = options.longs === String ? "0" : 0;
          object.helpFeedingNum = 0;
          object.userProfile = null;
          object.guidance = "";
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        if (message.petDataList && message.petDataList.length) {
          object.petDataList = [];
          for (var j = 0; j < message.petDataList.length; ++j) object.petDataList[j] = $root.PetData.toObject(message.petDataList[j], options);
        }
        null != message.helpFeedingNum && message.hasOwnProperty("helpFeedingNum") && (object.helpFeedingNum = message.helpFeedingNum);
        if (message.userPropList && message.userPropList.length) {
          object.userPropList = [];
          for (var j = 0; j < message.userPropList.length; ++j) object.userPropList[j] = $root.UserProp.toObject(message.userPropList[j], options);
        }
        null != message.userProfile && message.hasOwnProperty("userProfile") && (object.userProfile = $root.UserProfile.toObject(message.userProfile, options));
        if (message.helpFeedingList && message.helpFeedingList.length) {
          object.helpFeedingList = [];
          for (var j = 0; j < message.helpFeedingList.length; ++j) "number" === typeof message.helpFeedingList[j] ? object.helpFeedingList[j] = options.longs === String ? String(message.helpFeedingList[j]) : message.helpFeedingList[j] : object.helpFeedingList[j] = options.longs === String ? $util.Long.prototype.toString.call(message.helpFeedingList[j]) : options.longs === Number ? new $util.LongBits(message.helpFeedingList[j].low >>> 0, message.helpFeedingList[j].high >>> 0).toNumber() : message.helpFeedingList[j];
        }
        if (message.userBubbleList && message.userBubbleList.length) {
          object.userBubbleList = [];
          for (var j = 0; j < message.userBubbleList.length; ++j) object.userBubbleList[j] = $root.UserBubble.toObject(message.userBubbleList[j], options);
        }
        if (message.noticeList && message.noticeList.length) {
          object.noticeList = [];
          for (var j = 0; j < message.noticeList.length; ++j) object.noticeList[j] = $root.Notice.toObject(message.noticeList[j], options);
        }
        null != message.guidance && message.hasOwnProperty("guidance") && (object.guidance = message.guidance);
        return object;
      };
      UserGameData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserGameData;
    }();
    $root.UserProp = function() {
      function UserProp(properties) {
        this.propDeleteTime = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      UserProp.prototype.userId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProp.prototype.propType = 0;
      UserProp.prototype.propId = 0;
      UserProp.prototype.propNum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProp.prototype.propData = "";
      UserProp.prototype.propDeleteTime = $util.emptyArray;
      UserProp.prototype.redPointCount = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      UserProp.prototype.status = false;
      UserProp.create = function create(properties) {
        return new UserProp(properties);
      };
      UserProp.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.userId && message.hasOwnProperty("userId") && writer.uint32(16).int64(message.userId);
        writer.uint32(24).int32(message.propType);
        writer.uint32(32).int32(message.propId);
        writer.uint32(40).int64(message.propNum);
        null != message.propData && message.hasOwnProperty("propData") && writer.uint32(50).string(message.propData);
        if (null != message.propDeleteTime && message.propDeleteTime.length) for (var i = 0; i < message.propDeleteTime.length; ++i) writer.uint32(56).int64(message.propDeleteTime[i]);
        null != message.redPointCount && message.hasOwnProperty("redPointCount") && writer.uint32(64).int64(message.redPointCount);
        null != message.status && message.hasOwnProperty("status") && writer.uint32(72).bool(message.status);
        return writer;
      };
      UserProp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
      };
      UserProp.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.UserProp();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.userId = reader.int64();
            break;

           case 3:
            message.propType = reader.int32();
            break;

           case 4:
            message.propId = reader.int32();
            break;

           case 5:
            message.propNum = reader.int64();
            break;

           case 6:
            message.propData = reader.string();
            break;

           case 7:
            message.propDeleteTime && message.propDeleteTime.length || (message.propDeleteTime = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.propDeleteTime.push(reader.int64());
            } else message.propDeleteTime.push(reader.int64());
            break;

           case 8:
            message.redPointCount = reader.int64();
            break;

           case 9:
            message.status = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("propType")) throw $util.ProtocolError("missing required 'propType'", {
          instance: message
        });
        if (!message.hasOwnProperty("propId")) throw $util.ProtocolError("missing required 'propId'", {
          instance: message
        });
        if (!message.hasOwnProperty("propNum")) throw $util.ProtocolError("missing required 'propNum'", {
          instance: message
        });
        return message;
      };
      UserProp.decodeDelimited = function decodeDelimited(reader) {
        reader instanceof $Reader || (reader = new $Reader(reader));
        return this.decode(reader, reader.uint32());
      };
      UserProp.verify = function verify(message) {
        if ("object" !== typeof message || null === message) return "object expected";
        if (null != message.userId && message.hasOwnProperty("userId") && !$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high))) return "userId: integer|Long expected";
        if (!$util.isInteger(message.propType)) return "propType: integer expected";
        if (!$util.isInteger(message.propId)) return "propId: integer expected";
        if (!$util.isInteger(message.propNum) && !(message.propNum && $util.isInteger(message.propNum.low) && $util.isInteger(message.propNum.high))) return "propNum: integer|Long expected";
        if (null != message.propData && message.hasOwnProperty("propData") && !$util.isString(message.propData)) return "propData: string expected";
        if (null != message.propDeleteTime && message.hasOwnProperty("propDeleteTime")) {
          if (!Array.isArray(message.propDeleteTime)) return "propDeleteTime: array expected";
          for (var i = 0; i < message.propDeleteTime.length; ++i) if (!$util.isInteger(message.propDeleteTime[i]) && !(message.propDeleteTime[i] && $util.isInteger(message.propDeleteTime[i].low) && $util.isInteger(message.propDeleteTime[i].high))) return "propDeleteTime: integer|Long[] expected";
        }
        if (null != message.redPointCount && message.hasOwnProperty("redPointCount") && !$util.isInteger(message.redPointCount) && !(message.redPointCount && $util.isInteger(message.redPointCount.low) && $util.isInteger(message.redPointCount.high))) return "redPointCount: integer|Long expected";
        if (null != message.status && message.hasOwnProperty("status") && "boolean" !== typeof message.status) return "status: boolean expected";
        return null;
      };
      UserProp.fromObject = function fromObject(object) {
        if (object instanceof $root.UserProp) return object;
        var message = new $root.UserProp();
        null != object.userId && ($util.Long ? (message.userId = $util.Long.fromValue(object.userId)).unsigned = false : "string" === typeof object.userId ? message.userId = parseInt(object.userId, 10) : "number" === typeof object.userId ? message.userId = object.userId : "object" === typeof object.userId && (message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber()));
        null != object.propType && (message.propType = 0 | object.propType);
        null != object.propId && (message.propId = 0 | object.propId);
        null != object.propNum && ($util.Long ? (message.propNum = $util.Long.fromValue(object.propNum)).unsigned = false : "string" === typeof object.propNum ? message.propNum = parseInt(object.propNum, 10) : "number" === typeof object.propNum ? message.propNum = object.propNum : "object" === typeof object.propNum && (message.propNum = new $util.LongBits(object.propNum.low >>> 0, object.propNum.high >>> 0).toNumber()));
        null != object.propData && (message.propData = String(object.propData));
        if (object.propDeleteTime) {
          if (!Array.isArray(object.propDeleteTime)) throw TypeError(".UserProp.propDeleteTime: array expected");
          message.propDeleteTime = [];
          for (var i = 0; i < object.propDeleteTime.length; ++i) $util.Long ? (message.propDeleteTime[i] = $util.Long.fromValue(object.propDeleteTime[i])).unsigned = false : "string" === typeof object.propDeleteTime[i] ? message.propDeleteTime[i] = parseInt(object.propDeleteTime[i], 10) : "number" === typeof object.propDeleteTime[i] ? message.propDeleteTime[i] = object.propDeleteTime[i] : "object" === typeof object.propDeleteTime[i] && (message.propDeleteTime[i] = new $util.LongBits(object.propDeleteTime[i].low >>> 0, object.propDeleteTime[i].high >>> 0).toNumber());
        }
        null != object.redPointCount && ($util.Long ? (message.redPointCount = $util.Long.fromValue(object.redPointCount)).unsigned = false : "string" === typeof object.redPointCount ? message.redPointCount = parseInt(object.redPointCount, 10) : "number" === typeof object.redPointCount ? message.redPointCount = object.redPointCount : "object" === typeof object.redPointCount && (message.redPointCount = new $util.LongBits(object.redPointCount.low >>> 0, object.redPointCount.high >>> 0).toNumber()));
        null != object.status && (message.status = Boolean(object.status));
        return message;
      };
      UserProp.toObject = function toObject(message, options) {
        options || (options = {});
        var object = {};
        (options.arrays || options.defaults) && (object.propDeleteTime = []);
        if (options.defaults) {
          if ($util.Long) {
            var _long14 = new $util.Long(0, 0, false);
            object.userId = options.longs === String ? _long14.toString() : options.longs === Number ? _long14.toNumber() : _long14;
          } else object.userId = options.longs === String ? "0" : 0;
          object.propType = 0;
          object.propId = 0;
          if ($util.Long) {
            var _long14 = new $util.Long(0, 0, false);
            object.propNum = options.longs === String ? _long14.toString() : options.longs === Number ? _long14.toNumber() : _long14;
          } else object.propNum = options.longs === String ? "0" : 0;
          object.propData = "";
          if ($util.Long) {
            var _long14 = new $util.Long(0, 0, false);
            object.redPointCount = options.longs === String ? _long14.toString() : options.longs === Number ? _long14.toNumber() : _long14;
          } else object.redPointCount = options.longs === String ? "0" : 0;
          object.status = false;
        }
        null != message.userId && message.hasOwnProperty("userId") && ("number" === typeof message.userId ? object.userId = options.longs === String ? String(message.userId) : message.userId : object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId);
        null != message.propType && message.hasOwnProperty("propType") && (object.propType = message.propType);
        null != message.propId && message.hasOwnProperty("propId") && (object.propId = message.propId);
        null != message.propNum && message.hasOwnProperty("propNum") && ("number" === typeof message.propNum ? object.propNum = options.longs === String ? String(message.propNum) : message.propNum : object.propNum = options.longs === String ? $util.Long.prototype.toString.call(message.propNum) : options.longs === Number ? new $util.LongBits(message.propNum.low >>> 0, message.propNum.high >>> 0).toNumber() : message.propNum);
        null != message.propData && message.hasOwnProperty("propData") && (object.propData = message.propData);
        if (message.propDeleteTime && message.propDeleteTime.length) {
          object.propDeleteTime = [];
          for (var j = 0; j < message.propDeleteTime.length; ++j) "number" === typeof message.propDeleteTime[j] ? object.propDeleteTime[j] = options.longs === String ? String(message.propDeleteTime[j]) : message.propDeleteTime[j] : object.propDeleteTime[j] = options.longs === String ? $util.Long.prototype.toString.call(message.propDeleteTime[j]) : options.longs === Number ? new $util.LongBits(message.propDeleteTime[j].low >>> 0, message.propDeleteTime[j].high >>> 0).toNumber() : message.propDeleteTime[j];
        }
        null != message.redPointCount && message.hasOwnProperty("redPointCount") && ("number" === typeof message.redPointCount ? object.redPointCount = options.longs === String ? String(message.redPointCount) : message.redPointCount : object.redPointCount = options.longs === String ? $util.Long.prototype.toString.call(message.redPointCount) : options.longs === Number ? new $util.LongBits(message.redPointCount.low >>> 0, message.redPointCount.high >>> 0).toNumber() : message.redPointCount);
        null != message.status && message.hasOwnProperty("status") && (object.status = message.status);
        return object;
      };
      UserProp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return UserProp;
    }();
    module.exports = $root;
    cc._RF.pop();
  }, {} ],
  "polyglot.min": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e41cf7lKShOJJWgNcSq2Ce4", "polyglot.min");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.polyglot = exports.Polyglot = void 0;
    var forEach = function(arr, fn, target) {
      arr = arguments[0];
      fn = "function" === typeof arguments[1] ? arguments[1] : new Function();
      if (Array.isArray(arr)) arr.forEach(function(item, idx, array) {
        fn(item, idx);
      }); else for (var key in arr) if (arr.hasOwnProperty(key)) {
        var element = arr[key];
        fn(element, key);
      }
    };
    var warning = function(message) {
      console.warn(message);
    };
    var has = function(obj, key) {
      return obj.hasOwnProperty(key);
    };
    function trim(x) {
      return x.replace(/^\s+|\s+$/gm, "");
    }
    var warn = function warn(message) {
      warning(message);
    };
    var replace = String.prototype.replace;
    var split = String.prototype.split;
    var delimiter = "||||";
    var russianPluralGroups = function(n) {
      var lastTwo = n % 100;
      var end = lastTwo % 10;
      if (11 !== lastTwo && 1 === end) return 0;
      if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) return 1;
      return 2;
    };
    var defaultPluralRules = {
      pluralTypes: {
        arabic: function(n) {
          if (n < 3) return n;
          var lastTwo = n % 100;
          if (lastTwo >= 3 && lastTwo <= 10) return 3;
          return lastTwo >= 11 ? 4 : 5;
        },
        bosnian_serbian: russianPluralGroups,
        chinese: function() {
          return 0;
        },
        croatian: russianPluralGroups,
        french: function(n) {
          return n > 1 ? 1 : 0;
        },
        german: function(n) {
          return 1 !== n ? 1 : 0;
        },
        russian: russianPluralGroups,
        lithuanian: function(n) {
          if (n % 10 === 1 && n % 100 !== 11) return 0;
          return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;
        },
        czech: function(n) {
          if (1 === n) return 0;
          return n >= 2 && n <= 4 ? 1 : 2;
        },
        polish: function(n) {
          if (1 === n) return 0;
          var end = n % 10;
          return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
        },
        icelandic: function(n) {
          return n % 10 !== 1 || n % 100 === 11 ? 1 : 0;
        },
        slovenian: function(n) {
          var lastTwo = n % 100;
          if (1 === lastTwo) return 0;
          if (2 === lastTwo) return 1;
          if (3 === lastTwo || 4 === lastTwo) return 2;
          return 3;
        }
      },
      pluralTypeToLanguages: {
        arabic: [ "ar" ],
        bosnian_serbian: [ "bs-Latn-BA", "bs-Cyrl-BA", "srl-RS", "sr-RS" ],
        chinese: [ "id", "id-ID", "ja", "ko", "ko-KR", "lo", "ms", "th", "th-TH", "zh" ],
        croatian: [ "hr", "hr-HR" ],
        german: [ "fa", "da", "de", "en", "es", "fi", "el", "he", "hi-IN", "hu", "hu-HU", "it", "nl", "no", "pt", "sv", "tr" ],
        french: [ "fr", "tl", "pt-br" ],
        russian: [ "ru", "ru-RU" ],
        lithuanian: [ "lt" ],
        czech: [ "cs", "cs-CZ", "sk" ],
        polish: [ "pl" ],
        icelandic: [ "is" ],
        slovenian: [ "sl-SL" ]
      }
    };
    function langToTypeMap(mapping) {
      var ret = {};
      forEach(mapping, function(langs, type) {
        forEach(langs, function(lang) {
          ret[lang] = type;
        }, this);
      }, this);
      return ret;
    }
    function pluralTypeName(pluralRules, locale) {
      var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);
      return langToPluralType[locale] || langToPluralType[split.call(locale, /-/, 1)[0]] || langToPluralType.en;
    }
    function pluralTypeIndex(pluralRules, locale, count) {
      return pluralRules.pluralTypes[pluralTypeName(pluralRules, locale)](count);
    }
    function escape(token) {
      return token.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function constructTokenRegex(opts) {
      var prefix = opts && opts.prefix || "%{";
      var suffix = opts && opts.suffix || "}";
      if (prefix === delimiter || suffix === delimiter) throw new RangeError('"' + delimiter + '" token is reserved for pluralization');
      return new RegExp(escape(prefix) + "(.*?)" + escape(suffix), "g");
    }
    var defaultTokenRegex = /%\{(.*?)\}/g;
    function transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules) {
      if ("string" !== typeof phrase) throw new TypeError("Polyglot.transformPhrase expects argument #1 to be string");
      if (null == substitutions) return phrase;
      var result = phrase;
      var interpolationRegex = tokenRegex || defaultTokenRegex;
      var pluralRulesOrDefault = pluralRules || defaultPluralRules;
      var options = "number" === typeof substitutions ? {
        smart_count: substitutions
      } : substitutions;
      if (null != options.smart_count && result) {
        var texts = split.call(result, delimiter);
        result = trim(texts[pluralTypeIndex(pluralRulesOrDefault, locale || "en", options.smart_count)] || texts[0]);
      }
      result = replace.call(result, interpolationRegex, function(expression, argument) {
        if (!has(options, argument) || null == options[argument]) return expression;
        return options[argument];
      });
      return result;
    }
    var Polyglot = function() {
      function Polyglot(options) {
        this.phrases = {};
        this.pluralRules = {};
        this.currentLocale = "";
        this.onMissingKey = null;
        this.warn = null;
        var opts = options || {};
        this.extend(opts.phrases || {});
        this.currentLocale = opts.locale || "en";
        var allowMissing = opts.allowMissing ? transformPhrase : null;
        this.onMissingKey = "function" === typeof opts.onMissingKey ? opts.onMissingKey : allowMissing;
        this.warn = opts.warn || warn;
        this.tokenRegex = constructTokenRegex(opts.interpolation);
        this.pluralRules = opts.pluralRules || defaultPluralRules;
      }
      Polyglot.transformPhrase = function(phrase, substitutions, locale) {
        return transformPhrase(phrase, substitutions, locale);
      };
      Polyglot.prototype.has = function(key) {
        return has(this.phrases, key);
      };
      Polyglot.prototype.t = function(key, options) {
        var phrase, result;
        var opts = null == options ? {} : options;
        if ("string" === typeof this.phrases[key]) phrase = this.phrases[key]; else if ("string" === typeof opts._) phrase = opts._; else if (this.onMissingKey) {
          var onMissingKey = this.onMissingKey;
          result = onMissingKey(key, opts, this.currentLocale, this.tokenRegex, this.pluralRules);
        } else {
          this.warn('Missing translation for key: "' + key + '"');
          result = key;
        }
        "string" === typeof phrase && (result = transformPhrase(phrase, opts, this.currentLocale, this.tokenRegex, this.pluralRules));
        return result;
      };
      Polyglot.prototype.replace = function(newPhrases) {
        this.clear();
        this.extend(newPhrases);
      };
      Polyglot.prototype.clear = function() {
        this.phrases = {};
      };
      Polyglot.prototype.locale = function(newLocale) {
        newLocale && (this.currentLocale = newLocale);
        return this.currentLocale;
      };
      Polyglot.prototype.extend = function(morePhrases, prefix) {
        var _this = this;
        forEach(morePhrases, function(phrase, key) {
          var prefixedKey = prefix ? prefix + "." + key : key;
          "object" === typeof phrase ? _this.extend(phrase, prefixedKey) : _this.phrases[prefixedKey] = phrase;
        }, this);
      };
      Polyglot.prototype.unset = function(morePhrases, prefix) {
        "string" === typeof morePhrases ? delete this.phrases[morePhrases] : forEach(morePhrases, function(phrase, key) {
          var prefixedKey = prefix ? prefix + "." + key : key;
          "object" === typeof phrase ? this.unset(phrase, prefixedKey) : delete this.phrases[prefixedKey];
        }, this);
      };
      return Polyglot;
    }();
    exports.Polyglot = Polyglot;
    function polyglot(options) {
      return new Polyglot(options);
    }
    exports.polyglot = polyglot;
    cc._RF.pop();
  }, {} ],
  "socket.io": [ function(require, module, exports) {
    (function(Buffer) {
      "use strict";
      cc._RF.push(module, "5f968h439xIAKAppGAZGIw7", "socket.io");
      "use strict";
      !function(t, e) {
        "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.io = e() : t.io = e();
      }(void 0, function() {
        return function(t) {
          function e(r) {
            if (n[r]) return n[r].exports;
            var o = n[r] = {
              exports: {},
              id: r,
              loaded: !1
            };
            return t[r].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;
          }
          var n = {};
          return e.m = t, e.c = n, e.p = "", e(0);
        }([ function(t, e, n) {
          function r(t, e) {
            "object" == typeof t && (e = t, t = void 0), e = e || {};
            var n, r = o(t), i = r.source, u = r.id, p = r.path, h = c[u] && p in c[u].nsps, f = e.forceNew || e["force new connection"] || !1 === e.multiplex || h;
            return f ? (a("ignoring socket cache for %s", i), n = s(i, e)) : (c[u] || (a("new io instance for %s", i), 
            c[u] = s(i, e)), n = c[u]), r.query && !e.query && (e.query = r.query), n.socket(r.path, e);
          }
          var o = n(1), i = n(7), s = n(15), a = n(3)("socket.io-client");
          t.exports = e = r;
          var c = e.managers = {};
          e.protocol = i.protocol, e.connect = r, e.Manager = n(15), e.Socket = n(39);
        }, function(t, e, n) {
          function r(t, e) {
            var n = t;
            e = e || "undefined" != typeof location && location, null == t && (t = e.protocol + "//" + e.host), 
            "string" == typeof t && ("/" === t.charAt(0) && (t = "/" === t.charAt(1) ? e.protocol + t : e.host + t), 
            /^(https?|wss?):\/\//.test(t) || (i("protocol-less url %s", t), t = "undefined" != typeof e ? e.protocol + "//" + t : "https://" + t), 
            i("parse %s", t), n = o(t)), n.port || (/^(http|ws)$/.test(n.protocol) ? n.port = "80" : /^(http|ws)s$/.test(n.protocol) && (n.port = "443")), 
            n.path = n.path || "/";
            var r = -1 !== n.host.indexOf(":"), s = r ? "[" + n.host + "]" : n.host;
            return n.id = n.protocol + "://" + s + ":" + n.port, n.href = n.protocol + "://" + s + (e && e.port === n.port ? "" : ":" + n.port), 
            n;
          }
          var o = n(2), i = n(3)("socket.io-client:url");
          t.exports = r;
        }, function(t, e) {
          var n = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/, r = [ "source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor" ];
          t.exports = function(t) {
            var e = t, o = t.indexOf("["), i = t.indexOf("]");
            -1 != o && -1 != i && (t = t.substring(0, o) + t.substring(o, i).replace(/:/g, ";") + t.substring(i, t.length));
            for (var s = n.exec(t || ""), a = {}, c = 14; c--; ) a[r[c]] = s[c] || "";
            return -1 != o && -1 != i && (a.source = e, a.host = a.host.substring(1, a.host.length - 1).replace(/;/g, ":"), 
            a.authority = a.authority.replace("[", "").replace("]", "").replace(/;/g, ":"), 
            a.ipv6uri = !0), a;
          };
        }, function(t, e, n) {
          (function(r) {
            function o() {
              return !("undefined" == typeof window || !window.process || "renderer" !== window.process.type && !window.process.__nwjs) || ("undefined" == typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && ("undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
            }
            function i(e) {
              if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + t.exports.humanize(this.diff), 
              this.useColors) {
                var n = "color: " + this.color;
                e.splice(1, 0, n, "color: inherit");
                var r = 0, o = 0;
                e[0].replace(/%[a-zA-Z%]/g, function(t) {
                  "%%" !== t && (r++, "%c" === t && (o = r));
                }), e.splice(o, 0, n);
              }
            }
            function s() {
              var t;
              return "object" === ("undefined" == typeof console ? "undefined" : p(console)) && console.log && (t = console).log.apply(t, arguments);
            }
            function a(t) {
              try {
                t ? e.storage.setItem("debug", t) : e.storage.removeItem("debug");
              } catch (n) {}
            }
            function c() {
              var t = void 0;
              try {
                t = e.storage.getItem("debug");
              } catch (n) {}
              return !t && "undefined" != typeof r && "env" in r && (t = r.env.DEBUG), t;
            }
            function u() {
              try {
                return localStorage;
              } catch (t) {}
            }
            var p = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
              return typeof t;
            } : function(t) {
              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            };
            e.log = s, e.formatArgs = i, e.save = a, e.load = c, e.useColors = o, e.storage = u(), 
            e.colors = [ "#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33" ], 
            t.exports = n(5)(e);
            var h = t.exports.formatters;
            h.j = function(t) {
              try {
                return JSON.stringify(t);
              } catch (e) {
                return "[UnexpectedJSONParseError]: " + e.message;
              }
            };
          }).call(e, n(4));
        }, function(t, e) {
          function n() {
            throw new Error("setTimeout has not been defined");
          }
          function r() {
            throw new Error("clearTimeout has not been defined");
          }
          function o(t) {
            if (p === setTimeout) return setTimeout(t, 0);
            if ((p === n || !p) && setTimeout) return p = setTimeout, setTimeout(t, 0);
            try {
              return p(t, 0);
            } catch (e) {
              try {
                return p.call(null, t, 0);
              } catch (e) {
                return p.call(this, t, 0);
              }
            }
          }
          function i(t) {
            if (h === clearTimeout) return clearTimeout(t);
            if ((h === r || !h) && clearTimeout) return h = clearTimeout, clearTimeout(t);
            try {
              return h(t);
            } catch (e) {
              try {
                return h.call(null, t);
              } catch (e) {
                return h.call(this, t);
              }
            }
          }
          function s() {
            y && l && (y = !1, l.length ? d = l.concat(d) : m = -1, d.length && a());
          }
          function a() {
            if (!y) {
              var t = o(s);
              y = !0;
              for (var e = d.length; e; ) {
                for (l = d, d = []; ++m < e; ) l && l[m].run();
                m = -1, e = d.length;
              }
              l = null, y = !1, i(t);
            }
          }
          function c(t, e) {
            this.fun = t, this.array = e;
          }
          function u() {}
          var p, h, f = t.exports = {};
          !function() {
            try {
              p = "function" == typeof setTimeout ? setTimeout : n;
            } catch (t) {
              p = n;
            }
            try {
              h = "function" == typeof clearTimeout ? clearTimeout : r;
            } catch (t) {
              h = r;
            }
          }();
          var l, d = [], y = !1, m = -1;
          f.nextTick = function(t) {
            var e = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
            d.push(new c(t, e)), 1 !== d.length || y || o(a);
          }, c.prototype.run = function() {
            this.fun.apply(null, this.array);
          }, f.title = "browser", f.browser = !0, f.env = {}, f.argv = [], f.version = "", 
          f.versions = {}, f.on = u, f.addListener = u, f.once = u, f.off = u, f.removeListener = u, 
          f.removeAllListeners = u, f.emit = u, f.prependListener = u, f.prependOnceListener = u, 
          f.listeners = function(t) {
            return [];
          }, f.binding = function(t) {
            throw new Error("process.binding is not supported");
          }, f.cwd = function() {
            return "/";
          }, f.chdir = function(t) {
            throw new Error("process.chdir is not supported");
          }, f.umask = function() {
            return 0;
          };
        }, function(t, e, n) {
          function r(t) {
            if (Array.isArray(t)) {
              for (var e = 0, n = Array(t.length); e < t.length; e++) n[e] = t[e];
              return n;
            }
            return Array.from(t);
          }
          function o(t) {
            function e(t) {
              for (var e = 0, n = 0; n < t.length; n++) e = (e << 5) - e + t.charCodeAt(n), e |= 0;
              return o.colors[Math.abs(e) % o.colors.length];
            }
            function o(t) {
              function n() {
                for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) e[i] = arguments[i];
                if (n.enabled) {
                  var s = n, a = Number(new Date()), c = a - (r || a);
                  s.diff = c, s.prev = r, s.curr = a, r = a, e[0] = o.coerce(e[0]), "string" != typeof e[0] && e.unshift("%O");
                  var u = 0;
                  e[0] = e[0].replace(/%([a-zA-Z%])/g, function(t, n) {
                    if ("%%" === t) return t;
                    u++;
                    var r = o.formatters[n];
                    if ("function" == typeof r) {
                      var i = e[u];
                      t = r.call(s, i), e.splice(u, 1), u--;
                    }
                    return t;
                  }), o.formatArgs.call(s, e);
                  var p = s.log || o.log;
                  p.apply(s, e);
                }
              }
              var r = void 0;
              return n.namespace = t, n.enabled = o.enabled(t), n.useColors = o.useColors(), n.color = e(t), 
              n.destroy = i, n.extend = s, "function" == typeof o.init && o.init(n), o.instances.push(n), 
              n;
            }
            function i() {
              var t = o.instances.indexOf(this);
              return -1 !== t && (o.instances.splice(t, 1), !0);
            }
            function s(t, e) {
              var n = o(this.namespace + ("undefined" == typeof e ? ":" : e) + t);
              return n.log = this.log, n;
            }
            function a(t) {
              o.save(t), o.names = [], o.skips = [];
              var e = void 0, n = ("string" == typeof t ? t : "").split(/[\s,]+/), r = n.length;
              for (e = 0; e < r; e++) n[e] && (t = n[e].replace(/\*/g, ".*?"), "-" === t[0] ? o.skips.push(new RegExp("^" + t.substr(1) + "$")) : o.names.push(new RegExp("^" + t + "$")));
              for (e = 0; e < o.instances.length; e++) {
                var i = o.instances[e];
                i.enabled = o.enabled(i.namespace);
              }
            }
            function c() {
              var t = [].concat(r(o.names.map(p)), r(o.skips.map(p).map(function(t) {
                return "-" + t;
              }))).join(",");
              return o.enable(""), t;
            }
            function u(t) {
              if ("*" === t[t.length - 1]) return !0;
              var e = void 0, n = void 0;
              for (e = 0, n = o.skips.length; e < n; e++) if (o.skips[e].test(t)) return !1;
              for (e = 0, n = o.names.length; e < n; e++) if (o.names[e].test(t)) return !0;
              return !1;
            }
            function p(t) {
              return t.toString().substring(2, t.toString().length - 2).replace(/\.\*\?$/, "*");
            }
            function h(t) {
              return t instanceof Error ? t.stack || t.message : t;
            }
            return o.debug = o, o["default"] = o, o.coerce = h, o.disable = c, o.enable = a, 
            o.enabled = u, o.humanize = n(6), Object.keys(t).forEach(function(e) {
              o[e] = t[e];
            }), o.instances = [], o.names = [], o.skips = [], o.formatters = {}, o.selectColor = e, 
            o.enable(o.load()), o;
          }
          t.exports = o;
        }, function(t, e) {
          function n(t) {
            if (t = String(t), !(t.length > 100)) {
              var e = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);
              if (e) {
                var n = parseFloat(e[1]), r = (e[2] || "ms").toLowerCase();
                switch (r) {
                 case "years":
                 case "year":
                 case "yrs":
                 case "yr":
                 case "y":
                  return n * h;

                 case "weeks":
                 case "week":
                 case "w":
                  return n * p;

                 case "days":
                 case "day":
                 case "d":
                  return n * u;

                 case "hours":
                 case "hour":
                 case "hrs":
                 case "hr":
                 case "h":
                  return n * c;

                 case "minutes":
                 case "minute":
                 case "mins":
                 case "min":
                 case "m":
                  return n * a;

                 case "seconds":
                 case "second":
                 case "secs":
                 case "sec":
                 case "s":
                  return n * s;

                 case "milliseconds":
                 case "millisecond":
                 case "msecs":
                 case "msec":
                 case "ms":
                  return n;

                 default:
                  return;
                }
              }
            }
          }
          function r(t) {
            var e = Math.abs(t);
            return e >= u ? Math.round(t / u) + "d" : e >= c ? Math.round(t / c) + "h" : e >= a ? Math.round(t / a) + "m" : e >= s ? Math.round(t / s) + "s" : t + "ms";
          }
          function o(t) {
            var e = Math.abs(t);
            return e >= u ? i(t, e, u, "day") : e >= c ? i(t, e, c, "hour") : e >= a ? i(t, e, a, "minute") : e >= s ? i(t, e, s, "second") : t + " ms";
          }
          function i(t, e, n, r) {
            var o = e >= 1.5 * n;
            return Math.round(t / n) + " " + r + (o ? "s" : "");
          }
          var s = 1e3, a = 60 * s, c = 60 * a, u = 24 * c, p = 7 * u, h = 365.25 * u;
          t.exports = function(t, e) {
            e = e || {};
            var i = typeof t;
            if ("string" === i && t.length > 0) return n(t);
            if ("number" === i && isFinite(t)) return e["long"] ? o(t) : r(t);
            throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
          };
        }, function(t, e, n) {
          function r() {}
          function o(t) {
            var n = "" + t.type;
            if (e.BINARY_EVENT !== t.type && e.BINARY_ACK !== t.type || (n += t.attachments + "-"), 
            t.nsp && "/" !== t.nsp && (n += t.nsp + ","), null != t.id && (n += t.id), null != t.data) {
              var r = i(t.data);
              if (!1 === r) return g;
              n += r;
            }
            return f("encoded %j as %s", t, n), n;
          }
          function i(t) {
            try {
              return JSON.stringify(t);
            } catch (e) {
              return !1;
            }
          }
          function s(t, e) {
            function n(t) {
              var n = d.deconstructPacket(t), r = o(n.packet), i = n.buffers;
              i.unshift(r), e(i);
            }
            d.removeBlobs(t, n);
          }
          function a() {
            this.reconstructor = null;
          }
          function c(t) {
            var n = 0, r = {
              type: Number(t.charAt(0))
            };
            if (null == e.types[r.type]) return h("unknown packet type " + r.type);
            if (e.BINARY_EVENT === r.type || e.BINARY_ACK === r.type) {
              for (var o = ""; "-" !== t.charAt(++n) && (o += t.charAt(n), n != t.length); ) ;
              if (o != Number(o) || "-" !== t.charAt(n)) throw new Error("Illegal attachments");
              r.attachments = Number(o);
            }
            if ("/" === t.charAt(n + 1)) for (r.nsp = ""; ++n; ) {
              var i = t.charAt(n);
              if ("," === i) break;
              if (r.nsp += i, n === t.length) break;
            } else r.nsp = "/";
            var s = t.charAt(n + 1);
            if ("" !== s && Number(s) == s) {
              for (r.id = ""; ++n; ) {
                var i = t.charAt(n);
                if (null == i || Number(i) != i) {
                  --n;
                  break;
                }
                if (r.id += t.charAt(n), n === t.length) break;
              }
              r.id = Number(r.id);
            }
            if (t.charAt(++n)) {
              var a = u(t.substr(n)), c = !1 !== a && (r.type === e.ERROR || y(a));
              if (!c) return h("invalid payload");
              r.data = a;
            }
            return f("decoded %s as %j", t, r), r;
          }
          function u(t) {
            try {
              return JSON.parse(t);
            } catch (e) {
              return !1;
            }
          }
          function p(t) {
            this.reconPack = t, this.buffers = [];
          }
          function h(t) {
            return {
              type: e.ERROR,
              data: "parser error: " + t
            };
          }
          var f = n(8)("socket.io-parser"), l = n(11), d = n(12), y = n(13), m = n(14);
          e.protocol = 4, e.types = [ "CONNECT", "DISCONNECT", "EVENT", "ACK", "ERROR", "BINARY_EVENT", "BINARY_ACK" ], 
          e.CONNECT = 0, e.DISCONNECT = 1, e.EVENT = 2, e.ACK = 3, e.ERROR = 4, e.BINARY_EVENT = 5, 
          e.BINARY_ACK = 6, e.Encoder = r, e.Decoder = a;
          var g = e.ERROR + '"encode error"';
          r.prototype.encode = function(t, n) {
            if (f("encoding packet %j", t), e.BINARY_EVENT === t.type || e.BINARY_ACK === t.type) s(t, n); else {
              var r = o(t);
              n([ r ]);
            }
          }, l(a.prototype), a.prototype.add = function(t) {
            var n;
            if ("string" == typeof t) n = c(t), e.BINARY_EVENT === n.type || e.BINARY_ACK === n.type ? (this.reconstructor = new p(n), 
            0 === this.reconstructor.reconPack.attachments && this.emit("decoded", n)) : this.emit("decoded", n); else {
              if (!m(t) && !t.base64) throw new Error("Unknown type: " + t);
              if (!this.reconstructor) throw new Error("got binary data when not reconstructing a packet");
              n = this.reconstructor.takeBinaryData(t), n && (this.reconstructor = null, this.emit("decoded", n));
            }
          }, a.prototype.destroy = function() {
            this.reconstructor && this.reconstructor.finishedReconstruction();
          }, p.prototype.takeBinaryData = function(t) {
            if (this.buffers.push(t), this.buffers.length === this.reconPack.attachments) {
              var e = d.reconstructPacket(this.reconPack, this.buffers);
              return this.finishedReconstruction(), e;
            }
            return null;
          }, p.prototype.finishedReconstruction = function() {
            this.reconPack = null, this.buffers = [];
          };
        }, function(t, e, n) {
          (function(r) {
            function o() {
              return !("undefined" == typeof window || !window.process || "renderer" !== window.process.type) || ("undefined" == typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && ("undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
            }
            function i(t) {
              var n = this.useColors;
              if (t[0] = (n ? "%c" : "") + this.namespace + (n ? " %c" : " ") + t[0] + (n ? "%c " : " ") + "+" + e.humanize(this.diff), 
              n) {
                var r = "color: " + this.color;
                t.splice(1, 0, r, "color: inherit");
                var o = 0, i = 0;
                t[0].replace(/%[a-zA-Z%]/g, function(t) {
                  "%%" !== t && (o++, "%c" === t && (i = o));
                }), t.splice(i, 0, r);
              }
            }
            function s() {
              return "object" === ("undefined" == typeof console ? "undefined" : p(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
            }
            function a(t) {
              try {
                null == t ? e.storage.removeItem("debug") : e.storage.debug = t;
              } catch (n) {}
            }
            function c() {
              var t;
              try {
                t = e.storage.debug;
              } catch (n) {}
              return !t && "undefined" != typeof r && "env" in r && (t = r.env.DEBUG), t;
            }
            function u() {
              try {
                return window.localStorage;
              } catch (t) {}
            }
            var p = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
              return typeof t;
            } : function(t) {
              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            };
            e = t.exports = n(9), e.log = s, e.formatArgs = i, e.save = a, e.load = c, e.useColors = o, 
            e.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : u(), 
            e.colors = [ "#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33" ], 
            e.formatters.j = function(t) {
              try {
                return JSON.stringify(t);
              } catch (e) {
                return "[UnexpectedJSONParseError]: " + e.message;
              }
            }, e.enable(c());
          }).call(e, n(4));
        }, function(t, e, n) {
          function r(t) {
            var n, r = 0;
            for (n in t) r = (r << 5) - r + t.charCodeAt(n), r |= 0;
            return e.colors[Math.abs(r) % e.colors.length];
          }
          function o(t) {
            function n() {
              if (n.enabled) {
                var t = n, r = +new Date(), i = r - (o || r);
                t.diff = i, t.prev = o, t.curr = r, o = r;
                for (var s = new Array(arguments.length), a = 0; a < s.length; a++) s[a] = arguments[a];
                s[0] = e.coerce(s[0]), "string" != typeof s[0] && s.unshift("%O");
                var c = 0;
                s[0] = s[0].replace(/%([a-zA-Z%])/g, function(n, r) {
                  if ("%%" === n) return n;
                  c++;
                  var o = e.formatters[r];
                  if ("function" == typeof o) {
                    var i = s[c];
                    n = o.call(t, i), s.splice(c, 1), c--;
                  }
                  return n;
                }), e.formatArgs.call(t, s);
                var u = n.log || e.log || console.log.bind(console);
                u.apply(t, s);
              }
            }
            var o;
            return n.namespace = t, n.enabled = e.enabled(t), n.useColors = e.useColors(), n.color = r(t), 
            n.destroy = i, "function" == typeof e.init && e.init(n), e.instances.push(n), n;
          }
          function i() {
            var t = e.instances.indexOf(this);
            return -1 !== t && (e.instances.splice(t, 1), !0);
          }
          function s(t) {
            e.save(t), e.names = [], e.skips = [];
            var n, r = ("string" == typeof t ? t : "").split(/[\s,]+/), o = r.length;
            for (n = 0; n < o; n++) r[n] && (t = r[n].replace(/\*/g, ".*?"), "-" === t[0] ? e.skips.push(new RegExp("^" + t.substr(1) + "$")) : e.names.push(new RegExp("^" + t + "$")));
            for (n = 0; n < e.instances.length; n++) {
              var i = e.instances[n];
              i.enabled = e.enabled(i.namespace);
            }
          }
          function a() {
            e.enable("");
          }
          function c(t) {
            if ("*" === t[t.length - 1]) return !0;
            var n, r;
            for (n = 0, r = e.skips.length; n < r; n++) if (e.skips[n].test(t)) return !1;
            for (n = 0, r = e.names.length; n < r; n++) if (e.names[n].test(t)) return !0;
            return !1;
          }
          function u(t) {
            return t instanceof Error ? t.stack || t.message : t;
          }
          e = t.exports = o.debug = o["default"] = o, e.coerce = u, e.disable = a, e.enable = s, 
          e.enabled = c, e.humanize = n(10), e.instances = [], e.names = [], e.skips = [], 
          e.formatters = {};
        }, function(t, e) {
          function n(t) {
            if (t = String(t), !(t.length > 100)) {
              var e = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);
              if (e) {
                var n = parseFloat(e[1]), r = (e[2] || "ms").toLowerCase();
                switch (r) {
                 case "years":
                 case "year":
                 case "yrs":
                 case "yr":
                 case "y":
                  return n * p;

                 case "days":
                 case "day":
                 case "d":
                  return n * u;

                 case "hours":
                 case "hour":
                 case "hrs":
                 case "hr":
                 case "h":
                  return n * c;

                 case "minutes":
                 case "minute":
                 case "mins":
                 case "min":
                 case "m":
                  return n * a;

                 case "seconds":
                 case "second":
                 case "secs":
                 case "sec":
                 case "s":
                  return n * s;

                 case "milliseconds":
                 case "millisecond":
                 case "msecs":
                 case "msec":
                 case "ms":
                  return n;

                 default:
                  return;
                }
              }
            }
          }
          function r(t) {
            return t >= u ? Math.round(t / u) + "d" : t >= c ? Math.round(t / c) + "h" : t >= a ? Math.round(t / a) + "m" : t >= s ? Math.round(t / s) + "s" : t + "ms";
          }
          function o(t) {
            return i(t, u, "day") || i(t, c, "hour") || i(t, a, "minute") || i(t, s, "second") || t + " ms";
          }
          function i(t, e, n) {
            if (!(t < e)) return t < 1.5 * e ? Math.floor(t / e) + " " + n : Math.ceil(t / e) + " " + n + "s";
          }
          var s = 1e3, a = 60 * s, c = 60 * a, u = 24 * c, p = 365.25 * u;
          t.exports = function(t, e) {
            e = e || {};
            var i = typeof t;
            if ("string" === i && t.length > 0) return n(t);
            if ("number" === i && !1 === isNaN(t)) return e["long"] ? o(t) : r(t);
            throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
          };
        }, function(t, e, n) {
          function r(t) {
            if (t) return o(t);
          }
          function o(t) {
            for (var e in r.prototype) t[e] = r.prototype[e];
            return t;
          }
          t.exports = r, r.prototype.on = r.prototype.addEventListener = function(t, e) {
            return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), 
            this;
          }, r.prototype.once = function(t, e) {
            function n() {
              this.off(t, n), e.apply(this, arguments);
            }
            return n.fn = e, this.on(t, n), this;
          }, r.prototype.off = r.prototype.removeListener = r.prototype.removeAllListeners = r.prototype.removeEventListener = function(t, e) {
            if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, 
            this;
            var n = this._callbacks["$" + t];
            if (!n) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t], this;
            for (var r, o = 0; o < n.length; o++) if (r = n[o], r === e || r.fn === e) {
              n.splice(o, 1);
              break;
            }
            return this;
          }, r.prototype.emit = function(t) {
            this._callbacks = this._callbacks || {};
            var e = [].slice.call(arguments, 1), n = this._callbacks["$" + t];
            if (n) {
              n = n.slice(0);
              for (var r = 0, o = n.length; r < o; ++r) n[r].apply(this, e);
            }
            return this;
          }, r.prototype.listeners = function(t) {
            return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];
          }, r.prototype.hasListeners = function(t) {
            return !!this.listeners(t).length;
          };
        }, function(t, e, n) {
          function r(t, e) {
            if (!t) return t;
            if (s(t)) {
              var n = {
                _placeholder: !0,
                num: e.length
              };
              return e.push(t), n;
            }
            if (i(t)) {
              for (var o = new Array(t.length), a = 0; a < t.length; a++) o[a] = r(t[a], e);
              return o;
            }
            if ("object" == typeof t && !(t instanceof Date)) {
              var o = {};
              for (var c in t) o[c] = r(t[c], e);
              return o;
            }
            return t;
          }
          function o(t, e) {
            if (!t) return t;
            if (t && t._placeholder) return e[t.num];
            if (i(t)) for (var n = 0; n < t.length; n++) t[n] = o(t[n], e); else if ("object" == typeof t) for (var r in t) t[r] = o(t[r], e);
            return t;
          }
          var i = n(13), s = n(14), a = Object.prototype.toString, c = "function" == typeof Blob || "undefined" != typeof Blob && "[object BlobConstructor]" === a.call(Blob), u = "function" == typeof File || "undefined" != typeof File && "[object FileConstructor]" === a.call(File);
          e.deconstructPacket = function(t) {
            var e = [], n = t.data, o = t;
            return o.data = r(n, e), o.attachments = e.length, {
              packet: o,
              buffers: e
            };
          }, e.reconstructPacket = function(t, e) {
            return t.data = o(t.data, e), t.attachments = void 0, t;
          }, e.removeBlobs = function(t, e) {
            function n(t, a, p) {
              if (!t) return t;
              if (c && t instanceof Blob || u && t instanceof File) {
                r++;
                var h = new FileReader();
                h.onload = function() {
                  p ? p[a] = this.result : o = this.result, --r || e(o);
                }, h.readAsArrayBuffer(t);
              } else if (i(t)) for (var f = 0; f < t.length; f++) n(t[f], f, t); else if ("object" == typeof t && !s(t)) for (var l in t) n(t[l], l, t);
            }
            var r = 0, o = t;
            n(o), r || e(o);
          };
        }, function(t, e) {
          var n = {}.toString;
          t.exports = Array.isArray || function(t) {
            return "[object Array]" == n.call(t);
          };
        }, function(t, e) {
          function n(t) {
            return r && Buffer.isBuffer(t) || o && (t instanceof ArrayBuffer || i(t));
          }
          t.exports = n;
          var r = "function" == typeof Buffer && "function" == typeof Buffer.isBuffer, o = "function" == typeof ArrayBuffer, i = function i(t) {
            return "function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t) : t.buffer instanceof ArrayBuffer;
          };
        }, function(t, e, n) {
          function r(t, e) {
            if (!(this instanceof r)) return new r(t, e);
            t && "object" == typeof t && (e = t, t = void 0), e = e || {}, e.path = e.path || "/socket.io", 
            this.nsps = {}, this.subs = [], this.opts = e, this.reconnection(!1 !== e.reconnection), 
            this.reconnectionAttempts(e.reconnectionAttempts || 1 / 0), this.reconnectionDelay(e.reconnectionDelay || 1e3), 
            this.reconnectionDelayMax(e.reconnectionDelayMax || 5e3), this.randomizationFactor(e.randomizationFactor || .5), 
            this.backoff = new f({
              min: this.reconnectionDelay(),
              max: this.reconnectionDelayMax(),
              jitter: this.randomizationFactor()
            }), this.timeout(null == e.timeout ? 2e4 : e.timeout), this.readyState = "closed", 
            this.uri = t, this.connecting = [], this.lastPing = null, this.encoding = !1, this.packetBuffer = [];
            var n = e.parser || a;
            this.encoder = new n.Encoder(), this.decoder = new n.Decoder(), this.autoConnect = !1 !== e.autoConnect, 
            this.autoConnect && this.open();
          }
          var o = n(16), i = n(39), s = n(11), a = n(7), c = n(41), u = n(42), p = n(3)("socket.io-client:manager"), h = n(38), f = n(43), l = Object.prototype.hasOwnProperty;
          t.exports = r, r.prototype.emitAll = function() {
            this.emit.apply(this, arguments);
            for (var t in this.nsps) l.call(this.nsps, t) && this.nsps[t].emit.apply(this.nsps[t], arguments);
          }, r.prototype.updateSocketIds = function() {
            for (var t in this.nsps) l.call(this.nsps, t) && (this.nsps[t].id = this.generateId(t));
          }, r.prototype.generateId = function(t) {
            return ("/" === t ? "" : t + "#") + this.engine.id;
          }, s(r.prototype), r.prototype.reconnection = function(t) {
            return arguments.length ? (this._reconnection = !!t, this) : this._reconnection;
          }, r.prototype.reconnectionAttempts = function(t) {
            return arguments.length ? (this._reconnectionAttempts = t, this) : this._reconnectionAttempts;
          }, r.prototype.reconnectionDelay = function(t) {
            return arguments.length ? (this._reconnectionDelay = t, this.backoff && this.backoff.setMin(t), 
            this) : this._reconnectionDelay;
          }, r.prototype.randomizationFactor = function(t) {
            return arguments.length ? (this._randomizationFactor = t, this.backoff && this.backoff.setJitter(t), 
            this) : this._randomizationFactor;
          }, r.prototype.reconnectionDelayMax = function(t) {
            return arguments.length ? (this._reconnectionDelayMax = t, this.backoff && this.backoff.setMax(t), 
            this) : this._reconnectionDelayMax;
          }, r.prototype.timeout = function(t) {
            return arguments.length ? (this._timeout = t, this) : this._timeout;
          }, r.prototype.maybeReconnectOnOpen = function() {
            !this.reconnecting && this._reconnection && 0 === this.backoff.attempts && this.reconnect();
          }, r.prototype.open = r.prototype.connect = function(t, e) {
            if (p("readyState %s", this.readyState), ~this.readyState.indexOf("open")) return this;
            p("opening %s", this.uri), this.engine = o(this.uri, this.opts);
            var n = this.engine, r = this;
            this.readyState = "opening", this.skipReconnect = !1;
            var i = c(n, "open", function() {
              r.onopen(), t && t();
            }), s = c(n, "error", function(e) {
              if (p("connect_error"), r.cleanup(), r.readyState = "closed", r.emitAll("connect_error", e), 
              t) {
                var n = new Error("Connection error");
                n.data = e, t(n);
              } else r.maybeReconnectOnOpen();
            });
            if (!1 !== this._timeout) {
              var a = this._timeout;
              p("connect attempt will timeout after %d", a);
              var u = setTimeout(function() {
                p("connect attempt timed out after %d", a), i.destroy(), n.close(), n.emit("error", "timeout"), 
                r.emitAll("connect_timeout", a);
              }, a);
              this.subs.push({
                destroy: function destroy() {
                  clearTimeout(u);
                }
              });
            }
            return this.subs.push(i), this.subs.push(s), this;
          }, r.prototype.onopen = function() {
            p("open"), this.cleanup(), this.readyState = "open", this.emit("open");
            var t = this.engine;
            this.subs.push(c(t, "data", u(this, "ondata"))), this.subs.push(c(t, "ping", u(this, "onping"))), 
            this.subs.push(c(t, "pong", u(this, "onpong"))), this.subs.push(c(t, "error", u(this, "onerror"))), 
            this.subs.push(c(t, "close", u(this, "onclose"))), this.subs.push(c(this.decoder, "decoded", u(this, "ondecoded")));
          }, r.prototype.onping = function() {
            this.lastPing = new Date(), this.emitAll("ping");
          }, r.prototype.onpong = function() {
            this.emitAll("pong", new Date() - this.lastPing);
          }, r.prototype.ondata = function(t) {
            this.decoder.add(t);
          }, r.prototype.ondecoded = function(t) {
            this.emit("packet", t);
          }, r.prototype.onerror = function(t) {
            p("error", t), this.emitAll("error", t);
          }, r.prototype.socket = function(t, e) {
            function n() {
              ~h(o.connecting, r) || o.connecting.push(r);
            }
            var r = this.nsps[t];
            if (!r) {
              r = new i(this, t, e), this.nsps[t] = r;
              var o = this;
              r.on("connecting", n), r.on("connect", function() {
                r.id = o.generateId(t);
              }), this.autoConnect && n();
            }
            return r;
          }, r.prototype.destroy = function(t) {
            var e = h(this.connecting, t);
            ~e && this.connecting.splice(e, 1), this.connecting.length || this.close();
          }, r.prototype.packet = function(t) {
            p("writing packet %j", t);
            var e = this;
            t.query && 0 === t.type && (t.nsp += "?" + t.query), e.encoding ? e.packetBuffer.push(t) : (e.encoding = !0, 
            this.encoder.encode(t, function(n) {
              for (var r = 0; r < n.length; r++) e.engine.write(n[r], t.options);
              e.encoding = !1, e.processPacketQueue();
            }));
          }, r.prototype.processPacketQueue = function() {
            if (this.packetBuffer.length > 0 && !this.encoding) {
              var t = this.packetBuffer.shift();
              this.packet(t);
            }
          }, r.prototype.cleanup = function() {
            p("cleanup");
            for (var t = this.subs.length, e = 0; e < t; e++) {
              var n = this.subs.shift();
              n.destroy();
            }
            this.packetBuffer = [], this.encoding = !1, this.lastPing = null, this.decoder.destroy();
          }, r.prototype.close = r.prototype.disconnect = function() {
            p("disconnect"), this.skipReconnect = !0, this.reconnecting = !1, "opening" === this.readyState && this.cleanup(), 
            this.backoff.reset(), this.readyState = "closed", this.engine && this.engine.close();
          }, r.prototype.onclose = function(t) {
            p("onclose"), this.cleanup(), this.backoff.reset(), this.readyState = "closed", 
            this.emit("close", t), this._reconnection && !this.skipReconnect && this.reconnect();
          }, r.prototype.reconnect = function() {
            if (this.reconnecting || this.skipReconnect) return this;
            var t = this;
            if (this.backoff.attempts >= this._reconnectionAttempts) p("reconnect failed"), 
            this.backoff.reset(), this.emitAll("reconnect_failed"), this.reconnecting = !1; else {
              var e = this.backoff.duration();
              p("will wait %dms before reconnect attempt", e), this.reconnecting = !0;
              var n = setTimeout(function() {
                t.skipReconnect || (p("attempting reconnect"), t.emitAll("reconnect_attempt", t.backoff.attempts), 
                t.emitAll("reconnecting", t.backoff.attempts), t.skipReconnect || t.open(function(e) {
                  e ? (p("reconnect attempt error"), t.reconnecting = !1, t.reconnect(), t.emitAll("reconnect_error", e.data)) : (p("reconnect success"), 
                  t.onreconnect());
                }));
              }, e);
              this.subs.push({
                destroy: function destroy() {
                  clearTimeout(n);
                }
              });
            }
          }, r.prototype.onreconnect = function() {
            var t = this.backoff.attempts;
            this.reconnecting = !1, this.backoff.reset(), this.updateSocketIds(), this.emitAll("reconnect", t);
          };
        }, function(t, e, n) {
          t.exports = n(17), t.exports.parser = n(24);
        }, function(t, e, n) {
          function r(t, e) {
            return this instanceof r ? (e = e || {}, t && "object" == typeof t && (e = t, t = null), 
            t ? (t = p(t), e.hostname = t.host, e.secure = "https" === t.protocol || "wss" === t.protocol, 
            e.port = t.port, t.query && (e.query = t.query)) : e.host && (e.hostname = p(e.host).host), 
            this.secure = null != e.secure ? e.secure : "undefined" != typeof location && "https:" === location.protocol, 
            e.hostname && !e.port && (e.port = this.secure ? "443" : "80"), this.agent = e.agent || !1, 
            this.hostname = e.hostname || ("undefined" != typeof location ? location.hostname : "localhost"), 
            this.port = e.port || ("undefined" != typeof location && location.port ? location.port : this.secure ? 443 : 80), 
            this.query = e.query || {}, "string" == typeof this.query && (this.query = h.decode(this.query)), 
            this.upgrade = !1 !== e.upgrade, this.path = (e.path || "/engine.io").replace(/\/$/, "") + "/", 
            this.forceJSONP = !!e.forceJSONP, this.jsonp = !1 !== e.jsonp, this.forceBase64 = !!e.forceBase64, 
            this.enablesXDR = !!e.enablesXDR, this.withCredentials = !1 !== e.withCredentials, 
            this.timestampParam = e.timestampParam || "t", this.timestampRequests = e.timestampRequests, 
            this.transports = e.transports || [ "polling", "websocket" ], this.transportOptions = e.transportOptions || {}, 
            this.readyState = "", this.writeBuffer = [], this.prevBufferLen = 0, this.policyPort = e.policyPort || 843, 
            this.rememberUpgrade = e.rememberUpgrade || !1, this.binaryType = null, this.onlyBinaryUpgrades = e.onlyBinaryUpgrades, 
            this.perMessageDeflate = !1 !== e.perMessageDeflate && (e.perMessageDeflate || {}), 
            !0 === this.perMessageDeflate && (this.perMessageDeflate = {}), this.perMessageDeflate && null == this.perMessageDeflate.threshold && (this.perMessageDeflate.threshold = 1024), 
            this.pfx = e.pfx || null, this.key = e.key || null, this.passphrase = e.passphrase || null, 
            this.cert = e.cert || null, this.ca = e.ca || null, this.ciphers = e.ciphers || null, 
            this.rejectUnauthorized = void 0 === e.rejectUnauthorized || e.rejectUnauthorized, 
            this.forceNode = !!e.forceNode, this.isReactNative = "undefined" != typeof navigator && "string" == typeof navigator.product && "reactnative" === navigator.product.toLowerCase(), 
            ("undefined" == typeof self || this.isReactNative) && (e.extraHeaders && Object.keys(e.extraHeaders).length > 0 && (this.extraHeaders = e.extraHeaders), 
            e.localAddress && (this.localAddress = e.localAddress)), this.id = null, this.upgrades = null, 
            this.pingInterval = null, this.pingTimeout = null, this.pingIntervalTimer = null, 
            this.pingTimeoutTimer = null, void this.open()) : new r(t, e);
          }
          function o(t) {
            var e = {};
            for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
            return e;
          }
          var i = n(18), s = n(11), a = n(3)("engine.io-client:socket"), c = n(38), u = n(24), p = n(2), h = n(32);
          t.exports = r, r.priorWebsocketSuccess = !1, s(r.prototype), r.protocol = u.protocol, 
          r.Socket = r, r.Transport = n(23), r.transports = n(18), r.parser = n(24), r.prototype.createTransport = function(t) {
            a('creating transport "%s"', t);
            var e = o(this.query);
            e.EIO = u.protocol, e.transport = t;
            var n = this.transportOptions[t] || {};
            this.id && (e.sid = this.id);
            var r = new i[t]({
              query: e,
              socket: this,
              agent: n.agent || this.agent,
              hostname: n.hostname || this.hostname,
              port: n.port || this.port,
              secure: n.secure || this.secure,
              path: n.path || this.path,
              forceJSONP: n.forceJSONP || this.forceJSONP,
              jsonp: n.jsonp || this.jsonp,
              forceBase64: n.forceBase64 || this.forceBase64,
              enablesXDR: n.enablesXDR || this.enablesXDR,
              withCredentials: n.withCredentials || this.withCredentials,
              timestampRequests: n.timestampRequests || this.timestampRequests,
              timestampParam: n.timestampParam || this.timestampParam,
              policyPort: n.policyPort || this.policyPort,
              pfx: n.pfx || this.pfx,
              key: n.key || this.key,
              passphrase: n.passphrase || this.passphrase,
              cert: n.cert || this.cert,
              ca: n.ca || this.ca,
              ciphers: n.ciphers || this.ciphers,
              rejectUnauthorized: n.rejectUnauthorized || this.rejectUnauthorized,
              perMessageDeflate: n.perMessageDeflate || this.perMessageDeflate,
              extraHeaders: n.extraHeaders || this.extraHeaders,
              forceNode: n.forceNode || this.forceNode,
              localAddress: n.localAddress || this.localAddress,
              requestTimeout: n.requestTimeout || this.requestTimeout,
              protocols: n.protocols || void 0,
              isReactNative: this.isReactNative
            });
            return r;
          }, r.prototype.open = function() {
            var t;
            if (this.rememberUpgrade && r.priorWebsocketSuccess && -1 !== this.transports.indexOf("websocket")) t = "websocket"; else {
              if (0 === this.transports.length) {
                var e = this;
                return void setTimeout(function() {
                  e.emit("error", "No transports available");
                }, 0);
              }
              t = this.transports[0];
            }
            this.readyState = "opening";
            try {
              t = this.createTransport(t);
            } catch (n) {
              return this.transports.shift(), void this.open();
            }
            t.open(), this.setTransport(t);
          }, r.prototype.setTransport = function(t) {
            a("setting transport %s", t.name);
            var e = this;
            this.transport && (a("clearing existing transport %s", this.transport.name), this.transport.removeAllListeners()), 
            this.transport = t, t.on("drain", function() {
              e.onDrain();
            }).on("packet", function(t) {
              e.onPacket(t);
            }).on("error", function(t) {
              e.onError(t);
            }).on("close", function() {
              e.onClose("transport close");
            });
          }, r.prototype.probe = function(t) {
            function e() {
              if (f.onlyBinaryUpgrades) {
                var e = !this.supportsBinary && f.transport.supportsBinary;
                h = h || e;
              }
              h || (a('probe transport "%s" opened', t), p.send([ {
                type: "ping",
                data: "probe"
              } ]), p.once("packet", function(e) {
                if (!h) if ("pong" === e.type && "probe" === e.data) {
                  if (a('probe transport "%s" pong', t), f.upgrading = !0, f.emit("upgrading", p), 
                  !p) return;
                  r.priorWebsocketSuccess = "websocket" === p.name, a('pausing current transport "%s"', f.transport.name), 
                  f.transport.pause(function() {
                    h || "closed" !== f.readyState && (a("changing transport and sending upgrade packet"), 
                    u(), f.setTransport(p), p.send([ {
                      type: "upgrade"
                    } ]), f.emit("upgrade", p), p = null, f.upgrading = !1, f.flush());
                  });
                } else {
                  a('probe transport "%s" failed', t);
                  var n = new Error("probe error");
                  n.transport = p.name, f.emit("upgradeError", n);
                }
              }));
            }
            function n() {
              h || (h = !0, u(), p.close(), p = null);
            }
            function o(e) {
              var r = new Error("probe error: " + e);
              r.transport = p.name, n(), a('probe transport "%s" failed because of error: %s', t, e), 
              f.emit("upgradeError", r);
            }
            function i() {
              o("transport closed");
            }
            function s() {
              o("socket closed");
            }
            function c(t) {
              p && t.name !== p.name && (a('"%s" works - aborting "%s"', t.name, p.name), n());
            }
            function u() {
              p.removeListener("open", e), p.removeListener("error", o), p.removeListener("close", i), 
              f.removeListener("close", s), f.removeListener("upgrading", c);
            }
            a('probing transport "%s"', t);
            var p = this.createTransport(t, {
              probe: 1
            }), h = !1, f = this;
            r.priorWebsocketSuccess = !1, p.once("open", e), p.once("error", o), p.once("close", i), 
            this.once("close", s), this.once("upgrading", c), p.open();
          }, r.prototype.onOpen = function() {
            if (a("socket open"), this.readyState = "open", r.priorWebsocketSuccess = "websocket" === this.transport.name, 
            this.emit("open"), this.flush(), "open" === this.readyState && this.upgrade && this.transport.pause) {
              a("starting upgrade probes");
              for (var t = 0, e = this.upgrades.length; t < e; t++) this.probe(this.upgrades[t]);
            }
          }, r.prototype.onPacket = function(t) {
            if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) switch (a('socket receive: type "%s", data "%s"', t.type, t.data), 
            this.emit("packet", t), this.emit("heartbeat"), t.type) {
             case "open":
              this.onHandshake(JSON.parse(t.data));
              break;

             case "pong":
              this.setPing(), this.emit("pong");
              break;

             case "error":
              var e = new Error("server error");
              e.code = t.data, this.onError(e);
              break;

             case "message":
              this.emit("data", t.data), this.emit("message", t.data);
            } else a('packet received with socket readyState "%s"', this.readyState);
          }, r.prototype.onHandshake = function(t) {
            this.emit("handshake", t), this.id = t.sid, this.transport.query.sid = t.sid, this.upgrades = this.filterUpgrades(t.upgrades), 
            this.pingInterval = t.pingInterval, this.pingTimeout = t.pingTimeout, this.onOpen(), 
            "closed" !== this.readyState && (this.setPing(), this.removeListener("heartbeat", this.onHeartbeat), 
            this.on("heartbeat", this.onHeartbeat));
          }, r.prototype.onHeartbeat = function(t) {
            clearTimeout(this.pingTimeoutTimer);
            var e = this;
            e.pingTimeoutTimer = setTimeout(function() {
              "closed" !== e.readyState && e.onClose("ping timeout");
            }, t || e.pingInterval + e.pingTimeout);
          }, r.prototype.setPing = function() {
            var t = this;
            clearTimeout(t.pingIntervalTimer), t.pingIntervalTimer = setTimeout(function() {
              a("writing ping packet - expecting pong within %sms", t.pingTimeout), t.ping(), 
              t.onHeartbeat(t.pingTimeout);
            }, t.pingInterval);
          }, r.prototype.ping = function() {
            var t = this;
            this.sendPacket("ping", function() {
              t.emit("ping");
            });
          }, r.prototype.onDrain = function() {
            this.writeBuffer.splice(0, this.prevBufferLen), this.prevBufferLen = 0, 0 === this.writeBuffer.length ? this.emit("drain") : this.flush();
          }, r.prototype.flush = function() {
            "closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length && (a("flushing %d packets in socket", this.writeBuffer.length), 
            this.transport.send(this.writeBuffer), this.prevBufferLen = this.writeBuffer.length, 
            this.emit("flush"));
          }, r.prototype.write = r.prototype.send = function(t, e, n) {
            return this.sendPacket("message", t, e, n), this;
          }, r.prototype.sendPacket = function(t, e, n, r) {
            if ("function" == typeof e && (r = e, e = void 0), "function" == typeof n && (r = n, 
            n = null), "closing" !== this.readyState && "closed" !== this.readyState) {
              n = n || {}, n.compress = !1 !== n.compress;
              var o = {
                type: t,
                data: e,
                options: n
              };
              this.emit("packetCreate", o), this.writeBuffer.push(o), r && this.once("flush", r), 
              this.flush();
            }
          }, r.prototype.close = function() {
            function t() {
              r.onClose("forced close"), a("socket closing - telling transport to close"), r.transport.close();
            }
            function e() {
              r.removeListener("upgrade", e), r.removeListener("upgradeError", e), t();
            }
            function n() {
              r.once("upgrade", e), r.once("upgradeError", e);
            }
            if ("opening" === this.readyState || "open" === this.readyState) {
              this.readyState = "closing";
              var r = this;
              this.writeBuffer.length ? this.once("drain", function() {
                this.upgrading ? n() : t();
              }) : this.upgrading ? n() : t();
            }
            return this;
          }, r.prototype.onError = function(t) {
            a("socket error %j", t), r.priorWebsocketSuccess = !1, this.emit("error", t), this.onClose("transport error", t);
          }, r.prototype.onClose = function(t, e) {
            if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
              a('socket close with reason: "%s"', t);
              var n = this;
              clearTimeout(this.pingIntervalTimer), clearTimeout(this.pingTimeoutTimer), this.transport.removeAllListeners("close"), 
              this.transport.close(), this.transport.removeAllListeners(), this.readyState = "closed", 
              this.id = null, this.emit("close", t, e), n.writeBuffer = [], n.prevBufferLen = 0;
            }
          }, r.prototype.filterUpgrades = function(t) {
            for (var e = [], n = 0, r = t.length; n < r; n++) ~c(this.transports, t[n]) && e.push(t[n]);
            return e;
          };
        }, function(t, e, n) {
          function r(t) {
            var e, n = !1, r = !1, a = !1 !== t.jsonp;
            if ("undefined" != typeof location) {
              var c = "https:" === location.protocol, u = location.port;
              u || (u = c ? 443 : 80), n = t.hostname !== location.hostname || u !== t.port, r = t.secure !== c;
            }
            if (t.xdomain = n, t.xscheme = r, e = new o(t), "open" in e && !t.forceJSONP) return new i(t);
            if (!a) throw new Error("JSONP disabled");
            return new s(t);
          }
          var o = n(19), i = n(21), s = n(35), a = n(36);
          e.polling = r, e.websocket = a;
        }, function(t, e, n) {
          var r = n(20);
          t.exports = function(t) {
            var e = t.xdomain, n = t.xscheme, o = t.enablesXDR;
            try {
              if ("undefined" != typeof XMLHttpRequest && (!e || r)) return new XMLHttpRequest();
            } catch (i) {}
            try {
              if ("undefined" != typeof XDomainRequest && !n && o) return new XDomainRequest();
            } catch (i) {}
            if (!e) try {
              return new (self[[ "Active" ].concat("Object").join("X")])("Microsoft.XMLHTTP");
            } catch (i) {}
          };
        }, function(t, e) {
          try {
            t.exports = "undefined" != typeof XMLHttpRequest && "withCredentials" in new XMLHttpRequest();
          } catch (n) {
            t.exports = !1;
          }
        }, function(t, e, n) {
          function r() {}
          function o(t) {
            if (c.call(this, t), this.requestTimeout = t.requestTimeout, this.extraHeaders = t.extraHeaders, 
            "undefined" != typeof location) {
              var e = "https:" === location.protocol, n = location.port;
              n || (n = e ? 443 : 80), this.xd = "undefined" != typeof location && t.hostname !== location.hostname || n !== t.port, 
              this.xs = t.secure !== e;
            }
          }
          function i(t) {
            this.method = t.method || "GET", this.uri = t.uri, this.xd = !!t.xd, this.xs = !!t.xs, 
            this.async = !1 !== t.async, this.data = void 0 !== t.data ? t.data : null, this.agent = t.agent, 
            this.isBinary = t.isBinary, this.supportsBinary = t.supportsBinary, this.enablesXDR = t.enablesXDR, 
            this.withCredentials = t.withCredentials, this.requestTimeout = t.requestTimeout, 
            this.pfx = t.pfx, this.key = t.key, this.passphrase = t.passphrase, this.cert = t.cert, 
            this.ca = t.ca, this.ciphers = t.ciphers, this.rejectUnauthorized = t.rejectUnauthorized, 
            this.extraHeaders = t.extraHeaders, this.create();
          }
          function s() {
            for (var t in i.requests) i.requests.hasOwnProperty(t) && i.requests[t].abort();
          }
          var a = n(19), c = n(22), u = n(11), p = n(33), h = n(3)("engine.io-client:polling-xhr");
          if (t.exports = o, t.exports.Request = i, p(o, c), o.prototype.supportsBinary = !0, 
          o.prototype.request = function(t) {
            return t = t || {}, t.uri = this.uri(), t.xd = this.xd, t.xs = this.xs, t.agent = this.agent || !1, 
            t.supportsBinary = this.supportsBinary, t.enablesXDR = this.enablesXDR, t.withCredentials = this.withCredentials, 
            t.pfx = this.pfx, t.key = this.key, t.passphrase = this.passphrase, t.cert = this.cert, 
            t.ca = this.ca, t.ciphers = this.ciphers, t.rejectUnauthorized = this.rejectUnauthorized, 
            t.requestTimeout = this.requestTimeout, t.extraHeaders = this.extraHeaders, new i(t);
          }, o.prototype.doWrite = function(t, e) {
            var n = "string" != typeof t && void 0 !== t, r = this.request({
              method: "POST",
              data: t,
              isBinary: n
            }), o = this;
            r.on("success", e), r.on("error", function(t) {
              o.onError("xhr post error", t);
            }), this.sendXhr = r;
          }, o.prototype.doPoll = function() {
            h("xhr poll");
            var t = this.request(), e = this;
            t.on("data", function(t) {
              e.onData(t);
            }), t.on("error", function(t) {
              e.onError("xhr poll error", t);
            }), this.pollXhr = t;
          }, u(i.prototype), i.prototype.create = function() {
            var t = {
              agent: this.agent,
              xdomain: this.xd,
              xscheme: this.xs,
              enablesXDR: this.enablesXDR
            };
            t.pfx = this.pfx, t.key = this.key, t.passphrase = this.passphrase, t.cert = this.cert, 
            t.ca = this.ca, t.ciphers = this.ciphers, t.rejectUnauthorized = this.rejectUnauthorized;
            var e = this.xhr = new a(t), n = this;
            try {
              h("xhr open %s: %s", this.method, this.uri), e.open(this.method, this.uri, this.async);
              try {
                if (this.extraHeaders) {
                  e.setDisableHeaderCheck && e.setDisableHeaderCheck(!0);
                  for (var r in this.extraHeaders) this.extraHeaders.hasOwnProperty(r) && e.setRequestHeader(r, this.extraHeaders[r]);
                }
              } catch (o) {}
              if ("POST" === this.method) try {
                this.isBinary ? e.setRequestHeader("Content-type", "application/octet-stream") : e.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
              } catch (o) {}
              try {
                e.setRequestHeader("Accept", "*/*");
              } catch (o) {}
              "withCredentials" in e && (e.withCredentials = this.withCredentials), this.requestTimeout && (e.timeout = this.requestTimeout), 
              this.hasXDR() ? (e.onload = function() {
                n.onLoad();
              }, e.onerror = function() {
                n.onError(e.responseText);
              }) : e.onreadystatechange = function() {
                if (2 === e.readyState) try {
                  var t = e.getResponseHeader("Content-Type");
                  (n.supportsBinary && "application/octet-stream" === t || "application/octet-stream; charset=UTF-8" === t) && (e.responseType = "arraybuffer");
                } catch (r) {}
                4 === e.readyState && (200 === e.status || 1223 === e.status ? n.onLoad() : setTimeout(function() {
                  n.onError("number" == typeof e.status ? e.status : 0);
                }, 0));
              }, h("xhr data %s", this.data), e.send(this.data);
            } catch (o) {
              return void setTimeout(function() {
                n.onError(o);
              }, 0);
            }
            "undefined" != typeof document && (this.index = i.requestsCount++, i.requests[this.index] = this);
          }, i.prototype.onSuccess = function() {
            this.emit("success"), this.cleanup();
          }, i.prototype.onData = function(t) {
            this.emit("data", t), this.onSuccess();
          }, i.prototype.onError = function(t) {
            this.emit("error", t), this.cleanup(!0);
          }, i.prototype.cleanup = function(t) {
            if ("undefined" != typeof this.xhr && null !== this.xhr) {
              if (this.hasXDR() ? this.xhr.onload = this.xhr.onerror = r : this.xhr.onreadystatechange = r, 
              t) try {
                this.xhr.abort();
              } catch (e) {}
              "undefined" != typeof document && delete i.requests[this.index], this.xhr = null;
            }
          }, i.prototype.onLoad = function() {
            var t;
            try {
              var e;
              try {
                e = this.xhr.getResponseHeader("Content-Type");
              } catch (n) {}
              t = ("application/octet-stream" === e || "application/octet-stream; charset=UTF-8" === e) && this.xhr.response || this.xhr.responseText;
            } catch (n) {
              this.onError(n);
            }
            null != t && this.onData(t);
          }, i.prototype.hasXDR = function() {
            return "undefined" != typeof XDomainRequest && !this.xs && this.enablesXDR;
          }, i.prototype.abort = function() {
            this.cleanup();
          }, i.requestsCount = 0, i.requests = {}, "undefined" != typeof document) if ("function" == typeof attachEvent) attachEvent("onunload", s); else if ("function" == typeof addEventListener) {
            var f = "onpagehide" in self ? "pagehide" : "unload";
            addEventListener(f, s, !1);
          }
        }, function(t, e, n) {
          function r(t) {
            var e = t && t.forceBase64;
            p && !e || (this.supportsBinary = !1), o.call(this, t);
          }
          var o = n(23), i = n(32), s = n(24), a = n(33), c = n(34), u = n(3)("engine.io-client:polling");
          t.exports = r;
          var p = function() {
            var t = n(19), e = new t({
              xdomain: !1
            });
            return null != e.responseType;
          }();
          a(r, o), r.prototype.name = "polling", r.prototype.doOpen = function() {
            this.poll();
          }, r.prototype.pause = function(t) {
            function e() {
              u("paused"), n.readyState = "paused", t();
            }
            var n = this;
            if (this.readyState = "pausing", this.polling || !this.writable) {
              var r = 0;
              this.polling && (u("we are currently polling - waiting to pause"), r++, this.once("pollComplete", function() {
                u("pre-pause polling complete"), --r || e();
              })), this.writable || (u("we are currently writing - waiting to pause"), r++, this.once("drain", function() {
                u("pre-pause writing complete"), --r || e();
              }));
            } else e();
          }, r.prototype.poll = function() {
            u("polling"), this.polling = !0, this.doPoll(), this.emit("poll");
          }, r.prototype.onData = function(t) {
            var e = this;
            u("polling got data %s", t);
            var n = function n(t, _n, r) {
              return "opening" === e.readyState && e.onOpen(), "close" === t.type ? (e.onClose(), 
              !1) : void e.onPacket(t);
            };
            s.decodePayload(t, this.socket.binaryType, n), "closed" !== this.readyState && (this.polling = !1, 
            this.emit("pollComplete"), "open" === this.readyState ? this.poll() : u('ignoring poll - transport state "%s"', this.readyState));
          }, r.prototype.doClose = function() {
            function t() {
              u("writing close packet"), e.write([ {
                type: "close"
              } ]);
            }
            var e = this;
            "open" === this.readyState ? (u("transport open - closing"), t()) : (u("transport not open - deferring close"), 
            this.once("open", t));
          }, r.prototype.write = function(t) {
            var e = this;
            this.writable = !1;
            var n = function n() {
              e.writable = !0, e.emit("drain");
            };
            s.encodePayload(t, this.supportsBinary, function(t) {
              e.doWrite(t, n);
            });
          }, r.prototype.uri = function() {
            var t = this.query || {}, e = this.secure ? "https" : "http", n = "";
            !1 !== this.timestampRequests && (t[this.timestampParam] = c()), this.supportsBinary || t.sid || (t.b64 = 1), 
            t = i.encode(t), this.port && ("https" === e && 443 !== Number(this.port) || "http" === e && 80 !== Number(this.port)) && (n = ":" + this.port), 
            t.length && (t = "?" + t);
            var r = -1 !== this.hostname.indexOf(":");
            return e + "://" + (r ? "[" + this.hostname + "]" : this.hostname) + n + this.path + t;
          };
        }, function(t, e, n) {
          function r(t) {
            this.path = t.path, this.hostname = t.hostname, this.port = t.port, this.secure = t.secure, 
            this.query = t.query, this.timestampParam = t.timestampParam, this.timestampRequests = t.timestampRequests, 
            this.readyState = "", this.agent = t.agent || !1, this.socket = t.socket, this.enablesXDR = t.enablesXDR, 
            this.withCredentials = t.withCredentials, this.pfx = t.pfx, this.key = t.key, this.passphrase = t.passphrase, 
            this.cert = t.cert, this.ca = t.ca, this.ciphers = t.ciphers, this.rejectUnauthorized = t.rejectUnauthorized, 
            this.forceNode = t.forceNode, this.isReactNative = t.isReactNative, this.extraHeaders = t.extraHeaders, 
            this.localAddress = t.localAddress;
          }
          var o = n(24), i = n(11);
          t.exports = r, i(r.prototype), r.prototype.onError = function(t, e) {
            var n = new Error(t);
            return n.type = "TransportError", n.description = e, this.emit("error", n), this;
          }, r.prototype.open = function() {
            return "closed" !== this.readyState && "" !== this.readyState || (this.readyState = "opening", 
            this.doOpen()), this;
          }, r.prototype.close = function() {
            return "opening" !== this.readyState && "open" !== this.readyState || (this.doClose(), 
            this.onClose()), this;
          }, r.prototype.send = function(t) {
            if ("open" !== this.readyState) throw new Error("Transport not open");
            this.write(t);
          }, r.prototype.onOpen = function() {
            this.readyState = "open", this.writable = !0, this.emit("open");
          }, r.prototype.onData = function(t) {
            var e = o.decodePacket(t, this.socket.binaryType);
            this.onPacket(e);
          }, r.prototype.onPacket = function(t) {
            this.emit("packet", t);
          }, r.prototype.onClose = function() {
            this.readyState = "closed", this.emit("close");
          };
        }, function(t, e, n) {
          function r(t, n) {
            var r = "b" + e.packets[t.type] + t.data.data;
            return n(r);
          }
          function o(t, n, r) {
            if (!n) return e.encodeBase64Packet(t, r);
            var o = t.data, i = new Uint8Array(o), s = new Uint8Array(1 + o.byteLength);
            s[0] = v[t.type];
            for (var a = 0; a < i.length; a++) s[a + 1] = i[a];
            return r(s.buffer);
          }
          function i(t, n, r) {
            if (!n) return e.encodeBase64Packet(t, r);
            var o = new FileReader();
            return o.onload = function() {
              e.encodePacket({
                type: t.type,
                data: o.result
              }, n, !0, r);
            }, o.readAsArrayBuffer(t.data);
          }
          function s(t, n, r) {
            if (!n) return e.encodeBase64Packet(t, r);
            if (g) return i(t, n, r);
            var o = new Uint8Array(1);
            o[0] = v[t.type];
            var s = new w([ o.buffer, t.data ]);
            return r(s);
          }
          function a(t) {
            try {
              t = d.decode(t, {
                strict: !1
              });
            } catch (e) {
              return !1;
            }
            return t;
          }
          function c(t, e, n) {
            for (var r = new Array(t.length), o = l(t.length, n), i = function i(t, n, o) {
              e(n, function(e, n) {
                r[t] = n, o(e, r);
              });
            }, s = 0; s < t.length; s++) i(s, t[s], o);
          }
          var u, p = n(25), h = n(26), f = n(27), l = n(28), d = n(29);
          "undefined" != typeof ArrayBuffer && (u = n(30));
          var y = "undefined" != typeof navigator && /Android/i.test(navigator.userAgent), m = "undefined" != typeof navigator && /PhantomJS/i.test(navigator.userAgent), g = y || m;
          e.protocol = 3;
          var v = e.packets = {
            open: 0,
            close: 1,
            ping: 2,
            pong: 3,
            message: 4,
            upgrade: 5,
            noop: 6
          }, b = p(v), C = {
            type: "error",
            data: "parser error"
          }, w = n(31);
          e.encodePacket = function(t, e, n, i) {
            "function" == typeof e && (i = e, e = !1), "function" == typeof n && (i = n, n = null);
            var a = void 0 === t.data ? void 0 : t.data.buffer || t.data;
            if ("undefined" != typeof ArrayBuffer && a instanceof ArrayBuffer) return o(t, e, i);
            if ("undefined" != typeof w && a instanceof w) return s(t, e, i);
            if (a && a.base64) return r(t, i);
            var c = v[t.type];
            return void 0 !== t.data && (c += n ? d.encode(String(t.data), {
              strict: !1
            }) : String(t.data)), i("" + c);
          }, e.encodeBase64Packet = function(t, n) {
            var r = "b" + e.packets[t.type];
            if ("undefined" != typeof w && t.data instanceof w) {
              var o = new FileReader();
              return o.onload = function() {
                var t = o.result.split(",")[1];
                n(r + t);
              }, o.readAsDataURL(t.data);
            }
            var i;
            try {
              i = String.fromCharCode.apply(null, new Uint8Array(t.data));
            } catch (s) {
              for (var a = new Uint8Array(t.data), c = new Array(a.length), u = 0; u < a.length; u++) c[u] = a[u];
              i = String.fromCharCode.apply(null, c);
            }
            return r += btoa(i), n(r);
          }, e.decodePacket = function(t, n, r) {
            if (void 0 === t) return C;
            if ("string" == typeof t) {
              if ("b" === t.charAt(0)) return e.decodeBase64Packet(t.substr(1), n);
              if (r && (t = a(t), !1 === t)) return C;
              var o = t.charAt(0);
              return Number(o) == o && b[o] ? t.length > 1 ? {
                type: b[o],
                data: t.substring(1)
              } : {
                type: b[o]
              } : C;
            }
            var i = new Uint8Array(t), o = i[0], s = f(t, 1);
            return w && "blob" === n && (s = new w([ s ])), {
              type: b[o],
              data: s
            };
          }, e.decodeBase64Packet = function(t, e) {
            var n = b[t.charAt(0)];
            if (!u) return {
              type: n,
              data: {
                base64: !0,
                data: t.substr(1)
              }
            };
            var r = u.decode(t.substr(1));
            return "blob" === e && w && (r = new w([ r ])), {
              type: n,
              data: r
            };
          }, e.encodePayload = function(t, n, r) {
            function o(t) {
              return t.length + ":" + t;
            }
            function i(t, r) {
              e.encodePacket(t, !!s && n, !1, function(t) {
                r(null, o(t));
              });
            }
            "function" == typeof n && (r = n, n = null);
            var s = h(t);
            return n && s ? w && !g ? e.encodePayloadAsBlob(t, r) : e.encodePayloadAsArrayBuffer(t, r) : t.length ? void c(t, i, function(t, e) {
              return r(e.join(""));
            }) : r("0:");
          }, e.decodePayload = function(t, n, r) {
            if ("string" != typeof t) return e.decodePayloadAsBinary(t, n, r);
            "function" == typeof n && (r = n, n = null);
            var o;
            if ("" === t) return r(C, 0, 1);
            for (var i, s, a = "", c = 0, u = t.length; c < u; c++) {
              var p = t.charAt(c);
              if (":" === p) {
                if ("" === a || a != (i = Number(a))) return r(C, 0, 1);
                if (s = t.substr(c + 1, i), a != s.length) return r(C, 0, 1);
                if (s.length) {
                  if (o = e.decodePacket(s, n, !1), C.type === o.type && C.data === o.data) return r(C, 0, 1);
                  var h = r(o, c + i, u);
                  if (!1 === h) return;
                }
                c += i, a = "";
              } else a += p;
            }
            return "" !== a ? r(C, 0, 1) : void 0;
          }, e.encodePayloadAsArrayBuffer = function(t, n) {
            function r(t, n) {
              e.encodePacket(t, !0, !0, function(t) {
                return n(null, t);
              });
            }
            return t.length ? void c(t, r, function(t, e) {
              var r = e.reduce(function(t, e) {
                var n;
                return n = "string" == typeof e ? e.length : e.byteLength, t + n.toString().length + n + 2;
              }, 0), o = new Uint8Array(r), i = 0;
              return e.forEach(function(t) {
                var e = "string" == typeof t, n = t;
                if (e) {
                  for (var r = new Uint8Array(t.length), s = 0; s < t.length; s++) r[s] = t.charCodeAt(s);
                  n = r.buffer;
                }
                o[i++] = e ? 0 : 1;
                for (var a = n.byteLength.toString(), s = 0; s < a.length; s++) o[i++] = parseInt(a[s]);
                o[i++] = 255;
                for (var r = new Uint8Array(n), s = 0; s < r.length; s++) o[i++] = r[s];
              }), n(o.buffer);
            }) : n(new ArrayBuffer(0));
          }, e.encodePayloadAsBlob = function(t, n) {
            function r(t, n) {
              e.encodePacket(t, !0, !0, function(t) {
                var e = new Uint8Array(1);
                if (e[0] = 1, "string" == typeof t) {
                  for (var r = new Uint8Array(t.length), o = 0; o < t.length; o++) r[o] = t.charCodeAt(o);
                  t = r.buffer, e[0] = 0;
                }
                for (var i = t instanceof ArrayBuffer ? t.byteLength : t.size, s = i.toString(), a = new Uint8Array(s.length + 1), o = 0; o < s.length; o++) a[o] = parseInt(s[o]);
                if (a[s.length] = 255, w) {
                  var c = new w([ e.buffer, a.buffer, t ]);
                  n(null, c);
                }
              });
            }
            c(t, r, function(t, e) {
              return n(new w(e));
            });
          }, e.decodePayloadAsBinary = function(t, n, r) {
            "function" == typeof n && (r = n, n = null);
            for (var o = t, i = []; o.byteLength > 0; ) {
              for (var s = new Uint8Array(o), a = 0 === s[0], c = "", u = 1; 255 !== s[u]; u++) {
                if (c.length > 310) return r(C, 0, 1);
                c += s[u];
              }
              o = f(o, 2 + c.length), c = parseInt(c);
              var p = f(o, 0, c);
              if (a) try {
                p = String.fromCharCode.apply(null, new Uint8Array(p));
              } catch (h) {
                var l = new Uint8Array(p);
                p = "";
                for (var u = 0; u < l.length; u++) p += String.fromCharCode(l[u]);
              }
              i.push(p), o = f(o, c);
            }
            var d = i.length;
            i.forEach(function(t, o) {
              r(e.decodePacket(t, n, !0), o, d);
            });
          };
        }, function(t, e) {
          t.exports = Object.keys || function(t) {
            var e = [], n = Object.prototype.hasOwnProperty;
            for (var r in t) n.call(t, r) && e.push(r);
            return e;
          };
        }, function(t, e, n) {
          function r(t) {
            if (!t || "object" != typeof t) return !1;
            if (o(t)) {
              for (var e = 0, n = t.length; e < n; e++) if (r(t[e])) return !0;
              return !1;
            }
            if ("function" == typeof Buffer && Buffer.isBuffer && Buffer.isBuffer(t) || "function" == typeof ArrayBuffer && t instanceof ArrayBuffer || s && t instanceof Blob || a && t instanceof File) return !0;
            if (t.toJSON && "function" == typeof t.toJSON && 1 === arguments.length) return r(t.toJSON(), !0);
            for (var i in t) if (Object.prototype.hasOwnProperty.call(t, i) && r(t[i])) return !0;
            return !1;
          }
          var o = n(13), i = Object.prototype.toString, s = "function" == typeof Blob || "undefined" != typeof Blob && "[object BlobConstructor]" === i.call(Blob), a = "function" == typeof File || "undefined" != typeof File && "[object FileConstructor]" === i.call(File);
          t.exports = r;
        }, function(t, e) {
          t.exports = function(t, e, n) {
            var r = t.byteLength;
            if (e = e || 0, n = n || r, t.slice) return t.slice(e, n);
            if (e < 0 && (e += r), n < 0 && (n += r), n > r && (n = r), e >= r || e >= n || 0 === r) return new ArrayBuffer(0);
            for (var o = new Uint8Array(t), i = new Uint8Array(n - e), s = e, a = 0; s < n; s++, 
            a++) i[a] = o[s];
            return i.buffer;
          };
        }, function(t, e) {
          function n(t, e, n) {
            function o(t, r) {
              if (o.count <= 0) throw new Error("after called too many times");
              --o.count, t ? (i = !0, e(t), e = n) : 0 !== o.count || i || e(null, r);
            }
            var i = !1;
            return n = n || r, o.count = t, 0 === t ? e() : o;
          }
          function r() {}
          t.exports = n;
        }, function(t, e) {
          function n(t) {
            for (var e, n, r = [], o = 0, i = t.length; o < i; ) e = t.charCodeAt(o++), e >= 55296 && e <= 56319 && o < i ? (n = t.charCodeAt(o++), 
            56320 == (64512 & n) ? r.push(((1023 & e) << 10) + (1023 & n) + 65536) : (r.push(e), 
            o--)) : r.push(e);
            return r;
          }
          function r(t) {
            for (var e, n = t.length, r = -1, o = ""; ++r < n; ) e = t[r], e > 65535 && (e -= 65536, 
            o += d(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), o += d(e);
            return o;
          }
          function o(t, e) {
            if (t >= 55296 && t <= 57343) {
              if (e) throw Error("Lone surrogate U+" + t.toString(16).toUpperCase() + " is not a scalar value");
              return !1;
            }
            return !0;
          }
          function i(t, e) {
            return d(t >> e & 63 | 128);
          }
          function s(t, e) {
            if (0 == (4294967168 & t)) return d(t);
            var n = "";
            return 0 == (4294965248 & t) ? n = d(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (o(t, e) || (t = 65533), 
            n = d(t >> 12 & 15 | 224), n += i(t, 6)) : 0 == (4292870144 & t) && (n = d(t >> 18 & 7 | 240), 
            n += i(t, 12), n += i(t, 6)), n + d(63 & t | 128);
          }
          function a(t, e) {
            e = e || {};
            for (var r, o = !1 !== e.strict, i = n(t), a = i.length, c = -1, u = ""; ++c < a; ) r = i[c], 
            u += s(r, o);
            return u;
          }
          function c() {
            if (l >= f) throw Error("Invalid byte index");
            var t = 255 & h[l];
            if (l++, 128 == (192 & t)) return 63 & t;
            throw Error("Invalid continuation byte");
          }
          function u(t) {
            var e, n, r, i, s;
            if (l > f) throw Error("Invalid byte index");
            if (l == f) return !1;
            if (e = 255 & h[l], l++, 0 == (128 & e)) return e;
            if (192 == (224 & e)) {
              if (n = c(), s = (31 & e) << 6 | n, s >= 128) return s;
              throw Error("Invalid continuation byte");
            }
            if (224 == (240 & e)) {
              if (n = c(), r = c(), s = (15 & e) << 12 | n << 6 | r, s >= 2048) return o(s, t) ? s : 65533;
              throw Error("Invalid continuation byte");
            }
            if (240 == (248 & e) && (n = c(), r = c(), i = c(), s = (7 & e) << 18 | n << 12 | r << 6 | i, 
            s >= 65536 && s <= 1114111)) return s;
            throw Error("Invalid UTF-8 detected");
          }
          function p(t, e) {
            e = e || {};
            var o = !1 !== e.strict;
            h = n(t), f = h.length, l = 0;
            for (var i, s = []; !1 !== (i = u(o)); ) s.push(i);
            return r(s);
          }
          var h, f, l, d = String.fromCharCode;
          t.exports = {
            version: "2.1.2",
            encode: a,
            decode: p
          };
        }, function(t, e) {
          !function() {
            for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", n = new Uint8Array(256), r = 0; r < t.length; r++) n[t.charCodeAt(r)] = r;
            e.encode = function(e) {
              var n, r = new Uint8Array(e), o = r.length, i = "";
              for (n = 0; n < o; n += 3) i += t[r[n] >> 2], i += t[(3 & r[n]) << 4 | r[n + 1] >> 4], 
              i += t[(15 & r[n + 1]) << 2 | r[n + 2] >> 6], i += t[63 & r[n + 2]];
              return o % 3 === 2 ? i = i.substring(0, i.length - 1) + "=" : o % 3 === 1 && (i = i.substring(0, i.length - 2) + "=="), 
              i;
            }, e.decode = function(t) {
              var e, r, o, i, s, a = .75 * t.length, c = t.length, u = 0;
              "=" === t[t.length - 1] && (a--, "=" === t[t.length - 2] && a--);
              var p = new ArrayBuffer(a), h = new Uint8Array(p);
              for (e = 0; e < c; e += 4) r = n[t.charCodeAt(e)], o = n[t.charCodeAt(e + 1)], i = n[t.charCodeAt(e + 2)], 
              s = n[t.charCodeAt(e + 3)], h[u++] = r << 2 | o >> 4, h[u++] = (15 & o) << 4 | i >> 2, 
              h[u++] = (3 & i) << 6 | 63 & s;
              return p;
            };
          }();
        }, function(t, e) {
          function n(t) {
            return t.map(function(t) {
              if (t.buffer instanceof ArrayBuffer) {
                var e = t.buffer;
                if (t.byteLength !== e.byteLength) {
                  var n = new Uint8Array(t.byteLength);
                  n.set(new Uint8Array(e, t.byteOffset, t.byteLength)), e = n.buffer;
                }
                return e;
              }
              return t;
            });
          }
          function r(t, e) {
            e = e || {};
            var r = new i();
            return n(t).forEach(function(t) {
              r.append(t);
            }), e.type ? r.getBlob(e.type) : r.getBlob();
          }
          function o(t, e) {
            return new Blob(n(t), e || {});
          }
          var i = "undefined" != typeof i ? i : "undefined" != typeof WebKitBlobBuilder ? WebKitBlobBuilder : "undefined" != typeof MSBlobBuilder ? MSBlobBuilder : "undefined" != typeof MozBlobBuilder && MozBlobBuilder, s = function() {
            try {
              var t = new Blob([ "hi" ]);
              return 2 === t.size;
            } catch (e) {
              return !1;
            }
          }(), a = s && function() {
            try {
              var t = new Blob([ new Uint8Array([ 1, 2 ]) ]);
              return 2 === t.size;
            } catch (e) {
              return !1;
            }
          }(), c = i && i.prototype.append && i.prototype.getBlob;
          "undefined" != typeof Blob && (r.prototype = Blob.prototype, o.prototype = Blob.prototype), 
          t.exports = function() {
            return s ? a ? Blob : o : c ? r : void 0;
          }();
        }, function(t, e) {
          e.encode = function(t) {
            var e = "";
            for (var n in t) t.hasOwnProperty(n) && (e.length && (e += "&"), e += encodeURIComponent(n) + "=" + encodeURIComponent(t[n]));
            return e;
          }, e.decode = function(t) {
            for (var e = {}, n = t.split("&"), r = 0, o = n.length; r < o; r++) {
              var i = n[r].split("=");
              e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);
            }
            return e;
          };
        }, function(t, e) {
          t.exports = function(t, e) {
            var n = function n() {};
            n.prototype = e.prototype, t.prototype = new n(), t.prototype.constructor = t;
          };
        }, function(t, e) {
          function n(t) {
            var e = "";
            do {
              e = s[t % a] + e, t = Math.floor(t / a);
            } while (t > 0);
            return e;
          }
          function r(t) {
            var e = 0;
            for (p = 0; p < t.length; p++) e = e * a + c[t.charAt(p)];
            return e;
          }
          function o() {
            var t = n(+new Date());
            return t !== i ? (u = 0, i = t) : t + "." + n(u++);
          }
          for (var i, s = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""), a = 64, c = {}, u = 0, p = 0; p < a; p++) c[s[p]] = p;
          o.encode = n, o.decode = r, t.exports = o;
        }, function(t, e, n) {
          (function(e) {
            function r() {}
            function o() {
              return "undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof e ? e : {};
            }
            function i(t) {
              if (s.call(this, t), this.query = this.query || {}, !c) {
                var e = o();
                c = e.___eio = e.___eio || [];
              }
              this.index = c.length;
              var n = this;
              c.push(function(t) {
                n.onData(t);
              }), this.query.j = this.index, "function" == typeof addEventListener && addEventListener("beforeunload", function() {
                n.script && (n.script.onerror = r);
              }, !1);
            }
            var s = n(22), a = n(33);
            t.exports = i;
            var c, u = /\n/g, p = /\\n/g;
            a(i, s), i.prototype.supportsBinary = !1, i.prototype.doClose = function() {
              this.script && (this.script.parentNode.removeChild(this.script), this.script = null), 
              this.form && (this.form.parentNode.removeChild(this.form), this.form = null, this.iframe = null), 
              s.prototype.doClose.call(this);
            }, i.prototype.doPoll = function() {
              var t = this, e = document.createElement("script");
              this.script && (this.script.parentNode.removeChild(this.script), this.script = null), 
              e.async = !0, e.src = this.uri(), e.onerror = function(e) {
                t.onError("jsonp poll error", e);
              };
              var n = document.getElementsByTagName("script")[0];
              n ? n.parentNode.insertBefore(e, n) : (document.head || document.body).appendChild(e), 
              this.script = e;
              var r = "undefined" != typeof navigator && /gecko/i.test(navigator.userAgent);
              r && setTimeout(function() {
                var t = document.createElement("iframe");
                document.body.appendChild(t), document.body.removeChild(t);
              }, 100);
            }, i.prototype.doWrite = function(t, e) {
              function n() {
                r(), e();
              }
              function r() {
                if (o.iframe) try {
                  o.form.removeChild(o.iframe);
                } catch (t) {
                  o.onError("jsonp polling iframe removal error", t);
                }
                try {
                  var e = '<iframe src="javascript:0" name="' + o.iframeId + '">';
                  i = document.createElement(e);
                } catch (t) {
                  i = document.createElement("iframe"), i.name = o.iframeId, i.src = "javascript:0";
                }
                i.id = o.iframeId, o.form.appendChild(i), o.iframe = i;
              }
              var o = this;
              if (!this.form) {
                var i, s = document.createElement("form"), a = document.createElement("textarea"), c = this.iframeId = "eio_iframe_" + this.index;
                s.className = "socketio", s.style.position = "absolute", s.style.top = "-1000px", 
                s.style.left = "-1000px", s.target = c, s.method = "POST", s.setAttribute("accept-charset", "utf-8"), 
                a.name = "d", s.appendChild(a), document.body.appendChild(s), this.form = s, this.area = a;
              }
              this.form.action = this.uri(), r(), t = t.replace(p, "\\\n"), this.area.value = t.replace(u, "\\n");
              try {
                this.form.submit();
              } catch (h) {}
              this.iframe.attachEvent ? this.iframe.onreadystatechange = function() {
                "complete" === o.iframe.readyState && n();
              } : this.iframe.onload = n;
            };
          }).call(e, function() {
            return this;
          }());
        }, function(t, e, n) {
          function r(t) {
            var e = t && t.forceBase64;
            e && (this.supportsBinary = !1), this.perMessageDeflate = t.perMessageDeflate, this.usingBrowserWebSocket = o && !t.forceNode, 
            this.protocols = t.protocols, this.usingBrowserWebSocket || (l = i), s.call(this, t);
          }
          var o, i, s = n(23), a = n(24), c = n(32), u = n(33), p = n(34), h = n(3)("engine.io-client:websocket");
          if ("undefined" != typeof WebSocket ? o = WebSocket : "undefined" != typeof self && (o = self.WebSocket || self.MozWebSocket), 
          "undefined" == typeof window) try {
            i = n(37);
          } catch (f) {}
          var l = o || i;
          t.exports = r, u(r, s), r.prototype.name = "websocket", r.prototype.supportsBinary = !0, 
          r.prototype.doOpen = function() {
            if (this.check()) {
              var t = this.uri(), e = this.protocols, n = {
                agent: this.agent,
                perMessageDeflate: this.perMessageDeflate
              };
              n.pfx = this.pfx, n.key = this.key, n.passphrase = this.passphrase, n.cert = this.cert, 
              n.ca = this.ca, n.ciphers = this.ciphers, n.rejectUnauthorized = this.rejectUnauthorized, 
              this.extraHeaders && (n.headers = this.extraHeaders), this.localAddress && (n.localAddress = this.localAddress);
              try {
                this.ws = this.usingBrowserWebSocket && !this.isReactNative ? e ? new l(t, e) : new l(t) : new l(t, e, n);
              } catch (r) {
                return this.emit("error", r);
              }
              void 0 === this.ws.binaryType && (this.supportsBinary = !1), this.ws.supports && this.ws.supports.binary ? (this.supportsBinary = !0, 
              this.ws.binaryType = "nodebuffer") : this.ws.binaryType = "arraybuffer", this.addEventListeners();
            }
          }, r.prototype.addEventListeners = function() {
            var t = this;
            this.ws.onopen = function() {
              t.onOpen();
            }, this.ws.onclose = function() {
              t.onClose();
            }, this.ws.onmessage = function(e) {
              t.onData(e.data);
            }, this.ws.onerror = function(e) {
              t.onError("websocket error", e);
            };
          }, r.prototype.write = function(t) {
            function e() {
              n.emit("flush"), setTimeout(function() {
                n.writable = !0, n.emit("drain");
              }, 0);
            }
            var n = this;
            this.writable = !1;
            for (var r = t.length, o = 0, i = r; o < i; o++) !function(t) {
              a.encodePacket(t, n.supportsBinary, function(o) {
                if (!n.usingBrowserWebSocket) {
                  var i = {};
                  if (t.options && (i.compress = t.options.compress), n.perMessageDeflate) {
                    var s = "string" == typeof o ? Buffer.byteLength(o) : o.length;
                    s < n.perMessageDeflate.threshold && (i.compress = !1);
                  }
                }
                try {
                  n.usingBrowserWebSocket ? n.ws.send(o) : n.ws.send(o, i);
                } catch (a) {
                  h("websocket closed before onclose event");
                }
                --r || e();
              });
            }(t[o]);
          }, r.prototype.onClose = function() {
            s.prototype.onClose.call(this);
          }, r.prototype.doClose = function() {
            "undefined" != typeof this.ws && this.ws.close();
          }, r.prototype.uri = function() {
            var t = this.query || {}, e = this.secure ? "wss" : "ws", n = "";
            this.port && ("wss" === e && 443 !== Number(this.port) || "ws" === e && 80 !== Number(this.port)) && (n = ":" + this.port), 
            this.timestampRequests && (t[this.timestampParam] = p()), this.supportsBinary || (t.b64 = 1), 
            t = c.encode(t), t.length && (t = "?" + t);
            var r = -1 !== this.hostname.indexOf(":");
            return e + "://" + (r ? "[" + this.hostname + "]" : this.hostname) + n + this.path + t;
          }, r.prototype.check = function() {
            return !(!l || "__initialize" in l && this.name === r.prototype.name);
          };
        }, function(t, e) {}, function(t, e) {
          var n = [].indexOf;
          t.exports = function(t, e) {
            if (n) return t.indexOf(e);
            for (var r = 0; r < t.length; ++r) if (t[r] === e) return r;
            return -1;
          };
        }, function(t, e, n) {
          function r(t, e, n) {
            this.io = t, this.nsp = e, this.json = this, this.ids = 0, this.acks = {}, this.receiveBuffer = [], 
            this.sendBuffer = [], this.connected = !1, this.disconnected = !0, this.flags = {}, 
            n && n.query && (this.query = n.query), this.io.autoConnect && this.open();
          }
          var o = n(7), i = n(11), s = n(40), a = n(41), c = n(42), u = n(3)("socket.io-client:socket"), p = n(32), h = n(26);
          t.exports = e = r;
          var f = {
            connect: 1,
            connect_error: 1,
            connect_timeout: 1,
            connecting: 1,
            disconnect: 1,
            error: 1,
            reconnect: 1,
            reconnect_attempt: 1,
            reconnect_failed: 1,
            reconnect_error: 1,
            reconnecting: 1,
            ping: 1,
            pong: 1
          }, l = i.prototype.emit;
          i(r.prototype), r.prototype.subEvents = function() {
            if (!this.subs) {
              var t = this.io;
              this.subs = [ a(t, "open", c(this, "onopen")), a(t, "packet", c(this, "onpacket")), a(t, "close", c(this, "onclose")) ];
            }
          }, r.prototype.open = r.prototype.connect = function() {
            return this.connected ? this : (this.subEvents(), this.io.open(), "open" === this.io.readyState && this.onopen(), 
            this.emit("connecting"), this);
          }, r.prototype.send = function() {
            var t = s(arguments);
            return t.unshift("message"), this.emit.apply(this, t), this;
          }, r.prototype.emit = function(t) {
            if (f.hasOwnProperty(t)) return l.apply(this, arguments), this;
            var e = s(arguments), n = {
              type: (void 0 !== this.flags.binary ? this.flags.binary : h(e)) ? o.BINARY_EVENT : o.EVENT,
              data: e
            };
            return n.options = {}, n.options.compress = !this.flags || !1 !== this.flags.compress, 
            "function" == typeof e[e.length - 1] && (u("emitting packet with ack id %d", this.ids), 
            this.acks[this.ids] = e.pop(), n.id = this.ids++), this.connected ? this.packet(n) : this.sendBuffer.push(n), 
            this.flags = {}, this;
          }, r.prototype.packet = function(t) {
            t.nsp = this.nsp, this.io.packet(t);
          }, r.prototype.onopen = function() {
            if (u("transport is open - connecting"), "/" !== this.nsp) if (this.query) {
              var t = "object" == typeof this.query ? p.encode(this.query) : this.query;
              u("sending connect packet with query %s", t), this.packet({
                type: o.CONNECT,
                query: t
              });
            } else this.packet({
              type: o.CONNECT
            });
          }, r.prototype.onclose = function(t) {
            u("close (%s)", t), this.connected = !1, this.disconnected = !0, delete this.id, 
            this.emit("disconnect", t);
          }, r.prototype.onpacket = function(t) {
            var e = t.nsp === this.nsp, n = t.type === o.ERROR && "/" === t.nsp;
            if (e || n) switch (t.type) {
             case o.CONNECT:
              this.onconnect();
              break;

             case o.EVENT:
             case o.BINARY_EVENT:
              this.onevent(t);
              break;

             case o.ACK:
             case o.BINARY_ACK:
              this.onack(t);
              break;

             case o.DISCONNECT:
              this.ondisconnect();
              break;

             case o.ERROR:
              this.emit("error", t.data);
            }
          }, r.prototype.onevent = function(t) {
            var e = t.data || [];
            u("emitting event %j", e), null != t.id && (u("attaching ack callback to event"), 
            e.push(this.ack(t.id))), this.connected ? l.apply(this, e) : this.receiveBuffer.push(e);
          }, r.prototype.ack = function(t) {
            var e = this, n = !1;
            return function() {
              if (!n) {
                n = !0;
                var r = s(arguments);
                u("sending ack %j", r), e.packet({
                  type: h(r) ? o.BINARY_ACK : o.ACK,
                  id: t,
                  data: r
                });
              }
            };
          }, r.prototype.onack = function(t) {
            var e = this.acks[t.id];
            "function" == typeof e ? (u("calling ack %s with %j", t.id, t.data), e.apply(this, t.data), 
            delete this.acks[t.id]) : u("bad ack %s", t.id);
          }, r.prototype.onconnect = function() {
            this.connected = !0, this.disconnected = !1, this.emit("connect"), this.emitBuffered();
          }, r.prototype.emitBuffered = function() {
            var t;
            for (t = 0; t < this.receiveBuffer.length; t++) l.apply(this, this.receiveBuffer[t]);
            for (this.receiveBuffer = [], t = 0; t < this.sendBuffer.length; t++) this.packet(this.sendBuffer[t]);
            this.sendBuffer = [];
          }, r.prototype.ondisconnect = function() {
            u("server disconnect (%s)", this.nsp), this.destroy(), this.onclose("io server disconnect");
          }, r.prototype.destroy = function() {
            if (this.subs) {
              for (var t = 0; t < this.subs.length; t++) this.subs[t].destroy();
              this.subs = null;
            }
            this.io.destroy(this);
          }, r.prototype.close = r.prototype.disconnect = function() {
            return this.connected && (u("performing disconnect (%s)", this.nsp), this.packet({
              type: o.DISCONNECT
            })), this.destroy(), this.connected && this.onclose("io client disconnect"), this;
          }, r.prototype.compress = function(t) {
            return this.flags.compress = t, this;
          }, r.prototype.binary = function(t) {
            return this.flags.binary = t, this;
          };
        }, function(t, e) {
          function n(t, e) {
            var n = [];
            e = e || 0;
            for (var r = e || 0; r < t.length; r++) n[r - e] = t[r];
            return n;
          }
          t.exports = n;
        }, function(t, e) {
          function n(t, e, n) {
            return t.on(e, n), {
              destroy: function destroy() {
                t.removeListener(e, n);
              }
            };
          }
          t.exports = n;
        }, function(t, e) {
          var n = [].slice;
          t.exports = function(t, e) {
            if ("string" == typeof e && (e = t[e]), "function" != typeof e) throw new Error("bind() requires a function");
            var r = n.call(arguments, 2);
            return function() {
              return e.apply(t, r.concat(n.call(arguments)));
            };
          };
        }, function(t, e) {
          function n(t) {
            t = t || {}, this.ms = t.min || 100, this.max = t.max || 1e4, this.factor = t.factor || 2, 
            this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0, this.attempts = 0;
          }
          t.exports = n, n.prototype.duration = function() {
            var t = this.ms * Math.pow(this.factor, this.attempts++);
            if (this.jitter) {
              var e = Math.random(), n = Math.floor(e * this.jitter * t);
              t = 0 == (1 & Math.floor(10 * e)) ? t - n : t + n;
            }
            return 0 | Math.min(t, this.max);
          }, n.prototype.reset = function() {
            this.attempts = 0;
          }, n.prototype.setMin = function(t) {
            this.ms = t;
          }, n.prototype.setMax = function(t) {
            this.max = t;
          }, n.prototype.setJitter = function(t) {
            this.jitter = t;
          };
        } ]);
      });
      cc._RF.pop();
    }).call(this, require("buffer").Buffer);
  }, {
    buffer: 2
  } ],
  zh: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7f6b1yEa6ZD2qvmFYW6K/rD", "zh");
    window.i18nConfig || (window.i18nConfig = {});
    window.i18nConfig.languages || (window.i18nConfig.languages = {});
    window.i18nConfig.languages.zh = {
      mainUI: {
        load_text_content: "\u52a0\u8f7d\u4e2d",
        confirm_text: "\u786e\u5b9a",
        cancel_text: "\u5173\u95ed"
      }
    };
    cc._RF.pop();
  }, {} ]
}, {}, [ "BgAdapter", "ContentAdapter", "PageCtrlBase", "ResLoader", "SceneCtrlBase", "SpineBase", "UIBase", "AudioMgr", "DataMgr", "EventMgr", "GameMgr", "NetMgr", "SceneMgr", "SpineMgr", "TimerMgr", "UIMgr", "BehaviorTreeNode", "BehaviorTreeSystem", "ButtonEx", "List", "ListItem", "ItemBase", "ScrollViewCtrl", "MyPolyfill", "Queue", "socket.io", "AppLog", "ProtocolHelper", "parts", "connector", "module", "SimpleFSMState", "SimpleFSMSystem", "MyDynamicAltasManager", "Utils", "AppContext", "AppContextFSM", "GameConfig", "Global", "DataHelper", "EventID", "GameEnums", "GameInterfaces", "PersonalData", "PlayerData", "TableConfigData", "TextEnums", "HeartBeatHelper", "NetHandler", "NetSender", "UI_DoubleComDialog", "UI_DoubleNetDialog", "UI_SingerComDialog", "LoadCtrl", "LoadFSM", "LoadView", "MainCtrl", "MainView", "LanguageData", "LocalizedLabel", "LocalizedSprite", "SpriteFrameSet", "polyglot.min", "en", "zh" ]);